// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_large_cl_nopad_pad_me_ap_fixed_ap_fixed_config8_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_V_dout,
        data_V_V_empty_n,
        data_V_V_read,
        res_V_V_din,
        res_V_V_full_n,
        res_V_V_write
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_V_dout;
input   data_V_V_empty_n;
output   data_V_V_read;
output  [15:0] res_V_V_din;
input   res_V_V_full_n;
output   res_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_V_read;
reg res_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [6:0] layer_in_V_5_address0;
reg    layer_in_V_5_ce0;
reg    layer_in_V_5_we0;
wire   [15:0] layer_in_V_5_q0;
reg   [31:0] sX;
reg   [31:0] sY;
reg   [31:0] pY;
reg   [31:0] pX;
reg    data_V_V_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln489_fu_371_p2;
reg    res_V_V_blk_n;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln512_fu_574_p2;
reg    ap_block_state1;
wire   [9:0] i_ih_fu_365_p2;
reg   [9:0] i_ih_reg_622;
wire    ap_CS_fsm_state2;
wire   [5:0] i0_fu_377_p2;
reg   [5:0] i0_reg_630;
reg    ap_block_state3;
reg   [15:0] tmp_V_11_reg_635;
reg   [31:0] sX_load_reg_640;
wire    ap_CS_fsm_state5;
wire    grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_ready;
wire    grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_done;
wire   [0:0] icmp_ln498_fu_392_p2;
reg   [0:0] icmp_ln498_reg_645;
reg   [31:0] sY_load_reg_650;
wire   [0:0] icmp_ln498_1_fu_402_p2;
reg   [0:0] icmp_ln498_1_reg_655;
reg   [31:0] pY_load_reg_660;
reg   [31:0] pX_load_reg_666;
wire   [0:0] and_ln498_2_fu_440_p2;
reg   [0:0] and_ln498_2_reg_672;
wire   [6:0] zext_ln500_fu_446_p1;
reg   [6:0] zext_ln500_reg_676;
wire    ap_CS_fsm_state6;
wire   [5:0] i1_fu_456_p2;
reg   [5:0] i1_reg_684;
wire   [0:0] icmp_ln522_fu_462_p2;
reg   [0:0] icmp_ln522_reg_689;
wire   [0:0] icmp_ln500_fu_450_p2;
wire   [31:0] select_ln537_fu_483_p3;
reg   [31:0] select_ln537_reg_693;
wire   [31:0] select_ln532_fu_523_p3;
reg   [31:0] select_ln532_reg_701;
wire   [0:0] icmp_ln526_fu_502_p2;
wire   [2:0] i2_fu_542_p2;
reg   [2:0] i2_reg_709;
wire    ap_CS_fsm_state7;
wire   [6:0] add_ln508_fu_560_p2;
reg   [6:0] add_ln508_reg_714;
wire   [0:0] icmp_ln506_fu_536_p2;
wire    ap_CS_fsm_state8;
reg   [15:0] layer_in_V_5_load_reg_724;
wire    ap_CS_fsm_state9;
wire   [15:0] pool_V_q0;
wire    ap_CS_fsm_state11;
reg    ap_block_state12;
wire   [2:0] i_fu_585_p2;
reg   [2:0] i_reg_742;
reg   [15:0] pool_V_load_reg_747;
wire    ap_CS_fsm_state13;
wire   [15:0] pool_res_V_1_fu_596_p3;
wire    ap_CS_fsm_state14;
reg   [4:0] tmpdata_V_address0;
reg    tmpdata_V_ce0;
reg    tmpdata_V_we0;
wire   [15:0] tmpdata_V_q0;
reg   [1:0] pool_V_address0;
reg    pool_V_ce0;
reg    pool_V_we0;
wire    grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_start;
wire    grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_idle;
wire   [4:0] grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_data_V_address0;
wire    grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_data_V_ce0;
wire   [6:0] grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_address0;
wire    grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_ce0;
wire    grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_we0;
wire   [15:0] grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_d0;
reg   [9:0] i_ih_0_reg_209;
wire    ap_CS_fsm_state17;
reg   [5:0] i0_0_reg_220;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln484_fu_359_p2;
reg   [5:0] i1_0_reg_232;
reg   [2:0] i2_0_reg_243;
wire    ap_CS_fsm_state10;
reg   [15:0] tmp_V_reg_255;
reg   [2:0] i_0_reg_266;
reg   [31:0] storemerge_reg_277;
wire    ap_CS_fsm_state16;
reg    grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_start_reg;
reg    ap_block_state3_ignore_call0;
wire   [63:0] zext_ln492_fu_383_p1;
wire   [63:0] zext_ln508_1_fu_565_p1;
wire   [63:0] zext_ln508_fu_569_p1;
wire   [63:0] zext_ln513_fu_580_p1;
wire    ap_CS_fsm_state15;
wire   [31:0] add_ln530_fu_507_p2;
wire   [31:0] add_ln535_fu_467_p2;
wire   [0:0] icmp_ln498_2_fu_412_p2;
wire   [0:0] icmp_ln498_3_fu_422_p2;
wire   [0:0] and_ln498_1_fu_434_p2;
wire   [0:0] and_ln498_fu_428_p2;
wire   [31:0] add_ln537_fu_478_p2;
wire   [31:0] add_ln532_fu_518_p2;
wire   [1:0] trunc_ln508_fu_548_p1;
wire   [6:0] shl_ln_fu_552_p3;
wire   [0:0] icmp_ln1494_fu_591_p2;
reg   [16:0] ap_NS_fsm;
reg    ap_condition_166;
reg    ap_condition_715;
reg    ap_condition_177;
reg    ap_condition_316;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 17'd1;
#0 sX = 32'd0;
#0 sY = 32'd0;
#0 pY = 32'd0;
#0 pX = 32'd0;
#0 grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_start_reg = 1'b0;
end

pooling2d_large_cl_nopad_pad_me_ap_fixed_ap_fixed_config8QgW #(
    .DataWidth( 16 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
layer_in_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer_in_V_5_address0),
    .ce0(layer_in_V_5_ce0),
    .we0(layer_in_V_5_we0),
    .d0(grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_d0),
    .q0(layer_in_V_5_q0)
);

conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config5_s_tmpdhbi #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
tmpdata_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmpdata_V_address0),
    .ce0(tmpdata_V_ce0),
    .we0(tmpdata_V_we0),
    .d0(tmp_V_11_reg_635),
    .q0(tmpdata_V_q0)
);

pooling2d_large_cl_nopad_pad_me_ap_fixed_ap_fixed_config8Shg #(
    .DataWidth( 16 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
pool_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pool_V_address0),
    .ce0(pool_V_ce0),
    .we0(pool_V_we0),
    .d0(layer_in_V_5_load_reg_724),
    .q0(pool_V_q0)
);

cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_start),
    .ap_done(grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_done),
    .ap_idle(grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_idle),
    .ap_ready(grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_ready),
    .data_V_address0(grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_data_V_address0),
    .data_V_ce0(grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_data_V_ce0),
    .data_V_q0(tmpdata_V_q0),
    .output_V_address0(grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_address0),
    .output_V_ce0(grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_ce0),
    .output_V_we0(grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_we0),
    .output_V_d0(grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_d0),
    .output_V_q0(layer_in_V_5_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln484_fu_359_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_start_reg <= 1'b0;
    end else begin
        if ((~((icmp_ln489_fu_371_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln489_fu_371_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_start_reg <= 1'b1;
        end else if ((grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_ready == 1'b1)) begin
            grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln484_fu_359_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i0_0_reg_220 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i0_0_reg_220 <= i0_reg_630;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln498_2_fu_440_p2) & (1'b1 == ap_CS_fsm_state5) & (grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_done == 1'b1))) begin
        i1_0_reg_232 <= 6'd0;
    end else if ((~((icmp_ln512_fu_574_p2 == 1'd1) & (res_V_V_full_n == 1'b0)) & (icmp_ln512_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        i1_0_reg_232 <= i1_reg_684;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln498_2_reg_672) & (icmp_ln500_fu_450_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        i2_0_reg_243 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i2_0_reg_243 <= i2_reg_709;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_0_reg_266 <= i_reg_742;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i_0_reg_266 <= 3'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_ih_0_reg_209 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        i_ih_0_reg_209 <= i_ih_reg_622;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        if ((1'b1 == ap_condition_715)) begin
            pX <= 32'd0;
        end else if ((1'b1 == ap_condition_166)) begin
            pX <= add_ln535_fu_467_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        if ((1'b1 == ap_condition_316)) begin
            pY <= 32'd0;
        end else if ((1'b1 == ap_condition_177)) begin
            pY <= add_ln530_fu_507_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        sX <= select_ln537_reg_693;
    end else if (((1'b1 == ap_CS_fsm_state6) & (((icmp_ln522_fu_462_p2 == 1'd1) & (1'd0 == and_ln498_2_reg_672)) | ((icmp_ln500_fu_450_p2 == 1'd1) & (icmp_ln522_fu_462_p2 == 1'd1))))) begin
        sX <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (((icmp_ln526_fu_502_p2 == 1'd1) & (icmp_ln522_fu_462_p2 == 1'd1) & (1'd0 == and_ln498_2_reg_672)) | ((icmp_ln526_fu_502_p2 == 1'd1) & (icmp_ln500_fu_450_p2 == 1'd1) & (icmp_ln522_fu_462_p2 == 1'd1))))) begin
        storemerge_reg_277 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        storemerge_reg_277 <= select_ln532_reg_701;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_V_reg_255 <= pool_res_V_1_fu_596_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_V_reg_255 <= pool_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln506_fu_536_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        add_ln508_reg_714 <= add_ln508_fu_560_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_done == 1'b1))) begin
        and_ln498_2_reg_672 <= and_ln498_2_fu_440_p2;
        icmp_ln498_1_reg_655 <= icmp_ln498_1_fu_402_p2;
        icmp_ln498_reg_645 <= icmp_ln498_fu_392_p2;
        pX_load_reg_666 <= pX;
        pY_load_reg_660 <= pY;
        sX_load_reg_640 <= sX;
        sY_load_reg_650 <= sY;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln489_fu_371_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        i0_reg_630 <= i0_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln498_2_reg_672) & (1'b1 == ap_CS_fsm_state6))) begin
        i1_reg_684 <= i1_fu_456_p2;
        zext_ln500_reg_676[5 : 0] <= zext_ln500_fu_446_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i2_reg_709 <= i2_fu_542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_ih_reg_622 <= i_ih_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln512_fu_574_p2 == 1'd1) & (res_V_V_full_n == 1'b0)) & (icmp_ln512_fu_574_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        i_reg_742 <= i_fu_585_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & ((icmp_ln500_fu_450_p2 == 1'd1) | (1'd0 == and_ln498_2_reg_672)))) begin
        icmp_ln522_reg_689 <= icmp_ln522_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        layer_in_V_5_load_reg_724 <= layer_in_V_5_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        pool_V_load_reg_747 <= pool_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln522_reg_689 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        sY <= storemerge_reg_277;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (((icmp_ln522_fu_462_p2 == 1'd1) & (icmp_ln526_fu_502_p2 == 1'd0) & (1'd0 == and_ln498_2_reg_672)) | ((icmp_ln500_fu_450_p2 == 1'd1) & (icmp_ln522_fu_462_p2 == 1'd1) & (icmp_ln526_fu_502_p2 == 1'd0))))) begin
        select_ln532_reg_701 <= select_ln532_fu_523_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (((icmp_ln522_fu_462_p2 == 1'd0) & (1'd0 == and_ln498_2_reg_672)) | ((icmp_ln500_fu_450_p2 == 1'd1) & (icmp_ln522_fu_462_p2 == 1'd0))))) begin
        select_ln537_reg_693 <= select_ln537_fu_483_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln489_fu_371_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln489_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_V_11_reg_635 <= data_V_V_dout;
    end
end

always @ (*) begin
    if (((icmp_ln484_fu_359_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln489_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_V_blk_n = data_V_V_empty_n;
    end else begin
        data_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln489_fu_371_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln489_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_V_read = 1'b1;
    end else begin
        data_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln484_fu_359_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        layer_in_V_5_address0 = zext_ln508_1_fu_565_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        layer_in_V_5_address0 = grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_address0;
    end else begin
        layer_in_V_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        layer_in_V_5_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        layer_in_V_5_ce0 = grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_ce0;
    end else begin
        layer_in_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        layer_in_V_5_we0 = grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_we0;
    end else begin
        layer_in_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        pool_V_address0 = zext_ln513_fu_580_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        pool_V_address0 = zext_ln508_fu_569_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        pool_V_address0 = 64'd0;
    end else begin
        pool_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (~((icmp_ln512_fu_574_p2 == 1'd1) & (res_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state12)))) begin
        pool_V_ce0 = 1'b1;
    end else begin
        pool_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        pool_V_we0 = 1'b1;
    end else begin
        pool_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln512_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        res_V_V_blk_n = res_V_V_full_n;
    end else begin
        res_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln512_fu_574_p2 == 1'd1) & (res_V_V_full_n == 1'b0)) & (icmp_ln512_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        res_V_V_write = 1'b1;
    end else begin
        res_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmpdata_V_address0 = zext_ln492_fu_383_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tmpdata_V_address0 = grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_data_V_address0;
    end else begin
        tmpdata_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmpdata_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tmpdata_V_ce0 = grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_data_V_ce0;
    end else begin
        tmpdata_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmpdata_V_we0 = 1'b1;
    end else begin
        tmpdata_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln484_fu_359_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((icmp_ln489_fu_371_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln489_fu_371_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if ((~((icmp_ln489_fu_371_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln489_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (((icmp_ln526_fu_502_p2 == 1'd1) & (icmp_ln522_fu_462_p2 == 1'd1) & (1'd0 == and_ln498_2_reg_672)) | ((icmp_ln526_fu_502_p2 == 1'd1) & (icmp_ln500_fu_450_p2 == 1'd1) & (icmp_ln522_fu_462_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else if (((1'b1 == ap_CS_fsm_state6) & (((icmp_ln522_fu_462_p2 == 1'd1) & (icmp_ln526_fu_502_p2 == 1'd0) & (1'd0 == and_ln498_2_reg_672)) | ((icmp_ln500_fu_450_p2 == 1'd1) & (icmp_ln522_fu_462_p2 == 1'd1) & (icmp_ln526_fu_502_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if (((1'b1 == ap_CS_fsm_state6) & (((icmp_ln522_fu_462_p2 == 1'd0) & (1'd0 == and_ln498_2_reg_672)) | ((icmp_ln500_fu_450_p2 == 1'd1) & (icmp_ln522_fu_462_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln506_fu_536_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if ((~((icmp_ln512_fu_574_p2 == 1'd1) & (res_V_V_full_n == 1'b0)) & (icmp_ln512_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if ((~((icmp_ln512_fu_574_p2 == 1'd1) & (res_V_V_full_n == 1'b0)) & (icmp_ln512_fu_574_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln508_fu_560_p2 = (zext_ln500_reg_676 + shl_ln_fu_552_p3);

assign add_ln530_fu_507_p2 = (pY_load_reg_660 + 32'd1);

assign add_ln532_fu_518_p2 = (sY_load_reg_650 + 32'd1);

assign add_ln535_fu_467_p2 = (pX_load_reg_666 + 32'd1);

assign add_ln537_fu_478_p2 = (sX_load_reg_640 + 32'd1);

assign and_ln498_1_fu_434_p2 = (icmp_ln498_3_fu_422_p2 & icmp_ln498_2_fu_412_p2);

assign and_ln498_2_fu_440_p2 = (and_ln498_fu_428_p2 & and_ln498_1_fu_434_p2);

assign and_ln498_fu_428_p2 = (icmp_ln498_fu_392_p2 & icmp_ln498_1_fu_402_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state12 = ((icmp_ln512_fu_574_p2 == 1'd1) & (res_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((icmp_ln489_fu_371_p2 == 1'd0) & (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_ignore_call0 = ((icmp_ln489_fu_371_p2 == 1'd0) & (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_166 = (((icmp_ln522_fu_462_p2 == 1'd0) & (1'd0 == and_ln498_2_reg_672)) | ((icmp_ln500_fu_450_p2 == 1'd1) & (icmp_ln522_fu_462_p2 == 1'd0)));
end

always @ (*) begin
    ap_condition_177 = (((icmp_ln522_fu_462_p2 == 1'd1) & (icmp_ln526_fu_502_p2 == 1'd0) & (1'd0 == and_ln498_2_reg_672)) | ((icmp_ln500_fu_450_p2 == 1'd1) & (icmp_ln522_fu_462_p2 == 1'd1) & (icmp_ln526_fu_502_p2 == 1'd0)));
end

always @ (*) begin
    ap_condition_316 = (((icmp_ln526_fu_502_p2 == 1'd1) & (icmp_ln522_fu_462_p2 == 1'd1) & (1'd0 == and_ln498_2_reg_672)) | ((icmp_ln526_fu_502_p2 == 1'd1) & (icmp_ln500_fu_450_p2 == 1'd1) & (icmp_ln522_fu_462_p2 == 1'd1)));
end

always @ (*) begin
    ap_condition_715 = (((icmp_ln522_fu_462_p2 == 1'd1) & (1'd0 == and_ln498_2_reg_672)) | ((icmp_ln500_fu_450_p2 == 1'd1) & (icmp_ln522_fu_462_p2 == 1'd1)));
end

assign ap_ready = internal_ap_ready;

assign grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_start = grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_start_reg;

assign i0_fu_377_p2 = (i0_0_reg_220 + 6'd1);

assign i1_fu_456_p2 = (i1_0_reg_232 + 6'd1);

assign i2_fu_542_p2 = (i2_0_reg_243 + 3'd1);

assign i_fu_585_p2 = (i_0_reg_266 + 3'd1);

assign i_ih_fu_365_p2 = (i_ih_0_reg_209 + 10'd1);

assign icmp_ln1494_fu_591_p2 = (($signed(pool_V_load_reg_747) > $signed(tmp_V_reg_255)) ? 1'b1 : 1'b0);

assign icmp_ln484_fu_359_p2 = ((i_ih_0_reg_209 == 10'd900) ? 1'b1 : 1'b0);

assign icmp_ln489_fu_371_p2 = ((i0_0_reg_220 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln498_1_fu_402_p2 = ((sY == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln498_2_fu_412_p2 = (($signed(pY) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln498_3_fu_422_p2 = (($signed(pX) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln498_fu_392_p2 = ((sX == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln500_fu_450_p2 = ((i1_0_reg_232 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln506_fu_536_p2 = ((i2_0_reg_243 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln512_fu_574_p2 = ((i_0_reg_266 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln522_fu_462_p2 = ((pX_load_reg_666 == 32'd29) ? 1'b1 : 1'b0);

assign icmp_ln526_fu_502_p2 = ((pY_load_reg_660 == 32'd29) ? 1'b1 : 1'b0);

assign pool_res_V_1_fu_596_p3 = ((icmp_ln1494_fu_591_p2[0:0] === 1'b1) ? pool_V_load_reg_747 : tmp_V_reg_255);

assign res_V_V_din = tmp_V_reg_255;

assign select_ln532_fu_523_p3 = ((icmp_ln498_1_reg_655[0:0] === 1'b1) ? 32'd0 : add_ln532_fu_518_p2);

assign select_ln537_fu_483_p3 = ((icmp_ln498_reg_645[0:0] === 1'b1) ? 32'd0 : add_ln537_fu_478_p2);

assign shl_ln_fu_552_p3 = {{trunc_ln508_fu_548_p1}, {5'd0}};

assign start_out = real_start;

assign trunc_ln508_fu_548_p1 = i2_0_reg_243[1:0];

assign zext_ln492_fu_383_p1 = i0_0_reg_220;

assign zext_ln500_fu_446_p1 = i1_0_reg_232;

assign zext_ln508_1_fu_565_p1 = add_ln508_reg_714;

assign zext_ln508_fu_569_p1 = i2_0_reg_243;

assign zext_ln513_fu_580_p1 = i_0_reg_266;

always @ (posedge ap_clk) begin
    zext_ln500_reg_676[6] <= 1'b0;
end

endmodule //pooling2d_large_cl_nopad_pad_me_ap_fixed_ap_fixed_config8_s
