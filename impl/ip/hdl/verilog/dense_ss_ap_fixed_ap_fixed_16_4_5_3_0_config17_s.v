// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_ss_ap_fixed_ap_fixed_16_4_5_3_0_config17_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_V_dout,
        data_V_V_empty_n,
        data_V_V_read,
        res_V_V_din,
        res_V_V_full_n,
        res_V_V_write
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_state8 = 7'd4;
parameter    ap_ST_fsm_state9 = 7'd8;
parameter    ap_ST_fsm_state10 = 7'd16;
parameter    ap_ST_fsm_state11 = 7'd32;
parameter    ap_ST_fsm_state12 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_V_dout;
input   data_V_V_empty_n;
output   data_V_V_read;
output  [15:0] res_V_V_din;
input   res_V_V_full_n;
output   res_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_V_read;
reg[15:0] res_V_V_din;
reg res_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [11:0] w17_V_address0;
reg    w17_V_ce0;
wire   [28:0] w17_V_q0;
reg    data_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln442_reg_366;
reg    res_V_V_blk_n;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg   [15:0] tmp_V_16_reg_106;
reg   [15:0] tmp_V_15_reg_119;
reg   [15:0] tmp_V_14_reg_132;
reg   [15:0] tmp_V_13_reg_145;
reg   [15:0] tmp_V_reg_158;
reg   [11:0] i_in_0_reg_171;
wire   [0:0] icmp_ln442_fu_182_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln442_reg_366_pp0_iter1_reg;
reg   [0:0] icmp_ln442_reg_366_pp0_iter2_reg;
reg   [0:0] icmp_ln442_reg_366_pp0_iter3_reg;
reg   [0:0] icmp_ln442_reg_366_pp0_iter4_reg;
wire   [11:0] i_in_fu_188_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [15:0] tmp_V_17_reg_380;
wire   [5:0] trunc_ln450_fu_199_p1;
reg  signed [5:0] trunc_ln450_reg_385;
reg  signed [5:0] tmp_5_reg_390;
reg  signed [5:0] tmp_6_reg_395;
reg  signed [5:0] tmp_7_reg_400;
reg  signed [4:0] tmp_1_reg_405;
wire  signed [20:0] sext_ln1116_cast_fu_243_p1;
reg   [15:0] trunc_ln708_4_reg_444;
wire  signed [20:0] grp_fu_342_p2;
reg  signed [20:0] mul_ln1118_reg_449;
wire  signed [20:0] grp_fu_348_p2;
reg  signed [20:0] mul_ln1118_1_reg_454;
wire  signed [20:0] grp_fu_354_p2;
reg  signed [20:0] mul_ln1118_2_reg_459;
wire  signed [20:0] grp_fu_360_p2;
reg  signed [20:0] mul_ln1118_3_reg_464;
wire   [15:0] add_ln703_4_fu_277_p2;
reg   [15:0] add_ln703_4_reg_469;
reg    ap_enable_reg_pp0_iter4;
wire   [15:0] add_ln703_fu_291_p2;
reg    ap_enable_reg_pp0_iter5;
wire   [15:0] add_ln703_1_fu_306_p2;
wire   [15:0] add_ln703_2_fu_321_p2;
wire   [15:0] add_ln703_3_fu_336_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [15:0] ap_phi_mux_tmp_V_16_phi_fu_111_p4;
wire   [63:0] zext_ln450_fu_194_p1;
wire  signed [15:0] grp_fu_261_p1;
wire   [20:0] grp_fu_261_p2;
wire   [15:0] trunc_ln_fu_282_p4;
wire   [15:0] trunc_ln708_1_fu_297_p4;
wire   [15:0] trunc_ln708_2_fu_312_p4;
wire   [15:0] trunc_ln708_3_fu_327_p4;
wire  signed [15:0] grp_fu_342_p1;
wire  signed [15:0] grp_fu_348_p1;
wire  signed [15:0] grp_fu_354_p1;
wire  signed [15:0] grp_fu_360_p1;
reg    grp_fu_261_ce;
reg    grp_fu_342_ce;
reg    grp_fu_348_ce;
reg    grp_fu_354_ce;
reg    grp_fu_360_ce;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

dense_ss_ap_fixed_ap_fixed_16_4_5_3_0_config17_s_w17_V #(
    .DataWidth( 29 ),
    .AddressRange( 2304 ),
    .AddressWidth( 12 ))
w17_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w17_V_address0),
    .ce0(w17_V_ce0),
    .q0(w17_V_q0)
);

myproject_axi_mul_5s_16s_21_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 21 ))
myproject_axi_mul_5s_16s_21_2_1_U258(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_reg_405),
    .din1(grp_fu_261_p1),
    .ce(grp_fu_261_ce),
    .dout(grp_fu_261_p2)
);

myproject_axi_mul_mul_6s_16s_21_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 21 ))
myproject_axi_mul_mul_6s_16s_21_3_1_U259(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln450_reg_385),
    .din1(grp_fu_342_p1),
    .ce(grp_fu_342_ce),
    .dout(grp_fu_342_p2)
);

myproject_axi_mul_mul_6s_16s_21_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 21 ))
myproject_axi_mul_mul_6s_16s_21_3_1_U260(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_reg_390),
    .din1(grp_fu_348_p1),
    .ce(grp_fu_348_ce),
    .dout(grp_fu_348_p2)
);

myproject_axi_mul_mul_6s_16s_21_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 21 ))
myproject_axi_mul_mul_6s_16s_21_3_1_U261(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_6_reg_395),
    .din1(grp_fu_354_p1),
    .ce(grp_fu_354_ce),
    .dout(grp_fu_354_p2)
);

myproject_axi_mul_mul_6s_16s_21_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 21 ))
myproject_axi_mul_mul_6s_16s_21_3_1_U262(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_7_reg_400),
    .din1(grp_fu_360_p1),
    .ce(grp_fu_360_ce),
    .dout(grp_fu_360_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln442_fu_182_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_in_0_reg_171 <= i_in_fu_188_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_in_0_reg_171 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln442_reg_366_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_13_reg_145 <= add_ln703_1_fu_306_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_13_reg_145 <= 16'd40;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln442_reg_366_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_14_reg_132 <= add_ln703_2_fu_321_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_14_reg_132 <= 16'd65430;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln442_reg_366_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_15_reg_119 <= add_ln703_3_fu_336_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_15_reg_119 <= 16'd64737;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln442_reg_366_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_16_reg_106 <= add_ln703_4_reg_469;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_16_reg_106 <= 16'd65213;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln442_reg_366_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_reg_158 <= add_ln703_fu_291_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_V_reg_158 <= 16'd64870;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln442_reg_366_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln703_4_reg_469 <= add_ln703_4_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln442_reg_366 <= icmp_ln442_fu_182_p2;
        icmp_ln442_reg_366_pp0_iter1_reg <= icmp_ln442_reg_366;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln442_reg_366_pp0_iter2_reg <= icmp_ln442_reg_366_pp0_iter1_reg;
        icmp_ln442_reg_366_pp0_iter3_reg <= icmp_ln442_reg_366_pp0_iter2_reg;
        icmp_ln442_reg_366_pp0_iter4_reg <= icmp_ln442_reg_366_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln442_reg_366_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln1118_1_reg_454 <= grp_fu_348_p2;
        mul_ln1118_2_reg_459 <= grp_fu_354_p2;
        mul_ln1118_3_reg_464 <= grp_fu_360_p2;
        mul_ln1118_reg_449 <= grp_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln442_reg_366 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_1_reg_405 <= {{w17_V_q0[28:24]}};
        tmp_5_reg_390 <= {{w17_V_q0[11:6]}};
        tmp_6_reg_395 <= {{w17_V_q0[17:12]}};
        tmp_7_reg_400 <= {{w17_V_q0[23:18]}};
        tmp_V_17_reg_380 <= data_V_V_dout;
        trunc_ln450_reg_385 <= trunc_ln450_fu_199_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln442_reg_366_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln708_4_reg_444 <= {{grp_fu_261_p2[20:5]}};
    end
end

always @ (*) begin
    if ((icmp_ln442_fu_182_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln442_reg_366_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        ap_phi_mux_tmp_V_16_phi_fu_111_p4 = add_ln703_4_reg_469;
    end else begin
        ap_phi_mux_tmp_V_16_phi_fu_111_p4 = tmp_V_16_reg_106;
    end
end

always @ (*) begin
    if (((icmp_ln442_reg_366 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_V_blk_n = data_V_V_empty_n;
    end else begin
        data_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln442_reg_366 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_V_read = 1'b1;
    end else begin
        data_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_261_ce = 1'b1;
    end else begin
        grp_fu_261_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_342_ce = 1'b1;
    end else begin
        grp_fu_342_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_348_ce = 1'b1;
    end else begin
        grp_fu_348_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_354_ce = 1'b1;
    end else begin
        grp_fu_354_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_360_ce = 1'b1;
    end else begin
        grp_fu_360_ce = 1'b0;
    end
end

always @ (*) begin
    if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12))) begin
        res_V_V_blk_n = res_V_V_full_n;
    end else begin
        res_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((res_V_V_full_n == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            res_V_V_din = tmp_V_16_reg_106;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            res_V_V_din = tmp_V_15_reg_119;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            res_V_V_din = tmp_V_14_reg_132;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            res_V_V_din = tmp_V_13_reg_145;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            res_V_V_din = tmp_V_reg_158;
        end else begin
            res_V_V_din = 'bx;
        end
    end else begin
        res_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12)))) begin
        res_V_V_write = 1'b1;
    end else begin
        res_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w17_V_ce0 = 1'b1;
    end else begin
        w17_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln442_fu_182_p2 == 1'd1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln442_fu_182_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln703_1_fu_306_p2 = (tmp_V_13_reg_145 + trunc_ln708_1_fu_297_p4);

assign add_ln703_2_fu_321_p2 = (tmp_V_14_reg_132 + trunc_ln708_2_fu_312_p4);

assign add_ln703_3_fu_336_p2 = (tmp_V_15_reg_119 + trunc_ln708_3_fu_327_p4);

assign add_ln703_4_fu_277_p2 = (ap_phi_mux_tmp_V_16_phi_fu_111_p4 + trunc_ln708_4_reg_444);

assign add_ln703_fu_291_p2 = (tmp_V_reg_158 + trunc_ln_fu_282_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln442_reg_366 == 1'd0) & (data_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln442_reg_366 == 1'd0) & (data_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln442_reg_366 == 1'd0) & (data_V_V_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign grp_fu_261_p1 = sext_ln1116_cast_fu_243_p1;

assign grp_fu_342_p1 = sext_ln1116_cast_fu_243_p1;

assign grp_fu_348_p1 = sext_ln1116_cast_fu_243_p1;

assign grp_fu_354_p1 = sext_ln1116_cast_fu_243_p1;

assign grp_fu_360_p1 = sext_ln1116_cast_fu_243_p1;

assign i_in_fu_188_p2 = (i_in_0_reg_171 + 12'd1);

assign icmp_ln442_fu_182_p2 = ((i_in_0_reg_171 == 12'd2304) ? 1'b1 : 1'b0);

assign sext_ln1116_cast_fu_243_p1 = $signed(tmp_V_17_reg_380);

assign start_out = real_start;

assign trunc_ln450_fu_199_p1 = w17_V_q0[5:0];

assign trunc_ln708_1_fu_297_p4 = {{mul_ln1118_1_reg_454[20:5]}};

assign trunc_ln708_2_fu_312_p4 = {{mul_ln1118_2_reg_459[20:5]}};

assign trunc_ln708_3_fu_327_p4 = {{mul_ln1118_3_reg_464[20:5]}};

assign trunc_ln_fu_282_p4 = {{mul_ln1118_reg_449[20:5]}};

assign w17_V_address0 = zext_ln450_fu_194_p1;

assign zext_ln450_fu_194_p1 = i_in_0_reg_171;

endmodule //dense_ss_ap_fixed_ap_fixed_16_4_5_3_0_config17_s
