-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pooling2d_large_cl_nopad_pad_me_ap_fixed_ap_fixed_config8_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_V_empty_n : IN STD_LOGIC;
    data_V_V_read : OUT STD_LOGIC;
    res_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_V_full_n : IN STD_LOGIC;
    res_V_V_write : OUT STD_LOGIC );
end;


architecture behav of pooling2d_large_cl_nopad_pad_me_ap_fixed_ap_fixed_config8_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv10_384 : STD_LOGIC_VECTOR (9 downto 0) := "1110000100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer_in_V_5_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer_in_V_5_ce0 : STD_LOGIC;
    signal layer_in_V_5_we0 : STD_LOGIC;
    signal layer_in_V_5_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal data_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln489_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln512_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_ih_fu_365_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_ih_reg_622 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i0_fu_377_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i0_reg_630 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal tmp_V_11_reg_635 : STD_LOGIC_VECTOR (15 downto 0);
    signal sX_load_reg_640 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_ready : STD_LOGIC;
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_done : STD_LOGIC;
    signal icmp_ln498_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln498_reg_645 : STD_LOGIC_VECTOR (0 downto 0);
    signal sY_load_reg_650 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln498_1_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln498_1_reg_655 : STD_LOGIC_VECTOR (0 downto 0);
    signal pY_load_reg_660 : STD_LOGIC_VECTOR (31 downto 0);
    signal pX_load_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln498_2_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln498_2_reg_672 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln500_fu_446_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln500_reg_676 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i1_fu_456_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i1_reg_684 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln522_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln522_reg_689 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln500_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln537_fu_483_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln537_reg_693 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln532_fu_523_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln532_reg_701 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln526_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i2_fu_542_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i2_reg_709 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln508_fu_560_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln508_reg_714 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln506_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal layer_in_V_5_load_reg_724 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal pool_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_state12 : BOOLEAN;
    signal i_fu_585_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_742 : STD_LOGIC_VECTOR (2 downto 0);
    signal pool_V_load_reg_747 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal pool_res_V_1_fu_596_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmpdata_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmpdata_V_ce0 : STD_LOGIC;
    signal tmpdata_V_we0 : STD_LOGIC;
    signal tmpdata_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal pool_V_ce0 : STD_LOGIC;
    signal pool_V_we0 : STD_LOGIC;
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_start : STD_LOGIC;
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_idle : STD_LOGIC;
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_data_V_ce0 : STD_LOGIC;
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_ce0 : STD_LOGIC;
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_we0 : STD_LOGIC;
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_ih_0_reg_209 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i0_0_reg_220 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln484_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_0_reg_232 : STD_LOGIC_VECTOR (5 downto 0);
    signal i2_0_reg_243 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_V_reg_255 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_0_reg_266 : STD_LOGIC_VECTOR (2 downto 0);
    signal storemerge_reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state3_ignore_call0 : BOOLEAN;
    signal zext_ln492_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln508_1_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln508_fu_569_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln513_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln530_fu_507_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln535_fu_467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln498_2_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln498_3_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln498_1_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln498_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln537_fu_478_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln532_fu_518_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln508_fu_548_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_552_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln1494_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_condition_166 : BOOLEAN;
    signal ap_condition_715 : BOOLEAN;
    signal ap_condition_177 : BOOLEAN;
    signal ap_condition_316 : BOOLEAN;

    component cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_V_ce0 : OUT STD_LOGIC;
        data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pooling2d_large_cl_nopad_pad_me_ap_fixed_ap_fixed_config8QgW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config5_s_tmpdhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pooling2d_large_cl_nopad_pad_me_ap_fixed_ap_fixed_config8Shg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    layer_in_V_5_U : component pooling2d_large_cl_nopad_pad_me_ap_fixed_ap_fixed_config8QgW
    generic map (
        DataWidth => 16,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_in_V_5_address0,
        ce0 => layer_in_V_5_ce0,
        we0 => layer_in_V_5_we0,
        d0 => grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_d0,
        q0 => layer_in_V_5_q0);

    tmpdata_V_U : component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config5_s_tmpdhbi
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmpdata_V_address0,
        ce0 => tmpdata_V_ce0,
        we0 => tmpdata_V_we0,
        d0 => tmp_V_11_reg_635,
        q0 => tmpdata_V_q0);

    pool_V_U : component pooling2d_large_cl_nopad_pad_me_ap_fixed_ap_fixed_config8Shg
    generic map (
        DataWidth => 16,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pool_V_address0,
        ce0 => pool_V_ce0,
        we0 => pool_V_we0,
        d0 => layer_in_V_5_load_reg_724,
        q0 => pool_V_q0);

    grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288 : component cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_start,
        ap_done => grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_done,
        ap_idle => grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_idle,
        ap_ready => grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_ready,
        data_V_address0 => grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_data_V_address0,
        data_V_ce0 => grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_data_V_ce0,
        data_V_q0 => tmpdata_V_q0,
        output_V_address0 => grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_address0,
        output_V_ce0 => grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_ce0,
        output_V_we0 => grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_we0,
        output_V_d0 => grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_d0,
        output_V_q0 => layer_in_V_5_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln484_fu_359_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((icmp_ln489_fu_371_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (icmp_ln489_fu_371_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_ready = ap_const_logic_1)) then 
                    grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i0_0_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln484_fu_359_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i0_0_reg_220 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i0_0_reg_220 <= i0_reg_630;
            end if; 
        end if;
    end process;

    i1_0_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln498_2_fu_440_p2) and (ap_const_logic_1 = ap_CS_fsm_state5) and (grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_done = ap_const_logic_1))) then 
                i1_0_reg_232 <= ap_const_lv6_0;
            elsif ((not(((icmp_ln512_fu_574_p2 = ap_const_lv1_1) and (res_V_V_full_n = ap_const_logic_0))) and (icmp_ln512_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i1_0_reg_232 <= i1_reg_684;
            end if; 
        end if;
    end process;

    i2_0_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln498_2_reg_672) and (icmp_ln500_fu_450_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i2_0_reg_243 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i2_0_reg_243 <= i2_reg_709;
            end if; 
        end if;
    end process;

    i_0_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_0_reg_266 <= i_reg_742;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_0_reg_266 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;

    i_ih_0_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_ih_0_reg_209 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_ih_0_reg_209 <= i_ih_reg_622;
            end if; 
        end if;
    end process;

    pX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                if ((ap_const_boolean_1 = ap_condition_715)) then 
                    pX <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_166)) then 
                    pX <= add_ln535_fu_467_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                if ((ap_const_boolean_1 = ap_condition_316)) then 
                    pY <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_177)) then 
                    pY <= add_ln530_fu_507_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                sX <= select_ln537_reg_693;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (((icmp_ln522_fu_462_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln498_2_reg_672)) or ((icmp_ln500_fu_450_p2 = ap_const_lv1_1) and (icmp_ln522_fu_462_p2 = ap_const_lv1_1))))) then 
                sX <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    storemerge_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (((icmp_ln526_fu_502_p2 = ap_const_lv1_1) and (icmp_ln522_fu_462_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln498_2_reg_672)) or ((icmp_ln526_fu_502_p2 = ap_const_lv1_1) and (icmp_ln500_fu_450_p2 = ap_const_lv1_1) and (icmp_ln522_fu_462_p2 = ap_const_lv1_1))))) then 
                storemerge_reg_277 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                storemerge_reg_277 <= select_ln532_reg_701;
            end if; 
        end if;
    end process;

    tmp_V_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                tmp_V_reg_255 <= pool_res_V_1_fu_596_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                tmp_V_reg_255 <= pool_V_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln506_fu_536_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                add_ln508_reg_714 <= add_ln508_fu_560_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_done = ap_const_logic_1))) then
                and_ln498_2_reg_672 <= and_ln498_2_fu_440_p2;
                icmp_ln498_1_reg_655 <= icmp_ln498_1_fu_402_p2;
                icmp_ln498_reg_645 <= icmp_ln498_fu_392_p2;
                pX_load_reg_666 <= pX;
                pY_load_reg_660 <= pY;
                sX_load_reg_640 <= sX;
                sY_load_reg_650 <= sY;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln489_fu_371_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                i0_reg_630 <= i0_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln498_2_reg_672) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                i1_reg_684 <= i1_fu_456_p2;
                    zext_ln500_reg_676(5 downto 0) <= zext_ln500_fu_446_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i2_reg_709 <= i2_fu_542_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_ih_reg_622 <= i_ih_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln512_fu_574_p2 = ap_const_lv1_1) and (res_V_V_full_n = ap_const_logic_0))) and (icmp_ln512_fu_574_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                i_reg_742 <= i_fu_585_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((icmp_ln500_fu_450_p2 = ap_const_lv1_1) or (ap_const_lv1_0 = and_ln498_2_reg_672)))) then
                icmp_ln522_reg_689 <= icmp_ln522_fu_462_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                layer_in_V_5_load_reg_724 <= layer_in_V_5_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                pool_V_load_reg_747 <= pool_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln522_reg_689 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                sY <= storemerge_reg_277;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (((icmp_ln522_fu_462_p2 = ap_const_lv1_1) and (icmp_ln526_fu_502_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln498_2_reg_672)) or ((icmp_ln500_fu_450_p2 = ap_const_lv1_1) and (icmp_ln522_fu_462_p2 = ap_const_lv1_1) and (icmp_ln526_fu_502_p2 = ap_const_lv1_0))))) then
                select_ln532_reg_701 <= select_ln532_fu_523_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (((icmp_ln522_fu_462_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln498_2_reg_672)) or ((icmp_ln500_fu_450_p2 = ap_const_lv1_1) and (icmp_ln522_fu_462_p2 = ap_const_lv1_0))))) then
                select_ln537_reg_693 <= select_ln537_fu_483_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln489_fu_371_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (icmp_ln489_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_V_11_reg_635 <= data_V_V_dout;
            end if;
        end if;
    end process;
    zext_ln500_reg_676(6) <= '0';

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, data_V_V_empty_n, res_V_V_full_n, ap_CS_fsm_state3, icmp_ln489_fu_371_p2, ap_CS_fsm_state12, icmp_ln512_fu_574_p2, ap_CS_fsm_state2, ap_CS_fsm_state5, grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_done, and_ln498_2_reg_672, ap_CS_fsm_state6, icmp_ln522_fu_462_p2, icmp_ln500_fu_450_p2, icmp_ln526_fu_502_p2, ap_CS_fsm_state7, icmp_ln506_fu_536_p2, icmp_ln484_fu_359_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln484_fu_359_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((icmp_ln489_fu_371_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (icmp_ln489_fu_371_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif ((not(((icmp_ln489_fu_371_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (icmp_ln489_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (((icmp_ln526_fu_502_p2 = ap_const_lv1_1) and (icmp_ln522_fu_462_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln498_2_reg_672)) or ((icmp_ln526_fu_502_p2 = ap_const_lv1_1) and (icmp_ln500_fu_450_p2 = ap_const_lv1_1) and (icmp_ln522_fu_462_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (((icmp_ln522_fu_462_p2 = ap_const_lv1_1) and (icmp_ln526_fu_502_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln498_2_reg_672)) or ((icmp_ln500_fu_450_p2 = ap_const_lv1_1) and (icmp_ln522_fu_462_p2 = ap_const_lv1_1) and (icmp_ln526_fu_502_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (((icmp_ln522_fu_462_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln498_2_reg_672)) or ((icmp_ln500_fu_450_p2 = ap_const_lv1_1) and (icmp_ln522_fu_462_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln506_fu_536_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if ((not(((icmp_ln512_fu_574_p2 = ap_const_lv1_1) and (res_V_V_full_n = ap_const_logic_0))) and (icmp_ln512_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif ((not(((icmp_ln512_fu_574_p2 = ap_const_lv1_1) and (res_V_V_full_n = ap_const_logic_0))) and (icmp_ln512_fu_574_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln508_fu_560_p2 <= std_logic_vector(unsigned(zext_ln500_reg_676) + unsigned(shl_ln_fu_552_p3));
    add_ln530_fu_507_p2 <= std_logic_vector(unsigned(pY_load_reg_660) + unsigned(ap_const_lv32_1));
    add_ln532_fu_518_p2 <= std_logic_vector(unsigned(sY_load_reg_650) + unsigned(ap_const_lv32_1));
    add_ln535_fu_467_p2 <= std_logic_vector(unsigned(pX_load_reg_666) + unsigned(ap_const_lv32_1));
    add_ln537_fu_478_p2 <= std_logic_vector(unsigned(sX_load_reg_640) + unsigned(ap_const_lv32_1));
    and_ln498_1_fu_434_p2 <= (icmp_ln498_3_fu_422_p2 and icmp_ln498_2_fu_412_p2);
    and_ln498_2_fu_440_p2 <= (and_ln498_fu_428_p2 and and_ln498_1_fu_434_p2);
    and_ln498_fu_428_p2 <= (icmp_ln498_fu_392_p2 and icmp_ln498_1_fu_402_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state12_assign_proc : process(res_V_V_full_n, icmp_ln512_fu_574_p2)
    begin
                ap_block_state12 <= ((icmp_ln512_fu_574_p2 = ap_const_lv1_1) and (res_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(data_V_V_empty_n, icmp_ln489_fu_371_p2)
    begin
                ap_block_state3 <= ((icmp_ln489_fu_371_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_ignore_call0_assign_proc : process(data_V_V_empty_n, icmp_ln489_fu_371_p2)
    begin
                ap_block_state3_ignore_call0 <= ((icmp_ln489_fu_371_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_condition_166_assign_proc : process(and_ln498_2_reg_672, icmp_ln522_fu_462_p2, icmp_ln500_fu_450_p2)
    begin
                ap_condition_166 <= (((icmp_ln522_fu_462_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln498_2_reg_672)) or ((icmp_ln500_fu_450_p2 = ap_const_lv1_1) and (icmp_ln522_fu_462_p2 = ap_const_lv1_0)));
    end process;


    ap_condition_177_assign_proc : process(and_ln498_2_reg_672, icmp_ln522_fu_462_p2, icmp_ln500_fu_450_p2, icmp_ln526_fu_502_p2)
    begin
                ap_condition_177 <= (((icmp_ln522_fu_462_p2 = ap_const_lv1_1) and (icmp_ln526_fu_502_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln498_2_reg_672)) or ((icmp_ln500_fu_450_p2 = ap_const_lv1_1) and (icmp_ln522_fu_462_p2 = ap_const_lv1_1) and (icmp_ln526_fu_502_p2 = ap_const_lv1_0)));
    end process;


    ap_condition_316_assign_proc : process(and_ln498_2_reg_672, icmp_ln522_fu_462_p2, icmp_ln500_fu_450_p2, icmp_ln526_fu_502_p2)
    begin
                ap_condition_316 <= (((icmp_ln526_fu_502_p2 = ap_const_lv1_1) and (icmp_ln522_fu_462_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln498_2_reg_672)) or ((icmp_ln526_fu_502_p2 = ap_const_lv1_1) and (icmp_ln500_fu_450_p2 = ap_const_lv1_1) and (icmp_ln522_fu_462_p2 = ap_const_lv1_1)));
    end process;


    ap_condition_715_assign_proc : process(and_ln498_2_reg_672, icmp_ln522_fu_462_p2, icmp_ln500_fu_450_p2)
    begin
                ap_condition_715 <= (((icmp_ln522_fu_462_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln498_2_reg_672)) or ((icmp_ln500_fu_450_p2 = ap_const_lv1_1) and (icmp_ln522_fu_462_p2 = ap_const_lv1_1)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln484_fu_359_p2)
    begin
        if (((icmp_ln484_fu_359_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data_V_V_blk_n_assign_proc : process(data_V_V_empty_n, ap_CS_fsm_state3, icmp_ln489_fu_371_p2)
    begin
        if (((icmp_ln489_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data_V_V_blk_n <= data_V_V_empty_n;
        else 
            data_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_V_read_assign_proc : process(data_V_V_empty_n, ap_CS_fsm_state3, icmp_ln489_fu_371_p2)
    begin
        if ((not(((icmp_ln489_fu_371_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (icmp_ln489_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data_V_V_read <= ap_const_logic_1;
        else 
            data_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_start <= grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_ap_start_reg;
    i0_fu_377_p2 <= std_logic_vector(unsigned(i0_0_reg_220) + unsigned(ap_const_lv6_1));
    i1_fu_456_p2 <= std_logic_vector(unsigned(i1_0_reg_232) + unsigned(ap_const_lv6_1));
    i2_fu_542_p2 <= std_logic_vector(unsigned(i2_0_reg_243) + unsigned(ap_const_lv3_1));
    i_fu_585_p2 <= std_logic_vector(unsigned(i_0_reg_266) + unsigned(ap_const_lv3_1));
    i_ih_fu_365_p2 <= std_logic_vector(unsigned(i_ih_0_reg_209) + unsigned(ap_const_lv10_1));
    icmp_ln1494_fu_591_p2 <= "1" when (signed(pool_V_load_reg_747) > signed(tmp_V_reg_255)) else "0";
    icmp_ln484_fu_359_p2 <= "1" when (i_ih_0_reg_209 = ap_const_lv10_384) else "0";
    icmp_ln489_fu_371_p2 <= "1" when (i0_0_reg_220 = ap_const_lv6_20) else "0";
    icmp_ln498_1_fu_402_p2 <= "1" when (sY = ap_const_lv32_1) else "0";
    icmp_ln498_2_fu_412_p2 <= "1" when (signed(pY) > signed(ap_const_lv32_0)) else "0";
    icmp_ln498_3_fu_422_p2 <= "1" when (signed(pX) > signed(ap_const_lv32_0)) else "0";
    icmp_ln498_fu_392_p2 <= "1" when (sX = ap_const_lv32_1) else "0";
    icmp_ln500_fu_450_p2 <= "1" when (i1_0_reg_232 = ap_const_lv6_20) else "0";
    icmp_ln506_fu_536_p2 <= "1" when (i2_0_reg_243 = ap_const_lv3_4) else "0";
    icmp_ln512_fu_574_p2 <= "1" when (i_0_reg_266 = ap_const_lv3_4) else "0";
    icmp_ln522_fu_462_p2 <= "1" when (pX_load_reg_666 = ap_const_lv32_1D) else "0";
    icmp_ln526_fu_502_p2 <= "1" when (pY_load_reg_660 = ap_const_lv32_1D) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln484_fu_359_p2)
    begin
        if (((icmp_ln484_fu_359_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_V_5_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_address0, zext_ln508_1_fu_565_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            layer_in_V_5_address0 <= zext_ln508_1_fu_565_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_in_V_5_address0 <= grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_address0;
        else 
            layer_in_V_5_address0 <= "XXXXXXX";
        end if; 
    end process;


    layer_in_V_5_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            layer_in_V_5_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_in_V_5_ce0 <= grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_ce0;
        else 
            layer_in_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_V_5_we0_assign_proc : process(ap_CS_fsm_state5, grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_in_V_5_we0 <= grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_output_V_we0;
        else 
            layer_in_V_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pool_V_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state7, ap_CS_fsm_state10, zext_ln508_fu_569_p1, zext_ln513_fu_580_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            pool_V_address0 <= zext_ln513_fu_580_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pool_V_address0 <= zext_ln508_fu_569_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            pool_V_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            pool_V_address0 <= "XX";
        end if; 
    end process;


    pool_V_ce0_assign_proc : process(res_V_V_full_n, ap_CS_fsm_state12, icmp_ln512_fu_574_p2, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (not(((icmp_ln512_fu_574_p2 = ap_const_lv1_1) and (res_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            pool_V_ce0 <= ap_const_logic_1;
        else 
            pool_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool_V_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pool_V_we0 <= ap_const_logic_1;
        else 
            pool_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pool_res_V_1_fu_596_p3 <= 
        pool_V_load_reg_747 when (icmp_ln1494_fu_591_p2(0) = '1') else 
        tmp_V_reg_255;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_V_blk_n_assign_proc : process(res_V_V_full_n, ap_CS_fsm_state12, icmp_ln512_fu_574_p2)
    begin
        if (((icmp_ln512_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            res_V_V_blk_n <= res_V_V_full_n;
        else 
            res_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_V_din <= tmp_V_reg_255;

    res_V_V_write_assign_proc : process(res_V_V_full_n, ap_CS_fsm_state12, icmp_ln512_fu_574_p2)
    begin
        if ((not(((icmp_ln512_fu_574_p2 = ap_const_lv1_1) and (res_V_V_full_n = ap_const_logic_0))) and (icmp_ln512_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            res_V_V_write <= ap_const_logic_1;
        else 
            res_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln532_fu_523_p3 <= 
        ap_const_lv32_0 when (icmp_ln498_1_reg_655(0) = '1') else 
        add_ln532_fu_518_p2;
    select_ln537_fu_483_p3 <= 
        ap_const_lv32_0 when (icmp_ln498_reg_645(0) = '1') else 
        add_ln537_fu_478_p2;
    shl_ln_fu_552_p3 <= (trunc_ln508_fu_548_p1 & ap_const_lv5_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;


    tmpdata_V_address0_assign_proc : process(ap_CS_fsm_state5, grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_data_V_address0, ap_CS_fsm_state4, zext_ln492_fu_383_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmpdata_V_address0 <= zext_ln492_fu_383_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmpdata_V_address0 <= grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_data_V_address0;
        else 
            tmpdata_V_address0 <= "XXXXX";
        end if; 
    end process;


    tmpdata_V_ce0_assign_proc : process(ap_CS_fsm_state5, grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_data_V_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmpdata_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmpdata_V_ce0 <= grp_cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_fu_288_data_V_ce0;
        else 
            tmpdata_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmpdata_V_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmpdata_V_we0 <= ap_const_logic_1;
        else 
            tmpdata_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln508_fu_548_p1 <= i2_0_reg_243(2 - 1 downto 0);
    zext_ln492_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i0_0_reg_220),64));
    zext_ln500_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_232),7));
    zext_ln508_1_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln508_reg_714),64));
    zext_ln508_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_243),64));
    zext_ln513_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_266),64));
end behav;
