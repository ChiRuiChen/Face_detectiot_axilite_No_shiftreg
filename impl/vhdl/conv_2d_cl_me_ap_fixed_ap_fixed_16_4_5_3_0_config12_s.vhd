-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config12_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_V_empty_n : IN STD_LOGIC;
    data_V_V_read : OUT STD_LOGIC;
    res_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_V_full_n : IN STD_LOGIC;
    res_V_V_write : OUT STD_LOGIC );
end;


architecture behav of conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config12_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (43 downto 0) := "00000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (43 downto 0) := "00000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (43 downto 0) := "00000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (43 downto 0) := "00000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (43 downto 0) := "00000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (43 downto 0) := "00000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (43 downto 0) := "00001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (43 downto 0) := "00010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (43 downto 0) := "00100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (43 downto 0) := "01000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (43 downto 0) := "10000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv16_100 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_const_lv16_80 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_const_lv16_180 : STD_LOGIC_VECTOR (15 downto 0) := "0000000110000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_200 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_const_lv16_FF80 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv64_21 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100001";
    constant ap_const_lv64_22 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100010";
    constant ap_const_lv64_23 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100011";
    constant ap_const_lv64_24 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100100";
    constant ap_const_lv64_25 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100101";
    constant ap_const_lv64_26 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100110";
    constant ap_const_lv64_27 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100111";
    constant ap_const_lv64_28 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101000";
    constant ap_const_lv64_29 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101001";
    constant ap_const_lv64_2A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101010";
    constant ap_const_lv64_2B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101011";
    constant ap_const_lv64_2C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101100";
    constant ap_const_lv64_2D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101101";
    constant ap_const_lv64_2E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101110";
    constant ap_const_lv64_2F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101111";
    constant ap_const_lv64_30 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110000";
    constant ap_const_lv64_31 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110001";
    constant ap_const_lv64_32 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110010";
    constant ap_const_lv64_33 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110011";
    constant ap_const_lv64_34 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110100";
    constant ap_const_lv64_35 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110101";
    constant ap_const_lv64_36 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110110";
    constant ap_const_lv64_37 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110111";
    constant ap_const_lv64_38 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111000";
    constant ap_const_lv64_39 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111001";
    constant ap_const_lv64_3A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111010";
    constant ap_const_lv64_3B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111011";
    constant ap_const_lv64_3C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111100";
    constant ap_const_lv64_3D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111101";
    constant ap_const_lv64_3E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111110";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv8_E1 : STD_LOGIC_VECTOR (7 downto 0) := "11100001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv10_240 : STD_LOGIC_VECTOR (9 downto 0) := "1001000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_95 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010101";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_9B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011011";
    constant ap_const_lv32_9C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011100";
    constant ap_const_lv32_A1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100001";
    constant ap_const_lv32_A2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100010";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_AD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101101";
    constant ap_const_lv32_AE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101110";
    constant ap_const_lv32_B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110011";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv32_B9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111001";
    constant ap_const_lv32_BA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111010";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_C5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000101";
    constant ap_const_lv32_C6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000110";
    constant ap_const_lv32_CB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001011";
    constant ap_const_lv32_CC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001100";
    constant ap_const_lv32_D1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010001";
    constant ap_const_lv32_D2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010010";
    constant ap_const_lv32_D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010111";
    constant ap_const_lv32_D8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011000";
    constant ap_const_lv32_DD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011101";
    constant ap_const_lv32_DE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011110";
    constant ap_const_lv32_E3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100011";
    constant ap_const_lv32_E4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100100";
    constant ap_const_lv32_E9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101001";
    constant ap_const_lv32_EA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101010";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_F5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110101";
    constant ap_const_lv32_F6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110110";
    constant ap_const_lv32_FB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111011";
    constant ap_const_lv32_FC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111100";
    constant ap_const_lv32_101 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000001";
    constant ap_const_lv32_102 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000010";
    constant ap_const_lv32_107 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000111";
    constant ap_const_lv32_108 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001000";
    constant ap_const_lv32_10D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001101";
    constant ap_const_lv32_10E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001110";
    constant ap_const_lv32_113 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010011";
    constant ap_const_lv32_114 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010100";
    constant ap_const_lv32_119 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011001";
    constant ap_const_lv32_11A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011010";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_125 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100101";
    constant ap_const_lv32_126 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100110";
    constant ap_const_lv32_12B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101011";
    constant ap_const_lv32_12C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101100";
    constant ap_const_lv32_131 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110001";
    constant ap_const_lv32_132 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110010";
    constant ap_const_lv32_137 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110111";
    constant ap_const_lv32_138 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111000";
    constant ap_const_lv32_13D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111101";
    constant ap_const_lv32_13E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111110";
    constant ap_const_lv32_143 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000011";
    constant ap_const_lv32_144 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000100";
    constant ap_const_lv32_149 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001001";
    constant ap_const_lv32_14A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001010";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_155 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010101";
    constant ap_const_lv32_156 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010110";
    constant ap_const_lv32_15B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011011";
    constant ap_const_lv32_15C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011100";
    constant ap_const_lv32_161 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100001";
    constant ap_const_lv32_162 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100010";
    constant ap_const_lv32_167 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100111";
    constant ap_const_lv32_168 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101000";
    constant ap_const_lv32_16D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101101";
    constant ap_const_lv32_16E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101110";
    constant ap_const_lv32_173 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110011";
    constant ap_const_lv32_174 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110100";
    constant ap_const_lv32_179 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111001";
    constant ap_const_lv32_17A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111010";
    constant ap_const_lv32_17E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111110";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer_in_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer_in_V_ce0 : STD_LOGIC;
    signal layer_in_V_we0 : STD_LOGIC;
    signal layer_in_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sX_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pX_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal w12_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal w12_V_ce0 : STD_LOGIC;
    signal w12_V_q0 : STD_LOGIC_VECTOR (382 downto 0);
    signal data_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln247_fu_1986_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal acc_V_63_0_reg_1100 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_62_0_reg_1113 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_61_0_reg_1126 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_60_0_reg_1139 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_59_0_reg_1152 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_58_0_reg_1165 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_57_0_reg_1178 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_56_0_reg_1191 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_55_0_reg_1204 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_54_0_reg_1217 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_53_0_reg_1230 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_52_0_reg_1243 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_51_0_reg_1256 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_50_0_reg_1269 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_49_0_reg_1282 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_48_0_reg_1295 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_47_0_reg_1308 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_46_0_reg_1321 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_45_0_reg_1334 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_44_0_reg_1347 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_43_0_reg_1360 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_42_0_reg_1373 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_41_0_reg_1386 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_40_0_reg_1399 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_39_0_reg_1412 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_38_0_reg_1425 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_37_0_reg_1438 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_36_0_reg_1451 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_35_0_reg_1464 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_34_0_reg_1477 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_33_0_reg_1490 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_32_0_reg_1503 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_31_0_reg_1516 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_30_0_reg_1529 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_29_0_reg_1542 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_28_0_reg_1555 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_27_0_reg_1568 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_26_0_reg_1581 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_25_0_reg_1594 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_24_0_reg_1607 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_23_0_reg_1620 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_22_0_reg_1633 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_21_0_reg_1646 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_20_0_reg_1659 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_19_0_reg_1672 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_18_0_reg_1685 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_17_0_reg_1698 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_16_0_reg_1711 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_15_0_reg_1724 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_14_0_reg_1737 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_13_0_reg_1750 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_12_0_reg_1763 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_11_0_reg_1776 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_10_0_reg_1789 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_9_0_reg_1802 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_8_0_reg_1815 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_7_0_reg_1828 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_6_0_reg_1841 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_5_0_reg_1854 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_4_0_reg_1867 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_3_0_reg_1880 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_2_0_reg_1893 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_1_0_reg_1906 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_0_0_reg_1919 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_index_reg_1932 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_fu_1980_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_4697 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i1_fu_1992_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i1_reg_4705 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal tmp_V_reg_4710 : STD_LOGIC_VECTOR (15 downto 0);
    signal sX_5_load_reg_4715 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_ready : STD_LOGIC;
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done : STD_LOGIC;
    signal icmp_ln255_fu_2007_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln255_reg_4720 : STD_LOGIC_VECTOR (0 downto 0);
    signal sY_5_load_reg_4725 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln255_10_fu_2017_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln255_10_reg_4730 : STD_LOGIC_VECTOR (0 downto 0);
    signal pY_5_load_reg_4735 : STD_LOGIC_VECTOR (31 downto 0);
    signal pX_5_load_reg_4741 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln255_8_fu_2075_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln255_8_reg_4747 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln336_fu_2081_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln336_reg_4751 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln336_reg_4751_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln336_reg_4751_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln336_reg_4751_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln336_reg_4751_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ir_fu_2087_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal layer_in_V_load_reg_4770 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln344_fu_2099_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln344_reg_4775 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_127_reg_4780 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_128_reg_4785 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_129_reg_4790 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_130_reg_4795 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_131_reg_4800 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_132_reg_4805 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_133_reg_4810 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_134_reg_4815 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_135_reg_4820 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_136_reg_4825 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_137_reg_4830 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_138_reg_4835 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_139_reg_4840 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_140_reg_4845 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_141_reg_4850 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_142_reg_4855 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_143_reg_4860 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_144_reg_4865 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_145_reg_4870 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_146_reg_4875 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_147_reg_4880 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_148_reg_4885 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_149_reg_4890 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_150_reg_4895 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_151_reg_4900 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_152_reg_4905 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_153_reg_4910 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_154_reg_4915 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_155_reg_4920 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_156_reg_4925 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_157_reg_4930 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_158_reg_4935 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_159_reg_4940 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_160_reg_4945 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_161_reg_4950 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_162_reg_4955 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_163_reg_4960 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_164_reg_4965 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_165_reg_4970 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_166_reg_4975 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_167_reg_4980 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_168_reg_4985 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_169_reg_4990 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_170_reg_4995 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_171_reg_5000 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_172_reg_5005 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_173_reg_5010 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_174_reg_5015 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_175_reg_5020 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_176_reg_5025 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_177_reg_5030 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_178_reg_5035 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_179_reg_5040 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_180_reg_5045 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_181_reg_5050 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_182_reg_5055 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_183_reg_5060 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_184_reg_5065 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_185_reg_5070 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_186_reg_5075 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_187_reg_5080 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_188_reg_5085 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_189_reg_5090 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln1116_cast_fu_2733_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln708_s_reg_5483 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_3996_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_reg_5488 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4002_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_130_reg_5493 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4008_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_131_reg_5498 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4014_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_132_reg_5503 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4020_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_133_reg_5508 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4026_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_134_reg_5513 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4032_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_135_reg_5518 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4038_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_136_reg_5523 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4044_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_137_reg_5528 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4050_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_138_reg_5533 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4056_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_139_reg_5538 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4062_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_140_reg_5543 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4068_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_141_reg_5548 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4074_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_142_reg_5553 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4080_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_143_reg_5558 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4086_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_144_reg_5563 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4092_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_145_reg_5568 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4098_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_146_reg_5573 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4104_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_147_reg_5578 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4110_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_148_reg_5583 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4116_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_149_reg_5588 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4122_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_150_reg_5593 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4128_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_151_reg_5598 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4134_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_152_reg_5603 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4140_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_153_reg_5608 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4146_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_154_reg_5613 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4152_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_155_reg_5618 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4158_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_156_reg_5623 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4164_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_157_reg_5628 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4170_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_158_reg_5633 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4176_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_159_reg_5638 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4182_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_160_reg_5643 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4188_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_161_reg_5648 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4194_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_162_reg_5653 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4200_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_163_reg_5658 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4206_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_164_reg_5663 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4212_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_165_reg_5668 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4218_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_166_reg_5673 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4224_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_167_reg_5678 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4230_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_168_reg_5683 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4236_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_169_reg_5688 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4242_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_170_reg_5693 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4248_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_171_reg_5698 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4254_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_172_reg_5703 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4260_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_173_reg_5708 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4266_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_174_reg_5713 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4272_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_175_reg_5718 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4278_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_176_reg_5723 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4284_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_177_reg_5728 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4290_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_178_reg_5733 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4296_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_179_reg_5738 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4302_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_180_reg_5743 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4308_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_181_reg_5748 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4314_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_182_reg_5753 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4320_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_183_reg_5758 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4326_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_184_reg_5763 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4332_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_185_reg_5768 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4338_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_186_reg_5773 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4344_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_187_reg_5778 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4350_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_188_reg_5783 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4356_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_189_reg_5788 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4362_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_190_reg_5793 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4368_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_191_reg_5798 : STD_LOGIC_VECTOR (20 downto 0);
    signal acc_63_V_fu_2944_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_63_V_reg_5803 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal acc_0_V_fu_3516_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal acc_1_V_fu_3522_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_2_V_fu_3528_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_3_V_fu_3534_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_4_V_fu_3540_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_5_V_fu_3546_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_6_V_fu_3552_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_7_V_fu_3558_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_8_V_fu_3564_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_9_V_fu_3570_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_10_V_fu_3576_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_11_V_fu_3582_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_12_V_fu_3588_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_13_V_fu_3594_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_14_V_fu_3600_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_15_V_fu_3606_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_16_V_fu_3612_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_17_V_fu_3618_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_18_V_fu_3624_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_19_V_fu_3630_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_20_V_fu_3636_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_21_V_fu_3642_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_22_V_fu_3648_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_23_V_fu_3654_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_24_V_fu_3660_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_25_V_fu_3666_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_26_V_fu_3672_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_27_V_fu_3678_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_28_V_fu_3684_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_29_V_fu_3690_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_30_V_fu_3696_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_31_V_fu_3702_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_32_V_fu_3708_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_33_V_fu_3714_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_34_V_fu_3720_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_35_V_fu_3726_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_36_V_fu_3732_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_37_V_fu_3738_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_38_V_fu_3744_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_39_V_fu_3750_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_40_V_fu_3756_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_41_V_fu_3762_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_42_V_fu_3768_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_43_V_fu_3774_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_44_V_fu_3780_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_45_V_fu_3786_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_46_V_fu_3792_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_47_V_fu_3798_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_48_V_fu_3804_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_49_V_fu_3810_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_50_V_fu_3816_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_51_V_fu_3822_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_52_V_fu_3828_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_53_V_fu_3834_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_54_V_fu_3840_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_55_V_fu_3846_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_56_V_fu_3852_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_57_V_fu_3858_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_58_V_fu_3864_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_59_V_fu_3870_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_60_V_fu_3876_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_61_V_fu_3882_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_62_V_fu_3888_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_ic_fu_3900_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_ic_reg_6126 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal icmp_ln266_fu_3894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln277_fu_3911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln277_reg_6136 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln292_fu_3932_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln292_reg_6140 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln287_fu_3972_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln287_reg_6148 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln281_fu_3951_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal layer_out_i_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_pack_V_reg_6153 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal tmpdata_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmpdata_V_ce0 : STD_LOGIC;
    signal tmpdata_V_we0 : STD_LOGIC;
    signal tmpdata_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_out_i_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal layer_out_i_ce0 : STD_LOGIC;
    signal layer_out_i_we0 : STD_LOGIC;
    signal layer_out_i_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_out_i_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal layer_out_i_ce1 : STD_LOGIC;
    signal layer_out_i_we1 : STD_LOGIC;
    signal layer_out_i_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_start : STD_LOGIC;
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_idle : STD_LOGIC;
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_data_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_data_V_ce0 : STD_LOGIC;
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_output_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_output_V_ce0 : STD_LOGIC;
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_output_V_we0 : STD_LOGIC;
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_output_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_0_i_reg_1077 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal i1_0_i_reg_1088 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln245_fu_1974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_acc_V_63_0_phi_fu_1105_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_ic_0_i_reg_1943 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal storemerge_i_reg_1954 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state3_ignore_call0 : BOOLEAN;
    signal zext_ln249_fu_1998_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln344_fu_2093_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln268_fu_3906_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal add_ln285_fu_3956_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln290_fu_3916_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal tmp_190_fu_2027_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_191_fu_2047_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln255_11_fu_2037_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln255_12_fu_2057_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln255_7_fu_2069_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln255_fu_2063_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_2928_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2928_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln_fu_2949_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_1_fu_2958_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_2_fu_2967_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_3_fu_2976_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_4_fu_2985_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_5_fu_2994_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_6_fu_3003_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_7_fu_3012_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_8_fu_3021_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_9_fu_3030_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_10_fu_3039_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_11_fu_3048_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_12_fu_3057_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_13_fu_3066_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_14_fu_3075_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_15_fu_3084_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_16_fu_3093_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_17_fu_3102_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_18_fu_3111_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_19_fu_3120_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_20_fu_3129_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_21_fu_3138_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_22_fu_3147_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_23_fu_3156_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_24_fu_3165_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_25_fu_3174_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_26_fu_3183_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_27_fu_3192_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_28_fu_3201_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_29_fu_3210_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_30_fu_3219_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_31_fu_3228_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_32_fu_3237_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_33_fu_3246_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_34_fu_3255_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_35_fu_3264_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_36_fu_3273_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_37_fu_3282_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_38_fu_3291_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_39_fu_3300_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_40_fu_3309_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_41_fu_3318_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_42_fu_3327_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_43_fu_3336_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_44_fu_3345_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_45_fu_3354_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_46_fu_3363_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_47_fu_3372_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_48_fu_3381_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_49_fu_3390_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_50_fu_3399_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_51_fu_3408_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_52_fu_3417_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_53_fu_3426_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_54_fu_3435_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_55_fu_3444_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_56_fu_3453_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_57_fu_3462_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_58_fu_3471_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_59_fu_3480_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_60_fu_3489_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_61_fu_3498_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_62_fu_3507_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln292_fu_3927_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln287_fu_3967_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_3996_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4002_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4008_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4014_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4020_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4026_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4032_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4038_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4044_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4050_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4056_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4062_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4068_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4074_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4080_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4086_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4092_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4098_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4104_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4110_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4116_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4122_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4128_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4134_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4140_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4146_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4152_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4158_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4164_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4170_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4176_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4182_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4188_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4194_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4200_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4206_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4212_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4218_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4224_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4230_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4236_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4242_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4248_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4254_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4260_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4266_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4272_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4278_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4284_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4290_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4296_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4302_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4308_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4314_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4320_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4326_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4332_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4338_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4344_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4350_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4356_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4362_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4368_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_1023 : BOOLEAN;
    signal ap_condition_1300 : BOOLEAN;
    signal ap_condition_1034 : BOOLEAN;
    signal ap_condition_1210 : BOOLEAN;

    component cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_V_ce0 : OUT STD_LOGIC;
        data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_axi_mul_5s_16s_21_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component myproject_axi_mul_mul_6s_16s_21_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config12_s_layYie IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config12_s_w12_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (382 downto 0) );
    end component;


    component cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_tmpinPgM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config9_s_layeWhU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    layer_in_V_U : component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config12_s_layYie
    generic map (
        DataWidth => 16,
        AddressRange => 576,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_in_V_address0,
        ce0 => layer_in_V_ce0,
        we0 => layer_in_V_we0,
        d0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_output_V_d0,
        q0 => layer_in_V_q0);

    w12_V_U : component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config12_s_w12_V
    generic map (
        DataWidth => 383,
        AddressRange => 576,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w12_V_address0,
        ce0 => w12_V_ce0,
        q0 => w12_V_q0);

    tmpdata_V_U : component cnnshift_arr_ap_fixed_ap_fixed_16_4_5_3_0_config8_s_tmpinPgM
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmpdata_V_address0,
        ce0 => tmpdata_V_ce0,
        we0 => tmpdata_V_we0,
        d0 => tmp_V_reg_4710,
        q0 => tmpdata_V_q0);

    layer_out_i_U : component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config9_s_layeWhU
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_out_i_address0,
        ce0 => layer_out_i_ce0,
        we0 => layer_out_i_we0,
        d0 => layer_out_i_d0,
        q0 => layer_out_i_q0,
        address1 => layer_out_i_address1,
        ce1 => layer_out_i_ce1,
        we1 => layer_out_i_we1,
        d1 => layer_out_i_d1);

    grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965 : component cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_start,
        ap_done => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done,
        ap_idle => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_idle,
        ap_ready => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_ready,
        data_V_address0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_data_V_address0,
        data_V_ce0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_data_V_ce0,
        data_V_q0 => tmpdata_V_q0,
        output_V_address0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_output_V_address0,
        output_V_ce0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_output_V_ce0,
        output_V_we0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_output_V_we0,
        output_V_d0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_output_V_d0,
        output_V_q0 => layer_in_V_q0);

    myproject_axi_mul_5s_16s_21_2_1_U181 : component myproject_axi_mul_5s_16s_21_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 5,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_189_reg_5090,
        din1 => grp_fu_2928_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2928_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U182 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln344_reg_4775,
        din1 => grp_fu_3996_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_3996_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U183 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_127_reg_4780,
        din1 => grp_fu_4002_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4002_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U184 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_128_reg_4785,
        din1 => grp_fu_4008_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4008_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U185 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_129_reg_4790,
        din1 => grp_fu_4014_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4014_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U186 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_130_reg_4795,
        din1 => grp_fu_4020_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4020_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U187 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_131_reg_4800,
        din1 => grp_fu_4026_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4026_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U188 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_132_reg_4805,
        din1 => grp_fu_4032_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4032_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U189 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_133_reg_4810,
        din1 => grp_fu_4038_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4038_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U190 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_134_reg_4815,
        din1 => grp_fu_4044_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4044_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U191 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_135_reg_4820,
        din1 => grp_fu_4050_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4050_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U192 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_136_reg_4825,
        din1 => grp_fu_4056_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4056_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U193 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_137_reg_4830,
        din1 => grp_fu_4062_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4062_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U194 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_138_reg_4835,
        din1 => grp_fu_4068_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4068_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U195 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_139_reg_4840,
        din1 => grp_fu_4074_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4074_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U196 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_140_reg_4845,
        din1 => grp_fu_4080_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4080_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U197 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_141_reg_4850,
        din1 => grp_fu_4086_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4086_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U198 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_142_reg_4855,
        din1 => grp_fu_4092_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4092_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U199 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_143_reg_4860,
        din1 => grp_fu_4098_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4098_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U200 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_144_reg_4865,
        din1 => grp_fu_4104_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4104_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U201 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_145_reg_4870,
        din1 => grp_fu_4110_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4110_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U202 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_146_reg_4875,
        din1 => grp_fu_4116_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4116_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U203 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_147_reg_4880,
        din1 => grp_fu_4122_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4122_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U204 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_148_reg_4885,
        din1 => grp_fu_4128_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4128_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U205 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_149_reg_4890,
        din1 => grp_fu_4134_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4134_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U206 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_150_reg_4895,
        din1 => grp_fu_4140_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4140_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U207 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_151_reg_4900,
        din1 => grp_fu_4146_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4146_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U208 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_152_reg_4905,
        din1 => grp_fu_4152_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4152_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U209 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_153_reg_4910,
        din1 => grp_fu_4158_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4158_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U210 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_154_reg_4915,
        din1 => grp_fu_4164_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4164_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U211 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_155_reg_4920,
        din1 => grp_fu_4170_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4170_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U212 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_156_reg_4925,
        din1 => grp_fu_4176_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4176_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U213 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_157_reg_4930,
        din1 => grp_fu_4182_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4182_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U214 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_158_reg_4935,
        din1 => grp_fu_4188_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4188_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U215 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_159_reg_4940,
        din1 => grp_fu_4194_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4194_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U216 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_160_reg_4945,
        din1 => grp_fu_4200_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4200_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U217 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_161_reg_4950,
        din1 => grp_fu_4206_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4206_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U218 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_162_reg_4955,
        din1 => grp_fu_4212_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4212_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U219 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_163_reg_4960,
        din1 => grp_fu_4218_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4218_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U220 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_164_reg_4965,
        din1 => grp_fu_4224_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4224_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U221 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_165_reg_4970,
        din1 => grp_fu_4230_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4230_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U222 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_166_reg_4975,
        din1 => grp_fu_4236_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4236_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U223 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_167_reg_4980,
        din1 => grp_fu_4242_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4242_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U224 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_168_reg_4985,
        din1 => grp_fu_4248_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4248_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U225 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_169_reg_4990,
        din1 => grp_fu_4254_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4254_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U226 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_170_reg_4995,
        din1 => grp_fu_4260_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4260_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U227 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_171_reg_5000,
        din1 => grp_fu_4266_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4266_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U228 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_172_reg_5005,
        din1 => grp_fu_4272_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4272_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U229 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_173_reg_5010,
        din1 => grp_fu_4278_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4278_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U230 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_174_reg_5015,
        din1 => grp_fu_4284_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4284_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U231 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_175_reg_5020,
        din1 => grp_fu_4290_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4290_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U232 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_176_reg_5025,
        din1 => grp_fu_4296_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4296_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U233 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_177_reg_5030,
        din1 => grp_fu_4302_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4302_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U234 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_178_reg_5035,
        din1 => grp_fu_4308_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4308_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U235 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_179_reg_5040,
        din1 => grp_fu_4314_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4314_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U236 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_180_reg_5045,
        din1 => grp_fu_4320_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4320_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U237 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_181_reg_5050,
        din1 => grp_fu_4326_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4326_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U238 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_182_reg_5055,
        din1 => grp_fu_4332_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4332_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U239 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_183_reg_5060,
        din1 => grp_fu_4338_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4338_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U240 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_184_reg_5065,
        din1 => grp_fu_4344_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4344_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U241 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_185_reg_5070,
        din1 => grp_fu_4350_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4350_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U242 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_186_reg_5075,
        din1 => grp_fu_4356_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4356_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U243 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_187_reg_5080,
        din1 => grp_fu_4362_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4362_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U244 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_188_reg_5085,
        din1 => grp_fu_4368_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4368_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln245_fu_1974_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state6);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((data_V_V_empty_n = ap_const_logic_0) and (icmp_ln247_fu_1986_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln247_fu_1986_p2 = ap_const_lv1_1))) then 
                    grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_ready = ap_const_logic_1)) then 
                    grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    acc_V_0_0_reg_1919_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_0_0_reg_1919 <= acc_0_V_fu_3516_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_0_0_reg_1919 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_10_0_reg_1789_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_10_0_reg_1789 <= acc_10_V_fu_3576_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_10_0_reg_1789 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_11_0_reg_1776_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_11_0_reg_1776 <= acc_11_V_fu_3582_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_11_0_reg_1776 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_12_0_reg_1763_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_12_0_reg_1763 <= acc_12_V_fu_3588_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_12_0_reg_1763 <= ap_const_lv16_FF80;
            end if; 
        end if;
    end process;

    acc_V_13_0_reg_1750_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_13_0_reg_1750 <= acc_13_V_fu_3594_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_13_0_reg_1750 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_14_0_reg_1737_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_14_0_reg_1737 <= acc_14_V_fu_3600_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_14_0_reg_1737 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_15_0_reg_1724_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_15_0_reg_1724 <= acc_15_V_fu_3606_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_15_0_reg_1724 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_16_0_reg_1711_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_16_0_reg_1711 <= acc_16_V_fu_3612_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_16_0_reg_1711 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_17_0_reg_1698_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_17_0_reg_1698 <= acc_17_V_fu_3618_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_17_0_reg_1698 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_18_0_reg_1685_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_18_0_reg_1685 <= acc_18_V_fu_3624_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_18_0_reg_1685 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_19_0_reg_1672_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_19_0_reg_1672 <= acc_19_V_fu_3630_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_19_0_reg_1672 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_1_0_reg_1906_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_1_0_reg_1906 <= acc_1_V_fu_3522_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_1_0_reg_1906 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_20_0_reg_1659_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_20_0_reg_1659 <= acc_20_V_fu_3636_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_20_0_reg_1659 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_21_0_reg_1646_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_21_0_reg_1646 <= acc_21_V_fu_3642_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_21_0_reg_1646 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_22_0_reg_1633_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_22_0_reg_1633 <= acc_22_V_fu_3648_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_22_0_reg_1633 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_23_0_reg_1620_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_23_0_reg_1620 <= acc_23_V_fu_3654_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_23_0_reg_1620 <= ap_const_lv16_200;
            end if; 
        end if;
    end process;

    acc_V_24_0_reg_1607_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_24_0_reg_1607 <= acc_24_V_fu_3660_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_24_0_reg_1607 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_25_0_reg_1594_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_25_0_reg_1594 <= acc_25_V_fu_3666_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_25_0_reg_1594 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_26_0_reg_1581_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_26_0_reg_1581 <= acc_26_V_fu_3672_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_26_0_reg_1581 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_27_0_reg_1568_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_27_0_reg_1568 <= acc_27_V_fu_3678_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_27_0_reg_1568 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_28_0_reg_1555_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_28_0_reg_1555 <= acc_28_V_fu_3684_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_28_0_reg_1555 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_29_0_reg_1542_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_29_0_reg_1542 <= acc_29_V_fu_3690_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_29_0_reg_1542 <= ap_const_lv16_200;
            end if; 
        end if;
    end process;

    acc_V_2_0_reg_1893_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_2_0_reg_1893 <= acc_2_V_fu_3528_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_2_0_reg_1893 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_30_0_reg_1529_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_30_0_reg_1529 <= acc_30_V_fu_3696_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_30_0_reg_1529 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_31_0_reg_1516_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_31_0_reg_1516 <= acc_31_V_fu_3702_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_31_0_reg_1516 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_32_0_reg_1503_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_32_0_reg_1503 <= acc_32_V_fu_3708_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_32_0_reg_1503 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_33_0_reg_1490_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_33_0_reg_1490 <= acc_33_V_fu_3714_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_33_0_reg_1490 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_34_0_reg_1477_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_34_0_reg_1477 <= acc_34_V_fu_3720_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_34_0_reg_1477 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_35_0_reg_1464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_35_0_reg_1464 <= acc_35_V_fu_3726_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_35_0_reg_1464 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_36_0_reg_1451_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_36_0_reg_1451 <= acc_36_V_fu_3732_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_36_0_reg_1451 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_37_0_reg_1438_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_37_0_reg_1438 <= acc_37_V_fu_3738_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_37_0_reg_1438 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_38_0_reg_1425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_38_0_reg_1425 <= acc_38_V_fu_3744_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_38_0_reg_1425 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_39_0_reg_1412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_39_0_reg_1412 <= acc_39_V_fu_3750_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_39_0_reg_1412 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_3_0_reg_1880_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_3_0_reg_1880 <= acc_3_V_fu_3534_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_3_0_reg_1880 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_40_0_reg_1399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_40_0_reg_1399 <= acc_40_V_fu_3756_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_40_0_reg_1399 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_41_0_reg_1386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_41_0_reg_1386 <= acc_41_V_fu_3762_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_41_0_reg_1386 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_42_0_reg_1373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_42_0_reg_1373 <= acc_42_V_fu_3768_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_42_0_reg_1373 <= ap_const_lv16_200;
            end if; 
        end if;
    end process;

    acc_V_43_0_reg_1360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_43_0_reg_1360 <= acc_43_V_fu_3774_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_43_0_reg_1360 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_44_0_reg_1347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_44_0_reg_1347 <= acc_44_V_fu_3780_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_44_0_reg_1347 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_45_0_reg_1334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_45_0_reg_1334 <= acc_45_V_fu_3786_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_45_0_reg_1334 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_46_0_reg_1321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_46_0_reg_1321 <= acc_46_V_fu_3792_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_46_0_reg_1321 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_47_0_reg_1308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_47_0_reg_1308 <= acc_47_V_fu_3798_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_47_0_reg_1308 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_V_48_0_reg_1295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_48_0_reg_1295 <= acc_48_V_fu_3804_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_48_0_reg_1295 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_49_0_reg_1282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_49_0_reg_1282 <= acc_49_V_fu_3810_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_49_0_reg_1282 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_4_0_reg_1867_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_4_0_reg_1867 <= acc_4_V_fu_3540_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_4_0_reg_1867 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_50_0_reg_1269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_50_0_reg_1269 <= acc_50_V_fu_3816_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_50_0_reg_1269 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_51_0_reg_1256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_51_0_reg_1256 <= acc_51_V_fu_3822_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_51_0_reg_1256 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_52_0_reg_1243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_52_0_reg_1243 <= acc_52_V_fu_3828_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_52_0_reg_1243 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_53_0_reg_1230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_53_0_reg_1230 <= acc_53_V_fu_3834_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_53_0_reg_1230 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_54_0_reg_1217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_54_0_reg_1217 <= acc_54_V_fu_3840_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_54_0_reg_1217 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_55_0_reg_1204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_55_0_reg_1204 <= acc_55_V_fu_3846_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_55_0_reg_1204 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_56_0_reg_1191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_56_0_reg_1191 <= acc_56_V_fu_3852_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_56_0_reg_1191 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_57_0_reg_1178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_57_0_reg_1178 <= acc_57_V_fu_3858_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_57_0_reg_1178 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_58_0_reg_1165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_58_0_reg_1165 <= acc_58_V_fu_3864_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_58_0_reg_1165 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_59_0_reg_1152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_59_0_reg_1152 <= acc_59_V_fu_3870_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_59_0_reg_1152 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_5_0_reg_1854_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_5_0_reg_1854 <= acc_5_V_fu_3546_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_5_0_reg_1854 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_60_0_reg_1139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_60_0_reg_1139 <= acc_60_V_fu_3876_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_60_0_reg_1139 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_61_0_reg_1126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_61_0_reg_1126 <= acc_61_V_fu_3882_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_61_0_reg_1126 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_62_0_reg_1113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_62_0_reg_1113 <= acc_62_V_fu_3888_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_62_0_reg_1113 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_63_0_reg_1100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_63_0_reg_1100 <= acc_63_V_reg_5803;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_63_0_reg_1100 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_6_0_reg_1841_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_6_0_reg_1841 <= acc_6_V_fu_3552_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_6_0_reg_1841 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_7_0_reg_1828_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_7_0_reg_1828 <= acc_7_V_fu_3558_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_7_0_reg_1828 <= ap_const_lv16_200;
            end if; 
        end if;
    end process;

    acc_V_8_0_reg_1815_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_8_0_reg_1815 <= acc_8_V_fu_3564_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_8_0_reg_1815 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_9_0_reg_1802_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_9_0_reg_1802 <= acc_9_V_fu_3570_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_9_0_reg_1802 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    i1_0_i_reg_1088_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln245_fu_1974_p2 = ap_const_lv1_0))) then 
                i1_0_i_reg_1088 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i1_0_i_reg_1088 <= i1_reg_4705;
            end if; 
        end if;
    end process;

    i_0_i_reg_1077_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                i_0_i_reg_1077 <= i_reg_4697;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_1077 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_ic_0_i_reg_1943_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                i_ic_0_i_reg_1943 <= i_ic_reg_6126;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                i_ic_0_i_reg_1943 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    in_index_reg_1932_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln336_fu_2081_p2 = ap_const_lv1_0))) then 
                in_index_reg_1932 <= ir_fu_2087_p2;
            elsif (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                in_index_reg_1932 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    pX_5_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                if ((ap_const_boolean_1 = ap_condition_1300)) then 
                    pX_5 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_1023)) then 
                    pX_5 <= add_ln290_fu_3916_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_5_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                if ((ap_const_boolean_1 = ap_condition_1210)) then 
                    pY_5 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_1034)) then 
                    pY_5 <= add_ln285_fu_3956_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_5_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                sX_5 <= select_ln292_reg_6140;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (((ap_const_lv1_0 = and_ln255_8_reg_4747) and (icmp_ln277_fu_3911_p2 = ap_const_lv1_1)) or ((icmp_ln277_fu_3911_p2 = ap_const_lv1_1) and (icmp_ln266_fu_3894_p2 = ap_const_lv1_1))))) then 
                sX_5 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    storemerge_i_reg_1954_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (((ap_const_lv1_0 = and_ln255_8_reg_4747) and (icmp_ln281_fu_3951_p2 = ap_const_lv1_1) and (icmp_ln277_fu_3911_p2 = ap_const_lv1_1)) or ((icmp_ln281_fu_3951_p2 = ap_const_lv1_1) and (icmp_ln277_fu_3911_p2 = ap_const_lv1_1) and (icmp_ln266_fu_3894_p2 = ap_const_lv1_1))))) then 
                storemerge_i_reg_1954 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                storemerge_i_reg_1954 <= select_ln287_reg_6148;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter3_reg = ap_const_lv1_0))) then
                acc_63_V_reg_5803 <= acc_63_V_fu_2944_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                and_ln255_8_reg_4747 <= and_ln255_8_fu_2075_p2;
                icmp_ln255_10_reg_4730 <= icmp_ln255_10_fu_2017_p2;
                icmp_ln255_reg_4720 <= icmp_ln255_fu_2007_p2;
                pX_5_load_reg_4741 <= pX_5;
                pY_5_load_reg_4735 <= pY_5;
                sX_5_load_reg_4715 <= sX_5;
                sY_5_load_reg_4725 <= sY_5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((data_V_V_empty_n = ap_const_logic_0) and (icmp_ln247_fu_1986_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                i1_reg_4705 <= i1_fu_1992_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln255_8_reg_4747) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                i_ic_reg_6126 <= i_ic_fu_3900_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_4697 <= i_fu_1980_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and ((ap_const_lv1_0 = and_ln255_8_reg_4747) or (icmp_ln266_fu_3894_p2 = ap_const_lv1_1)))) then
                icmp_ln277_reg_6136 <= icmp_ln277_fu_3911_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln336_reg_4751 <= icmp_ln336_fu_2081_p2;
                icmp_ln336_reg_4751_pp0_iter1_reg <= icmp_ln336_reg_4751;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln336_reg_4751_pp0_iter2_reg <= icmp_ln336_reg_4751_pp0_iter1_reg;
                icmp_ln336_reg_4751_pp0_iter3_reg <= icmp_ln336_reg_4751_pp0_iter2_reg;
                icmp_ln336_reg_4751_pp0_iter4_reg <= icmp_ln336_reg_4751_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln336_reg_4751 = ap_const_lv1_0))) then
                layer_in_V_load_reg_4770 <= layer_in_V_q0;
                tmp_127_reg_4780 <= w12_V_q0(11 downto 6);
                tmp_128_reg_4785 <= w12_V_q0(17 downto 12);
                tmp_129_reg_4790 <= w12_V_q0(23 downto 18);
                tmp_130_reg_4795 <= w12_V_q0(29 downto 24);
                tmp_131_reg_4800 <= w12_V_q0(35 downto 30);
                tmp_132_reg_4805 <= w12_V_q0(41 downto 36);
                tmp_133_reg_4810 <= w12_V_q0(47 downto 42);
                tmp_134_reg_4815 <= w12_V_q0(53 downto 48);
                tmp_135_reg_4820 <= w12_V_q0(59 downto 54);
                tmp_136_reg_4825 <= w12_V_q0(65 downto 60);
                tmp_137_reg_4830 <= w12_V_q0(71 downto 66);
                tmp_138_reg_4835 <= w12_V_q0(77 downto 72);
                tmp_139_reg_4840 <= w12_V_q0(83 downto 78);
                tmp_140_reg_4845 <= w12_V_q0(89 downto 84);
                tmp_141_reg_4850 <= w12_V_q0(95 downto 90);
                tmp_142_reg_4855 <= w12_V_q0(101 downto 96);
                tmp_143_reg_4860 <= w12_V_q0(107 downto 102);
                tmp_144_reg_4865 <= w12_V_q0(113 downto 108);
                tmp_145_reg_4870 <= w12_V_q0(119 downto 114);
                tmp_146_reg_4875 <= w12_V_q0(125 downto 120);
                tmp_147_reg_4880 <= w12_V_q0(131 downto 126);
                tmp_148_reg_4885 <= w12_V_q0(137 downto 132);
                tmp_149_reg_4890 <= w12_V_q0(143 downto 138);
                tmp_150_reg_4895 <= w12_V_q0(149 downto 144);
                tmp_151_reg_4900 <= w12_V_q0(155 downto 150);
                tmp_152_reg_4905 <= w12_V_q0(161 downto 156);
                tmp_153_reg_4910 <= w12_V_q0(167 downto 162);
                tmp_154_reg_4915 <= w12_V_q0(173 downto 168);
                tmp_155_reg_4920 <= w12_V_q0(179 downto 174);
                tmp_156_reg_4925 <= w12_V_q0(185 downto 180);
                tmp_157_reg_4930 <= w12_V_q0(191 downto 186);
                tmp_158_reg_4935 <= w12_V_q0(197 downto 192);
                tmp_159_reg_4940 <= w12_V_q0(203 downto 198);
                tmp_160_reg_4945 <= w12_V_q0(209 downto 204);
                tmp_161_reg_4950 <= w12_V_q0(215 downto 210);
                tmp_162_reg_4955 <= w12_V_q0(221 downto 216);
                tmp_163_reg_4960 <= w12_V_q0(227 downto 222);
                tmp_164_reg_4965 <= w12_V_q0(233 downto 228);
                tmp_165_reg_4970 <= w12_V_q0(239 downto 234);
                tmp_166_reg_4975 <= w12_V_q0(245 downto 240);
                tmp_167_reg_4980 <= w12_V_q0(251 downto 246);
                tmp_168_reg_4985 <= w12_V_q0(257 downto 252);
                tmp_169_reg_4990 <= w12_V_q0(263 downto 258);
                tmp_170_reg_4995 <= w12_V_q0(269 downto 264);
                tmp_171_reg_5000 <= w12_V_q0(275 downto 270);
                tmp_172_reg_5005 <= w12_V_q0(281 downto 276);
                tmp_173_reg_5010 <= w12_V_q0(287 downto 282);
                tmp_174_reg_5015 <= w12_V_q0(293 downto 288);
                tmp_175_reg_5020 <= w12_V_q0(299 downto 294);
                tmp_176_reg_5025 <= w12_V_q0(305 downto 300);
                tmp_177_reg_5030 <= w12_V_q0(311 downto 306);
                tmp_178_reg_5035 <= w12_V_q0(317 downto 312);
                tmp_179_reg_5040 <= w12_V_q0(323 downto 318);
                tmp_180_reg_5045 <= w12_V_q0(329 downto 324);
                tmp_181_reg_5050 <= w12_V_q0(335 downto 330);
                tmp_182_reg_5055 <= w12_V_q0(341 downto 336);
                tmp_183_reg_5060 <= w12_V_q0(347 downto 342);
                tmp_184_reg_5065 <= w12_V_q0(353 downto 348);
                tmp_185_reg_5070 <= w12_V_q0(359 downto 354);
                tmp_186_reg_5075 <= w12_V_q0(365 downto 360);
                tmp_187_reg_5080 <= w12_V_q0(371 downto 366);
                tmp_188_reg_5085 <= w12_V_q0(377 downto 372);
                tmp_189_reg_5090 <= w12_V_q0(382 downto 378);
                trunc_ln344_reg_4775 <= trunc_ln344_fu_2099_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln336_reg_4751_pp0_iter3_reg = ap_const_lv1_0))) then
                mul_ln1118_130_reg_5493 <= grp_fu_4002_p2;
                mul_ln1118_131_reg_5498 <= grp_fu_4008_p2;
                mul_ln1118_132_reg_5503 <= grp_fu_4014_p2;
                mul_ln1118_133_reg_5508 <= grp_fu_4020_p2;
                mul_ln1118_134_reg_5513 <= grp_fu_4026_p2;
                mul_ln1118_135_reg_5518 <= grp_fu_4032_p2;
                mul_ln1118_136_reg_5523 <= grp_fu_4038_p2;
                mul_ln1118_137_reg_5528 <= grp_fu_4044_p2;
                mul_ln1118_138_reg_5533 <= grp_fu_4050_p2;
                mul_ln1118_139_reg_5538 <= grp_fu_4056_p2;
                mul_ln1118_140_reg_5543 <= grp_fu_4062_p2;
                mul_ln1118_141_reg_5548 <= grp_fu_4068_p2;
                mul_ln1118_142_reg_5553 <= grp_fu_4074_p2;
                mul_ln1118_143_reg_5558 <= grp_fu_4080_p2;
                mul_ln1118_144_reg_5563 <= grp_fu_4086_p2;
                mul_ln1118_145_reg_5568 <= grp_fu_4092_p2;
                mul_ln1118_146_reg_5573 <= grp_fu_4098_p2;
                mul_ln1118_147_reg_5578 <= grp_fu_4104_p2;
                mul_ln1118_148_reg_5583 <= grp_fu_4110_p2;
                mul_ln1118_149_reg_5588 <= grp_fu_4116_p2;
                mul_ln1118_150_reg_5593 <= grp_fu_4122_p2;
                mul_ln1118_151_reg_5598 <= grp_fu_4128_p2;
                mul_ln1118_152_reg_5603 <= grp_fu_4134_p2;
                mul_ln1118_153_reg_5608 <= grp_fu_4140_p2;
                mul_ln1118_154_reg_5613 <= grp_fu_4146_p2;
                mul_ln1118_155_reg_5618 <= grp_fu_4152_p2;
                mul_ln1118_156_reg_5623 <= grp_fu_4158_p2;
                mul_ln1118_157_reg_5628 <= grp_fu_4164_p2;
                mul_ln1118_158_reg_5633 <= grp_fu_4170_p2;
                mul_ln1118_159_reg_5638 <= grp_fu_4176_p2;
                mul_ln1118_160_reg_5643 <= grp_fu_4182_p2;
                mul_ln1118_161_reg_5648 <= grp_fu_4188_p2;
                mul_ln1118_162_reg_5653 <= grp_fu_4194_p2;
                mul_ln1118_163_reg_5658 <= grp_fu_4200_p2;
                mul_ln1118_164_reg_5663 <= grp_fu_4206_p2;
                mul_ln1118_165_reg_5668 <= grp_fu_4212_p2;
                mul_ln1118_166_reg_5673 <= grp_fu_4218_p2;
                mul_ln1118_167_reg_5678 <= grp_fu_4224_p2;
                mul_ln1118_168_reg_5683 <= grp_fu_4230_p2;
                mul_ln1118_169_reg_5688 <= grp_fu_4236_p2;
                mul_ln1118_170_reg_5693 <= grp_fu_4242_p2;
                mul_ln1118_171_reg_5698 <= grp_fu_4248_p2;
                mul_ln1118_172_reg_5703 <= grp_fu_4254_p2;
                mul_ln1118_173_reg_5708 <= grp_fu_4260_p2;
                mul_ln1118_174_reg_5713 <= grp_fu_4266_p2;
                mul_ln1118_175_reg_5718 <= grp_fu_4272_p2;
                mul_ln1118_176_reg_5723 <= grp_fu_4278_p2;
                mul_ln1118_177_reg_5728 <= grp_fu_4284_p2;
                mul_ln1118_178_reg_5733 <= grp_fu_4290_p2;
                mul_ln1118_179_reg_5738 <= grp_fu_4296_p2;
                mul_ln1118_180_reg_5743 <= grp_fu_4302_p2;
                mul_ln1118_181_reg_5748 <= grp_fu_4308_p2;
                mul_ln1118_182_reg_5753 <= grp_fu_4314_p2;
                mul_ln1118_183_reg_5758 <= grp_fu_4320_p2;
                mul_ln1118_184_reg_5763 <= grp_fu_4326_p2;
                mul_ln1118_185_reg_5768 <= grp_fu_4332_p2;
                mul_ln1118_186_reg_5773 <= grp_fu_4338_p2;
                mul_ln1118_187_reg_5778 <= grp_fu_4344_p2;
                mul_ln1118_188_reg_5783 <= grp_fu_4350_p2;
                mul_ln1118_189_reg_5788 <= grp_fu_4356_p2;
                mul_ln1118_190_reg_5793 <= grp_fu_4362_p2;
                mul_ln1118_191_reg_5798 <= grp_fu_4368_p2;
                mul_ln1118_reg_5488 <= grp_fu_3996_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                res_pack_V_reg_6153 <= layer_out_i_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) and (icmp_ln277_reg_6136 = ap_const_lv1_1))) then
                sY_5 <= storemerge_i_reg_1954;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (((ap_const_lv1_0 = and_ln255_8_reg_4747) and (icmp_ln281_fu_3951_p2 = ap_const_lv1_0) and (icmp_ln277_fu_3911_p2 = ap_const_lv1_1)) or ((icmp_ln281_fu_3951_p2 = ap_const_lv1_0) and (icmp_ln277_fu_3911_p2 = ap_const_lv1_1) and (icmp_ln266_fu_3894_p2 = ap_const_lv1_1))))) then
                select_ln287_reg_6148 <= select_ln287_fu_3972_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (((ap_const_lv1_0 = and_ln255_8_reg_4747) and (icmp_ln277_fu_3911_p2 = ap_const_lv1_0)) or ((icmp_ln277_fu_3911_p2 = ap_const_lv1_0) and (icmp_ln266_fu_3894_p2 = ap_const_lv1_1))))) then
                select_ln292_reg_6140 <= select_ln292_fu_3932_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((data_V_V_empty_n = ap_const_logic_0) and (icmp_ln247_fu_1986_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln247_fu_1986_p2 = ap_const_lv1_0))) then
                tmp_V_reg_4710 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln336_reg_4751_pp0_iter2_reg = ap_const_lv1_0))) then
                trunc_ln708_s_reg_5483 <= grp_fu_2928_p2(20 downto 5);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, data_V_V_empty_n, res_V_V_full_n, ap_CS_fsm_state3, icmp_ln247_fu_1986_p2, ap_CS_fsm_state46, ap_CS_fsm_state2, ap_CS_fsm_state5, grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done, and_ln255_8_fu_2075_p2, and_ln255_8_reg_4747, icmp_ln336_fu_2081_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_CS_fsm_state44, icmp_ln266_fu_3894_p2, icmp_ln277_fu_3911_p2, icmp_ln281_fu_3951_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, icmp_ln245_fu_1974_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln245_fu_1974_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((data_V_V_empty_n = ap_const_logic_0) and (icmp_ln247_fu_1986_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln247_fu_1986_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif ((not(((data_V_V_empty_n = ap_const_logic_0) and (icmp_ln247_fu_1986_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln247_fu_1986_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_lv1_1 = and_ln255_8_fu_2075_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln255_8_fu_2075_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln336_fu_2081_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln336_fu_2081_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (((ap_const_lv1_0 = and_ln255_8_reg_4747) and (icmp_ln281_fu_3951_p2 = ap_const_lv1_1) and (icmp_ln277_fu_3911_p2 = ap_const_lv1_1)) or ((icmp_ln281_fu_3951_p2 = ap_const_lv1_1) and (icmp_ln277_fu_3911_p2 = ap_const_lv1_1) and (icmp_ln266_fu_3894_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (((ap_const_lv1_0 = and_ln255_8_reg_4747) and (icmp_ln281_fu_3951_p2 = ap_const_lv1_0) and (icmp_ln277_fu_3911_p2 = ap_const_lv1_1)) or ((icmp_ln281_fu_3951_p2 = ap_const_lv1_0) and (icmp_ln277_fu_3911_p2 = ap_const_lv1_1) and (icmp_ln266_fu_3894_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (((ap_const_lv1_0 = and_ln255_8_reg_4747) and (icmp_ln277_fu_3911_p2 = ap_const_lv1_0)) or ((icmp_ln277_fu_3911_p2 = ap_const_lv1_0) and (icmp_ln266_fu_3894_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    acc_0_V_fu_3516_p2 <= std_logic_vector(unsigned(acc_V_0_0_reg_1919) + unsigned(trunc_ln_fu_2949_p4));
    acc_10_V_fu_3576_p2 <= std_logic_vector(unsigned(acc_V_10_0_reg_1789) + unsigned(trunc_ln708_10_fu_3039_p4));
    acc_11_V_fu_3582_p2 <= std_logic_vector(unsigned(acc_V_11_0_reg_1776) + unsigned(trunc_ln708_11_fu_3048_p4));
    acc_12_V_fu_3588_p2 <= std_logic_vector(unsigned(acc_V_12_0_reg_1763) + unsigned(trunc_ln708_12_fu_3057_p4));
    acc_13_V_fu_3594_p2 <= std_logic_vector(unsigned(acc_V_13_0_reg_1750) + unsigned(trunc_ln708_13_fu_3066_p4));
    acc_14_V_fu_3600_p2 <= std_logic_vector(unsigned(acc_V_14_0_reg_1737) + unsigned(trunc_ln708_14_fu_3075_p4));
    acc_15_V_fu_3606_p2 <= std_logic_vector(unsigned(acc_V_15_0_reg_1724) + unsigned(trunc_ln708_15_fu_3084_p4));
    acc_16_V_fu_3612_p2 <= std_logic_vector(unsigned(acc_V_16_0_reg_1711) + unsigned(trunc_ln708_16_fu_3093_p4));
    acc_17_V_fu_3618_p2 <= std_logic_vector(unsigned(acc_V_17_0_reg_1698) + unsigned(trunc_ln708_17_fu_3102_p4));
    acc_18_V_fu_3624_p2 <= std_logic_vector(unsigned(acc_V_18_0_reg_1685) + unsigned(trunc_ln708_18_fu_3111_p4));
    acc_19_V_fu_3630_p2 <= std_logic_vector(unsigned(acc_V_19_0_reg_1672) + unsigned(trunc_ln708_19_fu_3120_p4));
    acc_1_V_fu_3522_p2 <= std_logic_vector(unsigned(acc_V_1_0_reg_1906) + unsigned(trunc_ln708_1_fu_2958_p4));
    acc_20_V_fu_3636_p2 <= std_logic_vector(unsigned(acc_V_20_0_reg_1659) + unsigned(trunc_ln708_20_fu_3129_p4));
    acc_21_V_fu_3642_p2 <= std_logic_vector(unsigned(acc_V_21_0_reg_1646) + unsigned(trunc_ln708_21_fu_3138_p4));
    acc_22_V_fu_3648_p2 <= std_logic_vector(unsigned(acc_V_22_0_reg_1633) + unsigned(trunc_ln708_22_fu_3147_p4));
    acc_23_V_fu_3654_p2 <= std_logic_vector(unsigned(acc_V_23_0_reg_1620) + unsigned(trunc_ln708_23_fu_3156_p4));
    acc_24_V_fu_3660_p2 <= std_logic_vector(unsigned(acc_V_24_0_reg_1607) + unsigned(trunc_ln708_24_fu_3165_p4));
    acc_25_V_fu_3666_p2 <= std_logic_vector(unsigned(acc_V_25_0_reg_1594) + unsigned(trunc_ln708_25_fu_3174_p4));
    acc_26_V_fu_3672_p2 <= std_logic_vector(unsigned(acc_V_26_0_reg_1581) + unsigned(trunc_ln708_26_fu_3183_p4));
    acc_27_V_fu_3678_p2 <= std_logic_vector(unsigned(acc_V_27_0_reg_1568) + unsigned(trunc_ln708_27_fu_3192_p4));
    acc_28_V_fu_3684_p2 <= std_logic_vector(unsigned(acc_V_28_0_reg_1555) + unsigned(trunc_ln708_28_fu_3201_p4));
    acc_29_V_fu_3690_p2 <= std_logic_vector(unsigned(acc_V_29_0_reg_1542) + unsigned(trunc_ln708_29_fu_3210_p4));
    acc_2_V_fu_3528_p2 <= std_logic_vector(unsigned(acc_V_2_0_reg_1893) + unsigned(trunc_ln708_2_fu_2967_p4));
    acc_30_V_fu_3696_p2 <= std_logic_vector(unsigned(acc_V_30_0_reg_1529) + unsigned(trunc_ln708_30_fu_3219_p4));
    acc_31_V_fu_3702_p2 <= std_logic_vector(unsigned(acc_V_31_0_reg_1516) + unsigned(trunc_ln708_31_fu_3228_p4));
    acc_32_V_fu_3708_p2 <= std_logic_vector(unsigned(acc_V_32_0_reg_1503) + unsigned(trunc_ln708_32_fu_3237_p4));
    acc_33_V_fu_3714_p2 <= std_logic_vector(unsigned(acc_V_33_0_reg_1490) + unsigned(trunc_ln708_33_fu_3246_p4));
    acc_34_V_fu_3720_p2 <= std_logic_vector(unsigned(acc_V_34_0_reg_1477) + unsigned(trunc_ln708_34_fu_3255_p4));
    acc_35_V_fu_3726_p2 <= std_logic_vector(unsigned(acc_V_35_0_reg_1464) + unsigned(trunc_ln708_35_fu_3264_p4));
    acc_36_V_fu_3732_p2 <= std_logic_vector(unsigned(acc_V_36_0_reg_1451) + unsigned(trunc_ln708_36_fu_3273_p4));
    acc_37_V_fu_3738_p2 <= std_logic_vector(unsigned(acc_V_37_0_reg_1438) + unsigned(trunc_ln708_37_fu_3282_p4));
    acc_38_V_fu_3744_p2 <= std_logic_vector(unsigned(acc_V_38_0_reg_1425) + unsigned(trunc_ln708_38_fu_3291_p4));
    acc_39_V_fu_3750_p2 <= std_logic_vector(unsigned(acc_V_39_0_reg_1412) + unsigned(trunc_ln708_39_fu_3300_p4));
    acc_3_V_fu_3534_p2 <= std_logic_vector(unsigned(acc_V_3_0_reg_1880) + unsigned(trunc_ln708_3_fu_2976_p4));
    acc_40_V_fu_3756_p2 <= std_logic_vector(unsigned(acc_V_40_0_reg_1399) + unsigned(trunc_ln708_40_fu_3309_p4));
    acc_41_V_fu_3762_p2 <= std_logic_vector(unsigned(acc_V_41_0_reg_1386) + unsigned(trunc_ln708_41_fu_3318_p4));
    acc_42_V_fu_3768_p2 <= std_logic_vector(unsigned(acc_V_42_0_reg_1373) + unsigned(trunc_ln708_42_fu_3327_p4));
    acc_43_V_fu_3774_p2 <= std_logic_vector(unsigned(acc_V_43_0_reg_1360) + unsigned(trunc_ln708_43_fu_3336_p4));
    acc_44_V_fu_3780_p2 <= std_logic_vector(unsigned(acc_V_44_0_reg_1347) + unsigned(trunc_ln708_44_fu_3345_p4));
    acc_45_V_fu_3786_p2 <= std_logic_vector(unsigned(acc_V_45_0_reg_1334) + unsigned(trunc_ln708_45_fu_3354_p4));
    acc_46_V_fu_3792_p2 <= std_logic_vector(unsigned(acc_V_46_0_reg_1321) + unsigned(trunc_ln708_46_fu_3363_p4));
    acc_47_V_fu_3798_p2 <= std_logic_vector(unsigned(acc_V_47_0_reg_1308) + unsigned(trunc_ln708_47_fu_3372_p4));
    acc_48_V_fu_3804_p2 <= std_logic_vector(unsigned(acc_V_48_0_reg_1295) + unsigned(trunc_ln708_48_fu_3381_p4));
    acc_49_V_fu_3810_p2 <= std_logic_vector(unsigned(acc_V_49_0_reg_1282) + unsigned(trunc_ln708_49_fu_3390_p4));
    acc_4_V_fu_3540_p2 <= std_logic_vector(unsigned(acc_V_4_0_reg_1867) + unsigned(trunc_ln708_4_fu_2985_p4));
    acc_50_V_fu_3816_p2 <= std_logic_vector(unsigned(acc_V_50_0_reg_1269) + unsigned(trunc_ln708_50_fu_3399_p4));
    acc_51_V_fu_3822_p2 <= std_logic_vector(unsigned(acc_V_51_0_reg_1256) + unsigned(trunc_ln708_51_fu_3408_p4));
    acc_52_V_fu_3828_p2 <= std_logic_vector(unsigned(acc_V_52_0_reg_1243) + unsigned(trunc_ln708_52_fu_3417_p4));
    acc_53_V_fu_3834_p2 <= std_logic_vector(unsigned(acc_V_53_0_reg_1230) + unsigned(trunc_ln708_53_fu_3426_p4));
    acc_54_V_fu_3840_p2 <= std_logic_vector(unsigned(acc_V_54_0_reg_1217) + unsigned(trunc_ln708_54_fu_3435_p4));
    acc_55_V_fu_3846_p2 <= std_logic_vector(unsigned(acc_V_55_0_reg_1204) + unsigned(trunc_ln708_55_fu_3444_p4));
    acc_56_V_fu_3852_p2 <= std_logic_vector(unsigned(acc_V_56_0_reg_1191) + unsigned(trunc_ln708_56_fu_3453_p4));
    acc_57_V_fu_3858_p2 <= std_logic_vector(unsigned(acc_V_57_0_reg_1178) + unsigned(trunc_ln708_57_fu_3462_p4));
    acc_58_V_fu_3864_p2 <= std_logic_vector(unsigned(acc_V_58_0_reg_1165) + unsigned(trunc_ln708_58_fu_3471_p4));
    acc_59_V_fu_3870_p2 <= std_logic_vector(unsigned(acc_V_59_0_reg_1152) + unsigned(trunc_ln708_59_fu_3480_p4));
    acc_5_V_fu_3546_p2 <= std_logic_vector(unsigned(acc_V_5_0_reg_1854) + unsigned(trunc_ln708_5_fu_2994_p4));
    acc_60_V_fu_3876_p2 <= std_logic_vector(unsigned(acc_V_60_0_reg_1139) + unsigned(trunc_ln708_60_fu_3489_p4));
    acc_61_V_fu_3882_p2 <= std_logic_vector(unsigned(acc_V_61_0_reg_1126) + unsigned(trunc_ln708_61_fu_3498_p4));
    acc_62_V_fu_3888_p2 <= std_logic_vector(unsigned(acc_V_62_0_reg_1113) + unsigned(trunc_ln708_62_fu_3507_p4));
    acc_63_V_fu_2944_p2 <= std_logic_vector(unsigned(ap_phi_mux_acc_V_63_0_phi_fu_1105_p4) + unsigned(trunc_ln708_s_reg_5483));
    acc_6_V_fu_3552_p2 <= std_logic_vector(unsigned(acc_V_6_0_reg_1841) + unsigned(trunc_ln708_6_fu_3003_p4));
    acc_7_V_fu_3558_p2 <= std_logic_vector(unsigned(acc_V_7_0_reg_1828) + unsigned(trunc_ln708_7_fu_3012_p4));
    acc_8_V_fu_3564_p2 <= std_logic_vector(unsigned(acc_V_8_0_reg_1815) + unsigned(trunc_ln708_8_fu_3021_p4));
    acc_9_V_fu_3570_p2 <= std_logic_vector(unsigned(acc_V_9_0_reg_1802) + unsigned(trunc_ln708_9_fu_3030_p4));
    add_ln285_fu_3956_p2 <= std_logic_vector(unsigned(pY_5_load_reg_4735) + unsigned(ap_const_lv32_1));
    add_ln287_fu_3967_p2 <= std_logic_vector(unsigned(sY_5_load_reg_4725) + unsigned(ap_const_lv32_1));
    add_ln290_fu_3916_p2 <= std_logic_vector(unsigned(pX_5_load_reg_4741) + unsigned(ap_const_lv32_1));
    add_ln292_fu_3927_p2 <= std_logic_vector(unsigned(sX_5_load_reg_4715) + unsigned(ap_const_lv32_1));
    and_ln255_7_fu_2069_p2 <= (icmp_ln255_12_fu_2057_p2 and icmp_ln255_11_fu_2037_p2);
    and_ln255_8_fu_2075_p2 <= (and_ln255_fu_2063_p2 and and_ln255_7_fu_2069_p2);
    and_ln255_fu_2063_p2 <= (icmp_ln255_fu_2007_p2 and icmp_ln255_10_fu_2017_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(6);
    ap_CS_fsm_state13 <= ap_CS_fsm(7);
    ap_CS_fsm_state14 <= ap_CS_fsm(8);
    ap_CS_fsm_state15 <= ap_CS_fsm(9);
    ap_CS_fsm_state16 <= ap_CS_fsm(10);
    ap_CS_fsm_state17 <= ap_CS_fsm(11);
    ap_CS_fsm_state18 <= ap_CS_fsm(12);
    ap_CS_fsm_state19 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(14);
    ap_CS_fsm_state21 <= ap_CS_fsm(15);
    ap_CS_fsm_state22 <= ap_CS_fsm(16);
    ap_CS_fsm_state23 <= ap_CS_fsm(17);
    ap_CS_fsm_state24 <= ap_CS_fsm(18);
    ap_CS_fsm_state25 <= ap_CS_fsm(19);
    ap_CS_fsm_state26 <= ap_CS_fsm(20);
    ap_CS_fsm_state27 <= ap_CS_fsm(21);
    ap_CS_fsm_state28 <= ap_CS_fsm(22);
    ap_CS_fsm_state29 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(24);
    ap_CS_fsm_state31 <= ap_CS_fsm(25);
    ap_CS_fsm_state32 <= ap_CS_fsm(26);
    ap_CS_fsm_state33 <= ap_CS_fsm(27);
    ap_CS_fsm_state34 <= ap_CS_fsm(28);
    ap_CS_fsm_state35 <= ap_CS_fsm(29);
    ap_CS_fsm_state36 <= ap_CS_fsm(30);
    ap_CS_fsm_state37 <= ap_CS_fsm(31);
    ap_CS_fsm_state38 <= ap_CS_fsm(32);
    ap_CS_fsm_state39 <= ap_CS_fsm(33);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(34);
    ap_CS_fsm_state41 <= ap_CS_fsm(35);
    ap_CS_fsm_state42 <= ap_CS_fsm(36);
    ap_CS_fsm_state43 <= ap_CS_fsm(37);
    ap_CS_fsm_state44 <= ap_CS_fsm(38);
    ap_CS_fsm_state45 <= ap_CS_fsm(39);
    ap_CS_fsm_state46 <= ap_CS_fsm(40);
    ap_CS_fsm_state47 <= ap_CS_fsm(41);
    ap_CS_fsm_state48 <= ap_CS_fsm(42);
    ap_CS_fsm_state49 <= ap_CS_fsm(43);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_assign_proc : process(data_V_V_empty_n, icmp_ln247_fu_1986_p2)
    begin
                ap_block_state3 <= ((data_V_V_empty_n = ap_const_logic_0) and (icmp_ln247_fu_1986_p2 = ap_const_lv1_0));
    end process;


    ap_block_state3_ignore_call0_assign_proc : process(data_V_V_empty_n, icmp_ln247_fu_1986_p2)
    begin
                ap_block_state3_ignore_call0 <= ((data_V_V_empty_n = ap_const_logic_0) and (icmp_ln247_fu_1986_p2 = ap_const_lv1_0));
    end process;

        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1023_assign_proc : process(and_ln255_8_reg_4747, icmp_ln266_fu_3894_p2, icmp_ln277_fu_3911_p2)
    begin
                ap_condition_1023 <= (((ap_const_lv1_0 = and_ln255_8_reg_4747) and (icmp_ln277_fu_3911_p2 = ap_const_lv1_0)) or ((icmp_ln277_fu_3911_p2 = ap_const_lv1_0) and (icmp_ln266_fu_3894_p2 = ap_const_lv1_1)));
    end process;


    ap_condition_1034_assign_proc : process(and_ln255_8_reg_4747, icmp_ln266_fu_3894_p2, icmp_ln277_fu_3911_p2, icmp_ln281_fu_3951_p2)
    begin
                ap_condition_1034 <= (((ap_const_lv1_0 = and_ln255_8_reg_4747) and (icmp_ln281_fu_3951_p2 = ap_const_lv1_0) and (icmp_ln277_fu_3911_p2 = ap_const_lv1_1)) or ((icmp_ln281_fu_3951_p2 = ap_const_lv1_0) and (icmp_ln277_fu_3911_p2 = ap_const_lv1_1) and (icmp_ln266_fu_3894_p2 = ap_const_lv1_1)));
    end process;


    ap_condition_1210_assign_proc : process(and_ln255_8_reg_4747, icmp_ln266_fu_3894_p2, icmp_ln277_fu_3911_p2, icmp_ln281_fu_3951_p2)
    begin
                ap_condition_1210 <= (((ap_const_lv1_0 = and_ln255_8_reg_4747) and (icmp_ln281_fu_3951_p2 = ap_const_lv1_1) and (icmp_ln277_fu_3911_p2 = ap_const_lv1_1)) or ((icmp_ln281_fu_3951_p2 = ap_const_lv1_1) and (icmp_ln277_fu_3911_p2 = ap_const_lv1_1) and (icmp_ln266_fu_3894_p2 = ap_const_lv1_1)));
    end process;


    ap_condition_1300_assign_proc : process(and_ln255_8_reg_4747, icmp_ln266_fu_3894_p2, icmp_ln277_fu_3911_p2)
    begin
                ap_condition_1300 <= (((ap_const_lv1_0 = and_ln255_8_reg_4747) and (icmp_ln277_fu_3911_p2 = ap_const_lv1_1)) or ((icmp_ln277_fu_3911_p2 = ap_const_lv1_1) and (icmp_ln266_fu_3894_p2 = ap_const_lv1_1)));
    end process;


    ap_condition_pp0_exit_iter0_state6_assign_proc : process(icmp_ln336_fu_2081_p2)
    begin
        if ((icmp_ln336_fu_2081_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln245_fu_1974_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln245_fu_1974_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_acc_V_63_0_phi_fu_1105_p4_assign_proc : process(acc_V_63_0_reg_1100, icmp_ln336_reg_4751_pp0_iter4_reg, acc_63_V_reg_5803, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4751_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_acc_V_63_0_phi_fu_1105_p4 <= acc_63_V_reg_5803;
        else 
            ap_phi_mux_acc_V_63_0_phi_fu_1105_p4 <= acc_V_63_0_reg_1100;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data_V_V_blk_n_assign_proc : process(data_V_V_empty_n, ap_CS_fsm_state3, icmp_ln247_fu_1986_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln247_fu_1986_p2 = ap_const_lv1_0))) then 
            data_V_V_blk_n <= data_V_V_empty_n;
        else 
            data_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_V_read_assign_proc : process(data_V_V_empty_n, ap_CS_fsm_state3, icmp_ln247_fu_1986_p2)
    begin
        if ((not(((data_V_V_empty_n = ap_const_logic_0) and (icmp_ln247_fu_1986_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln247_fu_1986_p2 = ap_const_lv1_0))) then 
            data_V_V_read <= ap_const_logic_1;
        else 
            data_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_start <= grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_ap_start_reg;
    grp_fu_2928_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_3996_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4002_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4008_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4014_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4020_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4026_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4032_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4038_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4044_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4050_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4056_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4062_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4068_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4074_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4080_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4086_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4092_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4098_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4104_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4110_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4116_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4122_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4128_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4134_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4140_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4146_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4152_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4158_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4164_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4170_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4176_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4182_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4188_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4194_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4200_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4206_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4212_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4218_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4224_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4230_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4236_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4242_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4248_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4254_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4260_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4266_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4272_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4278_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4284_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4290_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4296_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4302_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4308_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4314_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4320_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4326_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4332_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4338_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4344_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4350_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4356_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4362_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    grp_fu_4368_p1 <= sext_ln1116_cast_fu_2733_p1(16 - 1 downto 0);
    i1_fu_1992_p2 <= std_logic_vector(unsigned(i1_0_i_reg_1088) + unsigned(ap_const_lv7_1));
    i_fu_1980_p2 <= std_logic_vector(unsigned(i_0_i_reg_1077) + unsigned(ap_const_lv8_1));
    i_ic_fu_3900_p2 <= std_logic_vector(unsigned(i_ic_0_i_reg_1943) + unsigned(ap_const_lv7_1));
    icmp_ln245_fu_1974_p2 <= "1" when (i_0_i_reg_1077 = ap_const_lv8_E1) else "0";
    icmp_ln247_fu_1986_p2 <= "1" when (i1_0_i_reg_1088 = ap_const_lv7_40) else "0";
    icmp_ln255_10_fu_2017_p2 <= "1" when (sY_5 = ap_const_lv32_2) else "0";
    icmp_ln255_11_fu_2037_p2 <= "1" when (signed(tmp_190_fu_2027_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln255_12_fu_2057_p2 <= "1" when (signed(tmp_191_fu_2047_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln255_fu_2007_p2 <= "1" when (sX_5 = ap_const_lv32_2) else "0";
    icmp_ln266_fu_3894_p2 <= "1" when (i_ic_0_i_reg_1943 = ap_const_lv7_40) else "0";
    icmp_ln277_fu_3911_p2 <= "1" when (pX_5_load_reg_4741 = ap_const_lv32_E) else "0";
    icmp_ln281_fu_3951_p2 <= "1" when (pY_5_load_reg_4735 = ap_const_lv32_E) else "0";
    icmp_ln336_fu_2081_p2 <= "1" when (in_index_reg_1932 = ap_const_lv10_240) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln245_fu_1974_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln245_fu_1974_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ir_fu_2087_p2 <= std_logic_vector(unsigned(in_index_reg_1932) + unsigned(ap_const_lv10_1));

    layer_in_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_output_V_address0, ap_block_pp0_stage0, zext_ln344_fu_2093_p1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            layer_in_V_address0 <= zext_ln344_fu_2093_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_in_V_address0 <= grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_output_V_address0;
        else 
            layer_in_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    layer_in_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_output_V_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer_in_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_in_V_ce0 <= grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_output_V_ce0;
        else 
            layer_in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_V_we0_assign_proc : process(ap_CS_fsm_state5, grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_output_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_in_V_we0 <= grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_output_V_we0;
        else 
            layer_in_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_out_i_address0_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state43, zext_ln268_fu_3906_p1, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            layer_out_i_address0 <= zext_ln268_fu_3906_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            layer_out_i_address0 <= ap_const_lv64_3E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer_out_i_address0 <= ap_const_lv64_3C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            layer_out_i_address0 <= ap_const_lv64_3A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            layer_out_i_address0 <= ap_const_lv64_38(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            layer_out_i_address0 <= ap_const_lv64_36(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            layer_out_i_address0 <= ap_const_lv64_34(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer_out_i_address0 <= ap_const_lv64_32(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            layer_out_i_address0 <= ap_const_lv64_30(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            layer_out_i_address0 <= ap_const_lv64_2E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            layer_out_i_address0 <= ap_const_lv64_2C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            layer_out_i_address0 <= ap_const_lv64_2A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer_out_i_address0 <= ap_const_lv64_28(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            layer_out_i_address0 <= ap_const_lv64_26(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            layer_out_i_address0 <= ap_const_lv64_24(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            layer_out_i_address0 <= ap_const_lv64_22(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            layer_out_i_address0 <= ap_const_lv64_20(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer_out_i_address0 <= ap_const_lv64_1E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            layer_out_i_address0 <= ap_const_lv64_1C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            layer_out_i_address0 <= ap_const_lv64_1A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_out_i_address0 <= ap_const_lv64_18(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            layer_out_i_address0 <= ap_const_lv64_16(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer_out_i_address0 <= ap_const_lv64_14(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            layer_out_i_address0 <= ap_const_lv64_12(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            layer_out_i_address0 <= ap_const_lv64_10(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            layer_out_i_address0 <= ap_const_lv64_E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            layer_out_i_address0 <= ap_const_lv64_C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            layer_out_i_address0 <= ap_const_lv64_A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            layer_out_i_address0 <= ap_const_lv64_8(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            layer_out_i_address0 <= ap_const_lv64_6(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            layer_out_i_address0 <= ap_const_lv64_4(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            layer_out_i_address0 <= ap_const_lv64_2(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            layer_out_i_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            layer_out_i_address0 <= "XXXXXX";
        end if; 
    end process;


    layer_out_i_address1_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            layer_out_i_address1 <= ap_const_lv64_3F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer_out_i_address1 <= ap_const_lv64_3D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            layer_out_i_address1 <= ap_const_lv64_3B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            layer_out_i_address1 <= ap_const_lv64_39(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            layer_out_i_address1 <= ap_const_lv64_37(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            layer_out_i_address1 <= ap_const_lv64_35(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer_out_i_address1 <= ap_const_lv64_33(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            layer_out_i_address1 <= ap_const_lv64_31(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            layer_out_i_address1 <= ap_const_lv64_2F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            layer_out_i_address1 <= ap_const_lv64_2D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            layer_out_i_address1 <= ap_const_lv64_2B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer_out_i_address1 <= ap_const_lv64_29(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            layer_out_i_address1 <= ap_const_lv64_27(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            layer_out_i_address1 <= ap_const_lv64_25(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            layer_out_i_address1 <= ap_const_lv64_23(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            layer_out_i_address1 <= ap_const_lv64_21(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer_out_i_address1 <= ap_const_lv64_1F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            layer_out_i_address1 <= ap_const_lv64_1D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            layer_out_i_address1 <= ap_const_lv64_1B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_out_i_address1 <= ap_const_lv64_19(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            layer_out_i_address1 <= ap_const_lv64_17(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer_out_i_address1 <= ap_const_lv64_15(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            layer_out_i_address1 <= ap_const_lv64_13(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            layer_out_i_address1 <= ap_const_lv64_11(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            layer_out_i_address1 <= ap_const_lv64_F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            layer_out_i_address1 <= ap_const_lv64_D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            layer_out_i_address1 <= ap_const_lv64_B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            layer_out_i_address1 <= ap_const_lv64_9(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            layer_out_i_address1 <= ap_const_lv64_7(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            layer_out_i_address1 <= ap_const_lv64_5(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            layer_out_i_address1 <= ap_const_lv64_3(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            layer_out_i_address1 <= ap_const_lv64_1(6 - 1 downto 0);
        else 
            layer_out_i_address1 <= "XXXXXX";
        end if; 
    end process;


    layer_out_i_ce0_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state43, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            layer_out_i_ce0 <= ap_const_logic_1;
        else 
            layer_out_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_out_i_ce1_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            layer_out_i_ce1 <= ap_const_logic_1;
        else 
            layer_out_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    layer_out_i_d0_assign_proc : process(acc_V_62_0_reg_1113, acc_V_60_0_reg_1139, acc_V_58_0_reg_1165, acc_V_56_0_reg_1191, acc_V_54_0_reg_1217, acc_V_52_0_reg_1243, acc_V_50_0_reg_1269, acc_V_48_0_reg_1295, acc_V_46_0_reg_1321, acc_V_44_0_reg_1347, acc_V_42_0_reg_1373, acc_V_40_0_reg_1399, acc_V_38_0_reg_1425, acc_V_36_0_reg_1451, acc_V_34_0_reg_1477, acc_V_32_0_reg_1503, acc_V_30_0_reg_1529, acc_V_28_0_reg_1555, acc_V_26_0_reg_1581, acc_V_24_0_reg_1607, acc_V_22_0_reg_1633, acc_V_20_0_reg_1659, acc_V_18_0_reg_1685, acc_V_16_0_reg_1711, acc_V_14_0_reg_1737, acc_V_12_0_reg_1763, acc_V_10_0_reg_1789, acc_V_8_0_reg_1815, acc_V_6_0_reg_1841, acc_V_4_0_reg_1867, acc_V_2_0_reg_1893, acc_V_0_0_reg_1919, ap_CS_fsm_state43, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            layer_out_i_d0 <= acc_V_62_0_reg_1113;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer_out_i_d0 <= acc_V_60_0_reg_1139;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            layer_out_i_d0 <= acc_V_58_0_reg_1165;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            layer_out_i_d0 <= acc_V_56_0_reg_1191;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            layer_out_i_d0 <= acc_V_54_0_reg_1217;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            layer_out_i_d0 <= acc_V_52_0_reg_1243;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer_out_i_d0 <= acc_V_50_0_reg_1269;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            layer_out_i_d0 <= acc_V_48_0_reg_1295;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            layer_out_i_d0 <= acc_V_46_0_reg_1321;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            layer_out_i_d0 <= acc_V_44_0_reg_1347;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            layer_out_i_d0 <= acc_V_42_0_reg_1373;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer_out_i_d0 <= acc_V_40_0_reg_1399;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            layer_out_i_d0 <= acc_V_38_0_reg_1425;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            layer_out_i_d0 <= acc_V_36_0_reg_1451;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            layer_out_i_d0 <= acc_V_34_0_reg_1477;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            layer_out_i_d0 <= acc_V_32_0_reg_1503;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer_out_i_d0 <= acc_V_30_0_reg_1529;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            layer_out_i_d0 <= acc_V_28_0_reg_1555;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            layer_out_i_d0 <= acc_V_26_0_reg_1581;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_out_i_d0 <= acc_V_24_0_reg_1607;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            layer_out_i_d0 <= acc_V_22_0_reg_1633;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer_out_i_d0 <= acc_V_20_0_reg_1659;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            layer_out_i_d0 <= acc_V_18_0_reg_1685;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            layer_out_i_d0 <= acc_V_16_0_reg_1711;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            layer_out_i_d0 <= acc_V_14_0_reg_1737;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            layer_out_i_d0 <= acc_V_12_0_reg_1763;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            layer_out_i_d0 <= acc_V_10_0_reg_1789;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            layer_out_i_d0 <= acc_V_8_0_reg_1815;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            layer_out_i_d0 <= acc_V_6_0_reg_1841;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            layer_out_i_d0 <= acc_V_4_0_reg_1867;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            layer_out_i_d0 <= acc_V_2_0_reg_1893;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            layer_out_i_d0 <= acc_V_0_0_reg_1919;
        else 
            layer_out_i_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    layer_out_i_d1_assign_proc : process(acc_V_63_0_reg_1100, acc_V_61_0_reg_1126, acc_V_59_0_reg_1152, acc_V_57_0_reg_1178, acc_V_55_0_reg_1204, acc_V_53_0_reg_1230, acc_V_51_0_reg_1256, acc_V_49_0_reg_1282, acc_V_47_0_reg_1308, acc_V_45_0_reg_1334, acc_V_43_0_reg_1360, acc_V_41_0_reg_1386, acc_V_39_0_reg_1412, acc_V_37_0_reg_1438, acc_V_35_0_reg_1464, acc_V_33_0_reg_1490, acc_V_31_0_reg_1516, acc_V_29_0_reg_1542, acc_V_27_0_reg_1568, acc_V_25_0_reg_1594, acc_V_23_0_reg_1620, acc_V_21_0_reg_1646, acc_V_19_0_reg_1672, acc_V_17_0_reg_1698, acc_V_15_0_reg_1724, acc_V_13_0_reg_1750, acc_V_11_0_reg_1776, acc_V_9_0_reg_1802, acc_V_7_0_reg_1828, acc_V_5_0_reg_1854, acc_V_3_0_reg_1880, acc_V_1_0_reg_1906, ap_CS_fsm_state43, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            layer_out_i_d1 <= acc_V_63_0_reg_1100;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer_out_i_d1 <= acc_V_61_0_reg_1126;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            layer_out_i_d1 <= acc_V_59_0_reg_1152;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            layer_out_i_d1 <= acc_V_57_0_reg_1178;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            layer_out_i_d1 <= acc_V_55_0_reg_1204;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            layer_out_i_d1 <= acc_V_53_0_reg_1230;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer_out_i_d1 <= acc_V_51_0_reg_1256;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            layer_out_i_d1 <= acc_V_49_0_reg_1282;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            layer_out_i_d1 <= acc_V_47_0_reg_1308;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            layer_out_i_d1 <= acc_V_45_0_reg_1334;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            layer_out_i_d1 <= acc_V_43_0_reg_1360;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer_out_i_d1 <= acc_V_41_0_reg_1386;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            layer_out_i_d1 <= acc_V_39_0_reg_1412;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            layer_out_i_d1 <= acc_V_37_0_reg_1438;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            layer_out_i_d1 <= acc_V_35_0_reg_1464;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            layer_out_i_d1 <= acc_V_33_0_reg_1490;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer_out_i_d1 <= acc_V_31_0_reg_1516;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            layer_out_i_d1 <= acc_V_29_0_reg_1542;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            layer_out_i_d1 <= acc_V_27_0_reg_1568;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_out_i_d1 <= acc_V_25_0_reg_1594;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            layer_out_i_d1 <= acc_V_23_0_reg_1620;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer_out_i_d1 <= acc_V_21_0_reg_1646;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            layer_out_i_d1 <= acc_V_19_0_reg_1672;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            layer_out_i_d1 <= acc_V_17_0_reg_1698;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            layer_out_i_d1 <= acc_V_15_0_reg_1724;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            layer_out_i_d1 <= acc_V_13_0_reg_1750;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            layer_out_i_d1 <= acc_V_11_0_reg_1776;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            layer_out_i_d1 <= acc_V_9_0_reg_1802;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            layer_out_i_d1 <= acc_V_7_0_reg_1828;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            layer_out_i_d1 <= acc_V_5_0_reg_1854;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            layer_out_i_d1 <= acc_V_3_0_reg_1880;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            layer_out_i_d1 <= acc_V_1_0_reg_1906;
        else 
            layer_out_i_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    layer_out_i_we0_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            layer_out_i_we0 <= ap_const_logic_1;
        else 
            layer_out_i_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_out_i_we1_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            layer_out_i_we1 <= ap_const_logic_1;
        else 
            layer_out_i_we1 <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_V_blk_n_assign_proc : process(res_V_V_full_n, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            res_V_V_blk_n <= res_V_V_full_n;
        else 
            res_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_V_din <= res_pack_V_reg_6153;

    res_V_V_write_assign_proc : process(res_V_V_full_n, ap_CS_fsm_state46)
    begin
        if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            res_V_V_write <= ap_const_logic_1;
        else 
            res_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln287_fu_3972_p3 <= 
        ap_const_lv32_2 when (icmp_ln255_10_reg_4730(0) = '1') else 
        add_ln287_fu_3967_p2;
    select_ln292_fu_3932_p3 <= 
        ap_const_lv32_2 when (icmp_ln255_reg_4720(0) = '1') else 
        add_ln292_fu_3927_p2;
        sext_ln1116_cast_fu_2733_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(layer_in_V_load_reg_4770),21));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_190_fu_2027_p4 <= pY_5(31 downto 1);
    tmp_191_fu_2047_p4 <= pX_5(31 downto 1);

    tmpdata_V_address0_assign_proc : process(ap_CS_fsm_state5, grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_data_V_address0, ap_CS_fsm_state4, zext_ln249_fu_1998_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmpdata_V_address0 <= zext_ln249_fu_1998_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmpdata_V_address0 <= grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_data_V_address0;
        else 
            tmpdata_V_address0 <= "XXXXXX";
        end if; 
    end process;


    tmpdata_V_ce0_assign_proc : process(ap_CS_fsm_state5, grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_data_V_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmpdata_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmpdata_V_ce0 <= grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config12_s_fu_1965_data_V_ce0;
        else 
            tmpdata_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmpdata_V_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmpdata_V_we0 <= ap_const_logic_1;
        else 
            tmpdata_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln344_fu_2099_p1 <= w12_V_q0(6 - 1 downto 0);
    trunc_ln708_10_fu_3039_p4 <= mul_ln1118_139_reg_5538(20 downto 5);
    trunc_ln708_11_fu_3048_p4 <= mul_ln1118_140_reg_5543(20 downto 5);
    trunc_ln708_12_fu_3057_p4 <= mul_ln1118_141_reg_5548(20 downto 5);
    trunc_ln708_13_fu_3066_p4 <= mul_ln1118_142_reg_5553(20 downto 5);
    trunc_ln708_14_fu_3075_p4 <= mul_ln1118_143_reg_5558(20 downto 5);
    trunc_ln708_15_fu_3084_p4 <= mul_ln1118_144_reg_5563(20 downto 5);
    trunc_ln708_16_fu_3093_p4 <= mul_ln1118_145_reg_5568(20 downto 5);
    trunc_ln708_17_fu_3102_p4 <= mul_ln1118_146_reg_5573(20 downto 5);
    trunc_ln708_18_fu_3111_p4 <= mul_ln1118_147_reg_5578(20 downto 5);
    trunc_ln708_19_fu_3120_p4 <= mul_ln1118_148_reg_5583(20 downto 5);
    trunc_ln708_1_fu_2958_p4 <= mul_ln1118_130_reg_5493(20 downto 5);
    trunc_ln708_20_fu_3129_p4 <= mul_ln1118_149_reg_5588(20 downto 5);
    trunc_ln708_21_fu_3138_p4 <= mul_ln1118_150_reg_5593(20 downto 5);
    trunc_ln708_22_fu_3147_p4 <= mul_ln1118_151_reg_5598(20 downto 5);
    trunc_ln708_23_fu_3156_p4 <= mul_ln1118_152_reg_5603(20 downto 5);
    trunc_ln708_24_fu_3165_p4 <= mul_ln1118_153_reg_5608(20 downto 5);
    trunc_ln708_25_fu_3174_p4 <= mul_ln1118_154_reg_5613(20 downto 5);
    trunc_ln708_26_fu_3183_p4 <= mul_ln1118_155_reg_5618(20 downto 5);
    trunc_ln708_27_fu_3192_p4 <= mul_ln1118_156_reg_5623(20 downto 5);
    trunc_ln708_28_fu_3201_p4 <= mul_ln1118_157_reg_5628(20 downto 5);
    trunc_ln708_29_fu_3210_p4 <= mul_ln1118_158_reg_5633(20 downto 5);
    trunc_ln708_2_fu_2967_p4 <= mul_ln1118_131_reg_5498(20 downto 5);
    trunc_ln708_30_fu_3219_p4 <= mul_ln1118_159_reg_5638(20 downto 5);
    trunc_ln708_31_fu_3228_p4 <= mul_ln1118_160_reg_5643(20 downto 5);
    trunc_ln708_32_fu_3237_p4 <= mul_ln1118_161_reg_5648(20 downto 5);
    trunc_ln708_33_fu_3246_p4 <= mul_ln1118_162_reg_5653(20 downto 5);
    trunc_ln708_34_fu_3255_p4 <= mul_ln1118_163_reg_5658(20 downto 5);
    trunc_ln708_35_fu_3264_p4 <= mul_ln1118_164_reg_5663(20 downto 5);
    trunc_ln708_36_fu_3273_p4 <= mul_ln1118_165_reg_5668(20 downto 5);
    trunc_ln708_37_fu_3282_p4 <= mul_ln1118_166_reg_5673(20 downto 5);
    trunc_ln708_38_fu_3291_p4 <= mul_ln1118_167_reg_5678(20 downto 5);
    trunc_ln708_39_fu_3300_p4 <= mul_ln1118_168_reg_5683(20 downto 5);
    trunc_ln708_3_fu_2976_p4 <= mul_ln1118_132_reg_5503(20 downto 5);
    trunc_ln708_40_fu_3309_p4 <= mul_ln1118_169_reg_5688(20 downto 5);
    trunc_ln708_41_fu_3318_p4 <= mul_ln1118_170_reg_5693(20 downto 5);
    trunc_ln708_42_fu_3327_p4 <= mul_ln1118_171_reg_5698(20 downto 5);
    trunc_ln708_43_fu_3336_p4 <= mul_ln1118_172_reg_5703(20 downto 5);
    trunc_ln708_44_fu_3345_p4 <= mul_ln1118_173_reg_5708(20 downto 5);
    trunc_ln708_45_fu_3354_p4 <= mul_ln1118_174_reg_5713(20 downto 5);
    trunc_ln708_46_fu_3363_p4 <= mul_ln1118_175_reg_5718(20 downto 5);
    trunc_ln708_47_fu_3372_p4 <= mul_ln1118_176_reg_5723(20 downto 5);
    trunc_ln708_48_fu_3381_p4 <= mul_ln1118_177_reg_5728(20 downto 5);
    trunc_ln708_49_fu_3390_p4 <= mul_ln1118_178_reg_5733(20 downto 5);
    trunc_ln708_4_fu_2985_p4 <= mul_ln1118_133_reg_5508(20 downto 5);
    trunc_ln708_50_fu_3399_p4 <= mul_ln1118_179_reg_5738(20 downto 5);
    trunc_ln708_51_fu_3408_p4 <= mul_ln1118_180_reg_5743(20 downto 5);
    trunc_ln708_52_fu_3417_p4 <= mul_ln1118_181_reg_5748(20 downto 5);
    trunc_ln708_53_fu_3426_p4 <= mul_ln1118_182_reg_5753(20 downto 5);
    trunc_ln708_54_fu_3435_p4 <= mul_ln1118_183_reg_5758(20 downto 5);
    trunc_ln708_55_fu_3444_p4 <= mul_ln1118_184_reg_5763(20 downto 5);
    trunc_ln708_56_fu_3453_p4 <= mul_ln1118_185_reg_5768(20 downto 5);
    trunc_ln708_57_fu_3462_p4 <= mul_ln1118_186_reg_5773(20 downto 5);
    trunc_ln708_58_fu_3471_p4 <= mul_ln1118_187_reg_5778(20 downto 5);
    trunc_ln708_59_fu_3480_p4 <= mul_ln1118_188_reg_5783(20 downto 5);
    trunc_ln708_5_fu_2994_p4 <= mul_ln1118_134_reg_5513(20 downto 5);
    trunc_ln708_60_fu_3489_p4 <= mul_ln1118_189_reg_5788(20 downto 5);
    trunc_ln708_61_fu_3498_p4 <= mul_ln1118_190_reg_5793(20 downto 5);
    trunc_ln708_62_fu_3507_p4 <= mul_ln1118_191_reg_5798(20 downto 5);
    trunc_ln708_6_fu_3003_p4 <= mul_ln1118_135_reg_5518(20 downto 5);
    trunc_ln708_7_fu_3012_p4 <= mul_ln1118_136_reg_5523(20 downto 5);
    trunc_ln708_8_fu_3021_p4 <= mul_ln1118_137_reg_5528(20 downto 5);
    trunc_ln708_9_fu_3030_p4 <= mul_ln1118_138_reg_5533(20 downto 5);
    trunc_ln_fu_2949_p4 <= mul_ln1118_reg_5488(20 downto 5);
    w12_V_address0 <= zext_ln344_fu_2093_p1(10 - 1 downto 0);

    w12_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w12_V_ce0 <= ap_const_logic_1;
        else 
            w12_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln249_fu_1998_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_i_reg_1088),64));
    zext_ln268_fu_3906_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_ic_0_i_reg_1943),64));
    zext_ln344_fu_2093_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_index_reg_1932),64));
end behav;
