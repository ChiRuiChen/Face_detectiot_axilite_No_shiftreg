-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config9_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_V_empty_n : IN STD_LOGIC;
    data_V_V_read : OUT STD_LOGIC;
    res_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_V_full_n : IN STD_LOGIC;
    res_V_V_write : OUT STD_LOGIC );
end;


architecture behav of conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config9_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (43 downto 0) := "00000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (43 downto 0) := "00000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (43 downto 0) := "00000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (43 downto 0) := "00000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (43 downto 0) := "00000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (43 downto 0) := "00000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (43 downto 0) := "00001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (43 downto 0) := "00010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (43 downto 0) := "00100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (43 downto 0) := "01000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (43 downto 0) := "10000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv16_80 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_const_lv16_300 : STD_LOGIC_VECTOR (15 downto 0) := "0000001100000000";
    constant ap_const_lv16_200 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_const_lv16_180 : STD_LOGIC_VECTOR (15 downto 0) := "0000000110000000";
    constant ap_const_lv16_FE80 : STD_LOGIC_VECTOR (15 downto 0) := "1111111010000000";
    constant ap_const_lv16_FC80 : STD_LOGIC_VECTOR (15 downto 0) := "1111110010000000";
    constant ap_const_lv16_100 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_const_lv16_FF80 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110000000";
    constant ap_const_lv16_FD80 : STD_LOGIC_VECTOR (15 downto 0) := "1111110110000000";
    constant ap_const_lv16_FF00 : STD_LOGIC_VECTOR (15 downto 0) := "1111111100000000";
    constant ap_const_lv16_280 : STD_LOGIC_VECTOR (15 downto 0) := "0000001010000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv64_21 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100001";
    constant ap_const_lv64_22 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100010";
    constant ap_const_lv64_23 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100011";
    constant ap_const_lv64_24 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100100";
    constant ap_const_lv64_25 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100101";
    constant ap_const_lv64_26 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100110";
    constant ap_const_lv64_27 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100111";
    constant ap_const_lv64_28 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101000";
    constant ap_const_lv64_29 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101001";
    constant ap_const_lv64_2A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101010";
    constant ap_const_lv64_2B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101011";
    constant ap_const_lv64_2C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101100";
    constant ap_const_lv64_2D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101101";
    constant ap_const_lv64_2E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101110";
    constant ap_const_lv64_2F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101111";
    constant ap_const_lv64_30 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110000";
    constant ap_const_lv64_31 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110001";
    constant ap_const_lv64_32 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110010";
    constant ap_const_lv64_33 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110011";
    constant ap_const_lv64_34 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110100";
    constant ap_const_lv64_35 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110101";
    constant ap_const_lv64_36 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110110";
    constant ap_const_lv64_37 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110111";
    constant ap_const_lv64_38 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111000";
    constant ap_const_lv64_39 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111001";
    constant ap_const_lv64_3A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111010";
    constant ap_const_lv64_3B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111011";
    constant ap_const_lv64_3C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111100";
    constant ap_const_lv64_3D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111101";
    constant ap_const_lv64_3E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111110";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv9_121 : STD_LOGIC_VECTOR (8 downto 0) := "100100001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv9_120 : STD_LOGIC_VECTOR (8 downto 0) := "100100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_95 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010101";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_9B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011011";
    constant ap_const_lv32_9C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011100";
    constant ap_const_lv32_A1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100001";
    constant ap_const_lv32_A2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100010";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_AD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101101";
    constant ap_const_lv32_AE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101110";
    constant ap_const_lv32_B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110011";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv32_B9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111001";
    constant ap_const_lv32_BA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111010";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_C5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000101";
    constant ap_const_lv32_C6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000110";
    constant ap_const_lv32_CB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001011";
    constant ap_const_lv32_CC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001100";
    constant ap_const_lv32_D1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010001";
    constant ap_const_lv32_D2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010010";
    constant ap_const_lv32_D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010111";
    constant ap_const_lv32_D8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011000";
    constant ap_const_lv32_DD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011101";
    constant ap_const_lv32_DE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011110";
    constant ap_const_lv32_E3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100011";
    constant ap_const_lv32_E4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100100";
    constant ap_const_lv32_E9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101001";
    constant ap_const_lv32_EA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101010";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_F5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110101";
    constant ap_const_lv32_F6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110110";
    constant ap_const_lv32_FB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111011";
    constant ap_const_lv32_FC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111100";
    constant ap_const_lv32_101 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000001";
    constant ap_const_lv32_102 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000010";
    constant ap_const_lv32_107 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000111";
    constant ap_const_lv32_108 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001000";
    constant ap_const_lv32_10D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001101";
    constant ap_const_lv32_10E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001110";
    constant ap_const_lv32_113 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010011";
    constant ap_const_lv32_114 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010100";
    constant ap_const_lv32_119 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011001";
    constant ap_const_lv32_11A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011010";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_125 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100101";
    constant ap_const_lv32_126 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100110";
    constant ap_const_lv32_12B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101011";
    constant ap_const_lv32_12C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101100";
    constant ap_const_lv32_131 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110001";
    constant ap_const_lv32_132 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110010";
    constant ap_const_lv32_137 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110111";
    constant ap_const_lv32_138 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111000";
    constant ap_const_lv32_13D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111101";
    constant ap_const_lv32_13E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111110";
    constant ap_const_lv32_143 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000011";
    constant ap_const_lv32_144 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000100";
    constant ap_const_lv32_149 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001001";
    constant ap_const_lv32_14A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001010";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_155 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010101";
    constant ap_const_lv32_156 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010110";
    constant ap_const_lv32_15B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011011";
    constant ap_const_lv32_15C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011100";
    constant ap_const_lv32_161 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100001";
    constant ap_const_lv32_162 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100010";
    constant ap_const_lv32_167 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100111";
    constant ap_const_lv32_168 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101000";
    constant ap_const_lv32_16D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101101";
    constant ap_const_lv32_16E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101110";
    constant ap_const_lv32_173 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110011";
    constant ap_const_lv32_174 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110100";
    constant ap_const_lv32_179 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111001";
    constant ap_const_lv32_17A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111010";
    constant ap_const_lv32_17E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111110";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer_in_V_7_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer_in_V_7_ce0 : STD_LOGIC;
    signal layer_in_V_7_we0 : STD_LOGIC;
    signal layer_in_V_7_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sX_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pX_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal w9_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal w9_V_ce0 : STD_LOGIC;
    signal w9_V_q0 : STD_LOGIC_VECTOR (382 downto 0);
    signal data_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln247_fu_1998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal acc_V_63_0_reg_1112 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_62_0_reg_1125 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_61_0_reg_1138 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_60_0_reg_1151 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_59_0_reg_1164 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_58_0_reg_1177 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_57_0_reg_1190 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_56_0_reg_1203 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_55_0_reg_1216 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_54_0_reg_1229 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_53_0_reg_1242 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_52_0_reg_1255 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_51_0_reg_1268 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_50_0_reg_1281 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_49_0_reg_1294 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_48_0_reg_1307 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_47_0_reg_1320 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_46_0_reg_1333 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_45_0_reg_1346 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_44_0_reg_1359 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_43_0_reg_1372 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_42_0_reg_1385 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_41_0_reg_1398 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_40_0_reg_1411 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_39_0_reg_1424 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_38_0_reg_1437 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_37_0_reg_1450 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_36_0_reg_1463 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_35_0_reg_1476 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_34_0_reg_1489 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_33_0_reg_1502 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_32_0_reg_1515 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_31_0_reg_1528 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_30_0_reg_1541 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_29_0_reg_1554 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_28_0_reg_1567 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_27_0_reg_1580 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_26_0_reg_1593 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_25_0_reg_1606 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_24_0_reg_1619 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_23_0_reg_1632 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_22_0_reg_1645 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_21_0_reg_1658 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_20_0_reg_1671 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_19_0_reg_1684 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_18_0_reg_1697 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_17_0_reg_1710 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_16_0_reg_1723 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_15_0_reg_1736 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_14_0_reg_1749 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_13_0_reg_1762 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_12_0_reg_1775 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_11_0_reg_1788 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_10_0_reg_1801 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_9_0_reg_1814 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_8_0_reg_1827 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_7_0_reg_1840 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_6_0_reg_1853 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_5_0_reg_1866 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_4_0_reg_1879 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_3_0_reg_1892 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_2_0_reg_1905 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_1_0_reg_1918 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_0_0_reg_1931 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_index_reg_1944 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_fu_1992_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_4709 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i1_fu_2004_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i1_reg_4717 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal tmp_V_reg_4722 : STD_LOGIC_VECTOR (15 downto 0);
    signal sX_2_load_reg_4727 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_ready : STD_LOGIC;
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done : STD_LOGIC;
    signal icmp_ln255_fu_2019_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln255_reg_4732 : STD_LOGIC_VECTOR (0 downto 0);
    signal sY_2_load_reg_4737 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln255_1_fu_2029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln255_1_reg_4742 : STD_LOGIC_VECTOR (0 downto 0);
    signal pY_2_load_reg_4747 : STD_LOGIC_VECTOR (31 downto 0);
    signal pX_2_load_reg_4753 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln255_2_fu_2087_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln255_2_reg_4759 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln336_fu_2093_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln336_reg_4763 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln336_reg_4763_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln336_reg_4763_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln336_reg_4763_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln336_reg_4763_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ir_fu_2099_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal layer_in_V_7_load_reg_4782 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln344_fu_2111_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln344_reg_4787 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_reg_4792 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_reg_4797 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_reg_4802 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_reg_4807 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_reg_4812 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_reg_4817 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_reg_4822 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_reg_4827 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_reg_4832 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_reg_4837 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_reg_4842 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_reg_4847 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_reg_4852 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_reg_4857 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_reg_4862 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_reg_4867 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_18_reg_4872 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_19_reg_4877 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_reg_4882 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_21_reg_4887 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_22_reg_4892 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_23_reg_4897 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_24_reg_4902 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_25_reg_4907 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_26_reg_4912 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_27_reg_4917 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_28_reg_4922 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_29_reg_4927 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_30_reg_4932 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_31_reg_4937 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_32_reg_4942 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_33_reg_4947 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_34_reg_4952 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_35_reg_4957 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_36_reg_4962 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_37_reg_4967 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_38_reg_4972 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_39_reg_4977 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_40_reg_4982 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_41_reg_4987 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_42_reg_4992 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_43_reg_4997 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_44_reg_5002 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_45_reg_5007 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_46_reg_5012 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_47_reg_5017 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_48_reg_5022 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_49_reg_5027 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_50_reg_5032 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_51_reg_5037 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_52_reg_5042 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_53_reg_5047 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_54_reg_5052 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_55_reg_5057 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_56_reg_5062 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_57_reg_5067 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_58_reg_5072 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_59_reg_5077 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_60_reg_5082 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_61_reg_5087 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_62_reg_5092 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_63_reg_5097 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_64_reg_5102 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln1116_cast_fu_2745_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln708_62_reg_5495 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4008_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_reg_5500 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4014_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_5_reg_5505 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4020_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_6_reg_5510 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4026_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_7_reg_5515 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4032_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_8_reg_5520 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4038_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_9_reg_5525 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4044_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_10_reg_5530 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4050_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_11_reg_5535 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4056_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_12_reg_5540 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4062_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_13_reg_5545 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4068_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_14_reg_5550 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4074_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_15_reg_5555 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4080_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_16_reg_5560 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4086_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_17_reg_5565 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4092_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_18_reg_5570 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4098_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_19_reg_5575 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4104_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_20_reg_5580 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4110_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_21_reg_5585 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4116_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_22_reg_5590 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4122_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_23_reg_5595 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4128_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_24_reg_5600 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4134_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_25_reg_5605 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4140_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_26_reg_5610 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4146_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_27_reg_5615 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4152_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_28_reg_5620 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4158_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_29_reg_5625 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4164_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_30_reg_5630 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4170_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_31_reg_5635 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4176_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_32_reg_5640 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4182_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_33_reg_5645 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4188_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_34_reg_5650 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4194_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_35_reg_5655 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4200_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_36_reg_5660 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4206_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_37_reg_5665 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4212_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_38_reg_5670 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4218_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_39_reg_5675 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4224_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_40_reg_5680 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4230_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_41_reg_5685 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4236_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_42_reg_5690 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4242_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_43_reg_5695 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4248_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_44_reg_5700 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4254_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_45_reg_5705 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4260_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_46_reg_5710 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4266_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_47_reg_5715 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4272_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_48_reg_5720 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4278_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_49_reg_5725 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4284_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_50_reg_5730 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4290_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_51_reg_5735 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4296_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_52_reg_5740 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4302_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_53_reg_5745 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4308_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_54_reg_5750 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4314_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_55_reg_5755 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4320_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_56_reg_5760 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4326_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_57_reg_5765 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4332_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_58_reg_5770 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4338_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_59_reg_5775 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4344_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_60_reg_5780 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4350_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_61_reg_5785 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4356_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_62_reg_5790 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4362_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_63_reg_5795 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4368_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_64_reg_5800 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4374_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_65_reg_5805 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_4380_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_66_reg_5810 : STD_LOGIC_VECTOR (20 downto 0);
    signal acc_63_V_fu_2956_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_63_V_reg_5815 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal acc_0_V_fu_3528_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal acc_1_V_fu_3534_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_2_V_fu_3540_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_3_V_fu_3546_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_4_V_fu_3552_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_5_V_fu_3558_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_6_V_fu_3564_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_7_V_fu_3570_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_8_V_fu_3576_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_9_V_fu_3582_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_10_V_fu_3588_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_11_V_fu_3594_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_12_V_fu_3600_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_13_V_fu_3606_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_14_V_fu_3612_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_15_V_fu_3618_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_16_V_fu_3624_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_17_V_fu_3630_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_18_V_fu_3636_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_19_V_fu_3642_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_20_V_fu_3648_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_21_V_fu_3654_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_22_V_fu_3660_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_23_V_fu_3666_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_24_V_fu_3672_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_25_V_fu_3678_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_26_V_fu_3684_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_27_V_fu_3690_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_28_V_fu_3696_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_29_V_fu_3702_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_30_V_fu_3708_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_31_V_fu_3714_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_32_V_fu_3720_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_33_V_fu_3726_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_34_V_fu_3732_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_35_V_fu_3738_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_36_V_fu_3744_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_37_V_fu_3750_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_38_V_fu_3756_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_39_V_fu_3762_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_40_V_fu_3768_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_41_V_fu_3774_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_42_V_fu_3780_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_43_V_fu_3786_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_44_V_fu_3792_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_45_V_fu_3798_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_46_V_fu_3804_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_47_V_fu_3810_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_48_V_fu_3816_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_49_V_fu_3822_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_50_V_fu_3828_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_51_V_fu_3834_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_52_V_fu_3840_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_53_V_fu_3846_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_54_V_fu_3852_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_55_V_fu_3858_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_56_V_fu_3864_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_57_V_fu_3870_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_58_V_fu_3876_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_59_V_fu_3882_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_60_V_fu_3888_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_61_V_fu_3894_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_62_V_fu_3900_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_ic_fu_3912_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_ic_reg_6138 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal icmp_ln266_fu_3906_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln277_fu_3923_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln277_reg_6148 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln292_fu_3944_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln292_reg_6152 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln287_fu_3984_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln287_reg_6160 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln281_fu_3963_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal layer_out_i_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_pack_V_reg_6165 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal tmpdata_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmpdata_V_ce0 : STD_LOGIC;
    signal tmpdata_V_we0 : STD_LOGIC;
    signal tmpdata_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_out_i_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal layer_out_i_ce0 : STD_LOGIC;
    signal layer_out_i_we0 : STD_LOGIC;
    signal layer_out_i_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_out_i_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal layer_out_i_ce1 : STD_LOGIC;
    signal layer_out_i_we1 : STD_LOGIC;
    signal layer_out_i_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_start : STD_LOGIC;
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_idle : STD_LOGIC;
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_data_V_ce0 : STD_LOGIC;
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_output_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_output_V_ce0 : STD_LOGIC;
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_output_V_we0 : STD_LOGIC;
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_output_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_0_i_reg_1089 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal i1_0_i_reg_1100 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln245_fu_1986_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_acc_V_63_0_phi_fu_1117_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_ic_0_i_reg_1955 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal storemerge_i_reg_1966 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state3_ignore_call0 : BOOLEAN;
    signal zext_ln249_fu_2010_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln344_fu_2105_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln268_fu_3918_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal add_ln285_fu_3968_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln290_fu_3928_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal tmp_9_fu_2039_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_65_fu_2059_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln255_2_fu_2049_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln255_3_fu_2069_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln255_1_fu_2081_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln255_fu_2075_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_2940_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2940_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln_fu_2961_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_1_fu_2970_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_2_fu_2979_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_3_fu_2988_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_4_fu_2997_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_5_fu_3006_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_6_fu_3015_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_7_fu_3024_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_8_fu_3033_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_9_fu_3042_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_s_fu_3051_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_10_fu_3060_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_11_fu_3069_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_12_fu_3078_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_13_fu_3087_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_14_fu_3096_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_15_fu_3105_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_16_fu_3114_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_17_fu_3123_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_18_fu_3132_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_19_fu_3141_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_20_fu_3150_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_21_fu_3159_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_22_fu_3168_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_23_fu_3177_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_24_fu_3186_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_25_fu_3195_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_26_fu_3204_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_27_fu_3213_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_28_fu_3222_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_29_fu_3231_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_30_fu_3240_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_31_fu_3249_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_32_fu_3258_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_33_fu_3267_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_34_fu_3276_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_35_fu_3285_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_36_fu_3294_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_37_fu_3303_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_38_fu_3312_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_39_fu_3321_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_40_fu_3330_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_41_fu_3339_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_42_fu_3348_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_43_fu_3357_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_44_fu_3366_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_45_fu_3375_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_46_fu_3384_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_47_fu_3393_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_48_fu_3402_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_49_fu_3411_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_50_fu_3420_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_51_fu_3429_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_52_fu_3438_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_53_fu_3447_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_54_fu_3456_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_55_fu_3465_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_56_fu_3474_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_57_fu_3483_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_58_fu_3492_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_59_fu_3501_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_60_fu_3510_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_61_fu_3519_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln292_fu_3939_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln287_fu_3979_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_4008_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4014_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4020_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4026_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4032_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4038_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4044_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4050_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4056_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4062_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4068_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4074_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4080_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4086_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4092_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4098_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4104_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4110_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4116_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4122_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4128_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4134_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4140_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4146_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4152_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4158_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4164_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4170_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4176_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4182_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4188_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4194_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4200_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4206_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4212_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4218_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4224_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4230_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4236_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4242_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4248_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4254_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4260_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4266_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4272_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4278_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4284_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4290_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4296_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4302_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4308_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4314_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4320_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4326_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4332_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4338_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4344_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4350_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4356_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4362_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4368_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4374_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_4380_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_1023 : BOOLEAN;
    signal ap_condition_1306 : BOOLEAN;
    signal ap_condition_1034 : BOOLEAN;
    signal ap_condition_1216 : BOOLEAN;

    component cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_V_ce0 : OUT STD_LOGIC;
        data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_axi_mul_5s_16s_21_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component myproject_axi_mul_mul_6s_16s_21_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config5_s_layeg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config9_s_w9_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (382 downto 0) );
    end component;


    component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config5_s_tmpdhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config9_s_layeWhU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    layer_in_V_7_U : component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config5_s_layeg8j
    generic map (
        DataWidth => 16,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_in_V_7_address0,
        ce0 => layer_in_V_7_ce0,
        we0 => layer_in_V_7_we0,
        d0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_output_V_d0,
        q0 => layer_in_V_7_q0);

    w9_V_U : component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config9_s_w9_V
    generic map (
        DataWidth => 383,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w9_V_address0,
        ce0 => w9_V_ce0,
        q0 => w9_V_q0);

    tmpdata_V_U : component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config5_s_tmpdhbi
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmpdata_V_address0,
        ce0 => tmpdata_V_ce0,
        we0 => tmpdata_V_we0,
        d0 => tmp_V_reg_4722,
        q0 => tmpdata_V_q0);

    layer_out_i_U : component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config9_s_layeWhU
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_out_i_address0,
        ce0 => layer_out_i_ce0,
        we0 => layer_out_i_we0,
        d0 => layer_out_i_d0,
        q0 => layer_out_i_q0,
        address1 => layer_out_i_address1,
        ce1 => layer_out_i_ce1,
        we1 => layer_out_i_we1,
        d1 => layer_out_i_d1);

    grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977 : component cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_start,
        ap_done => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done,
        ap_idle => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_idle,
        ap_ready => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_ready,
        data_V_address0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_data_V_address0,
        data_V_ce0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_data_V_ce0,
        data_V_q0 => tmpdata_V_q0,
        output_V_address0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_output_V_address0,
        output_V_ce0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_output_V_ce0,
        output_V_we0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_output_V_we0,
        output_V_d0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_output_V_d0,
        output_V_q0 => layer_in_V_7_q0);

    myproject_axi_mul_5s_16s_21_2_1_U107 : component myproject_axi_mul_5s_16s_21_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 5,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_64_reg_5102,
        din1 => grp_fu_2940_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2940_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U108 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln344_reg_4787,
        din1 => grp_fu_4008_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4008_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U109 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_reg_4792,
        din1 => grp_fu_4014_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4014_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U110 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_4797,
        din1 => grp_fu_4020_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4020_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U111 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_3_reg_4802,
        din1 => grp_fu_4026_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4026_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U112 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_reg_4807,
        din1 => grp_fu_4032_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4032_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U113 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_5_reg_4812,
        din1 => grp_fu_4038_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4038_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U114 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_6_reg_4817,
        din1 => grp_fu_4044_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4044_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U115 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_7_reg_4822,
        din1 => grp_fu_4050_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4050_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U116 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_8_reg_4827,
        din1 => grp_fu_4056_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4056_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U117 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_10_reg_4832,
        din1 => grp_fu_4062_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4062_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U118 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_11_reg_4837,
        din1 => grp_fu_4068_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4068_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U119 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_12_reg_4842,
        din1 => grp_fu_4074_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4074_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U120 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_13_reg_4847,
        din1 => grp_fu_4080_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4080_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U121 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_14_reg_4852,
        din1 => grp_fu_4086_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4086_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U122 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_15_reg_4857,
        din1 => grp_fu_4092_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4092_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U123 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_16_reg_4862,
        din1 => grp_fu_4098_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4098_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U124 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_17_reg_4867,
        din1 => grp_fu_4104_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4104_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U125 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_18_reg_4872,
        din1 => grp_fu_4110_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4110_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U126 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_19_reg_4877,
        din1 => grp_fu_4116_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4116_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U127 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_20_reg_4882,
        din1 => grp_fu_4122_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4122_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U128 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_21_reg_4887,
        din1 => grp_fu_4128_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4128_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U129 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_22_reg_4892,
        din1 => grp_fu_4134_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4134_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U130 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_23_reg_4897,
        din1 => grp_fu_4140_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4140_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U131 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_24_reg_4902,
        din1 => grp_fu_4146_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4146_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U132 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_25_reg_4907,
        din1 => grp_fu_4152_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4152_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U133 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_26_reg_4912,
        din1 => grp_fu_4158_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4158_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U134 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_27_reg_4917,
        din1 => grp_fu_4164_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4164_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U135 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_28_reg_4922,
        din1 => grp_fu_4170_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4170_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U136 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_29_reg_4927,
        din1 => grp_fu_4176_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4176_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U137 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_30_reg_4932,
        din1 => grp_fu_4182_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4182_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U138 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_31_reg_4937,
        din1 => grp_fu_4188_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4188_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U139 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_32_reg_4942,
        din1 => grp_fu_4194_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4194_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U140 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_33_reg_4947,
        din1 => grp_fu_4200_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4200_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U141 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_34_reg_4952,
        din1 => grp_fu_4206_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4206_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U142 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_35_reg_4957,
        din1 => grp_fu_4212_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4212_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U143 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_36_reg_4962,
        din1 => grp_fu_4218_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4218_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U144 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_37_reg_4967,
        din1 => grp_fu_4224_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4224_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U145 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_38_reg_4972,
        din1 => grp_fu_4230_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4230_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U146 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_39_reg_4977,
        din1 => grp_fu_4236_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4236_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U147 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_40_reg_4982,
        din1 => grp_fu_4242_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4242_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U148 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_41_reg_4987,
        din1 => grp_fu_4248_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4248_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U149 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_42_reg_4992,
        din1 => grp_fu_4254_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4254_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U150 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_43_reg_4997,
        din1 => grp_fu_4260_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4260_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U151 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_44_reg_5002,
        din1 => grp_fu_4266_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4266_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U152 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_45_reg_5007,
        din1 => grp_fu_4272_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4272_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U153 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_46_reg_5012,
        din1 => grp_fu_4278_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4278_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U154 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_47_reg_5017,
        din1 => grp_fu_4284_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4284_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U155 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_48_reg_5022,
        din1 => grp_fu_4290_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4290_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U156 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_49_reg_5027,
        din1 => grp_fu_4296_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4296_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U157 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_50_reg_5032,
        din1 => grp_fu_4302_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4302_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U158 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_51_reg_5037,
        din1 => grp_fu_4308_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4308_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U159 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_52_reg_5042,
        din1 => grp_fu_4314_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4314_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U160 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_53_reg_5047,
        din1 => grp_fu_4320_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4320_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U161 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_54_reg_5052,
        din1 => grp_fu_4326_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4326_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U162 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_55_reg_5057,
        din1 => grp_fu_4332_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4332_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U163 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_56_reg_5062,
        din1 => grp_fu_4338_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4338_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U164 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_57_reg_5067,
        din1 => grp_fu_4344_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4344_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U165 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_58_reg_5072,
        din1 => grp_fu_4350_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4350_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U166 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_59_reg_5077,
        din1 => grp_fu_4356_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4356_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U167 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_60_reg_5082,
        din1 => grp_fu_4362_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4362_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U168 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_61_reg_5087,
        din1 => grp_fu_4368_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4368_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U169 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_62_reg_5092,
        din1 => grp_fu_4374_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4374_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U170 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_63_reg_5097,
        din1 => grp_fu_4380_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4380_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln245_fu_1986_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state6);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((data_V_V_empty_n = ap_const_logic_0) and (icmp_ln247_fu_1998_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln247_fu_1998_p2 = ap_const_lv1_1))) then 
                    grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_ready = ap_const_logic_1)) then 
                    grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    acc_V_0_0_reg_1931_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_0_0_reg_1931 <= acc_0_V_fu_3528_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_0_0_reg_1931 <= ap_const_lv16_200;
            end if; 
        end if;
    end process;

    acc_V_10_0_reg_1801_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_10_0_reg_1801 <= acc_10_V_fu_3588_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_10_0_reg_1801 <= ap_const_lv16_FF80;
            end if; 
        end if;
    end process;

    acc_V_11_0_reg_1788_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_11_0_reg_1788 <= acc_11_V_fu_3594_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_11_0_reg_1788 <= ap_const_lv16_200;
            end if; 
        end if;
    end process;

    acc_V_12_0_reg_1775_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_12_0_reg_1775 <= acc_12_V_fu_3600_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_12_0_reg_1775 <= ap_const_lv16_FF80;
            end if; 
        end if;
    end process;

    acc_V_13_0_reg_1762_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_13_0_reg_1762 <= acc_13_V_fu_3606_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_13_0_reg_1762 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_14_0_reg_1749_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_14_0_reg_1749 <= acc_14_V_fu_3612_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_14_0_reg_1749 <= ap_const_lv16_FF80;
            end if; 
        end if;
    end process;

    acc_V_15_0_reg_1736_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_15_0_reg_1736 <= acc_15_V_fu_3618_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_15_0_reg_1736 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_16_0_reg_1723_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_16_0_reg_1723 <= acc_16_V_fu_3624_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_16_0_reg_1723 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_V_17_0_reg_1710_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_17_0_reg_1710 <= acc_17_V_fu_3630_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_17_0_reg_1710 <= ap_const_lv16_FE80;
            end if; 
        end if;
    end process;

    acc_V_18_0_reg_1697_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_18_0_reg_1697 <= acc_18_V_fu_3636_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_18_0_reg_1697 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_19_0_reg_1684_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_19_0_reg_1684 <= acc_19_V_fu_3642_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_19_0_reg_1684 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_1_0_reg_1918_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_1_0_reg_1918 <= acc_1_V_fu_3534_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_1_0_reg_1918 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_V_20_0_reg_1671_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_20_0_reg_1671 <= acc_20_V_fu_3648_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_20_0_reg_1671 <= ap_const_lv16_FD80;
            end if; 
        end if;
    end process;

    acc_V_21_0_reg_1658_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_21_0_reg_1658 <= acc_21_V_fu_3654_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_21_0_reg_1658 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_22_0_reg_1645_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_22_0_reg_1645 <= acc_22_V_fu_3660_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_22_0_reg_1645 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_V_23_0_reg_1632_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_23_0_reg_1632 <= acc_23_V_fu_3666_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_23_0_reg_1632 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_24_0_reg_1619_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_24_0_reg_1619 <= acc_24_V_fu_3672_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_24_0_reg_1619 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_V_25_0_reg_1606_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_25_0_reg_1606 <= acc_25_V_fu_3678_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_25_0_reg_1606 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_V_26_0_reg_1593_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_26_0_reg_1593 <= acc_26_V_fu_3684_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_26_0_reg_1593 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_27_0_reg_1580_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_27_0_reg_1580 <= acc_27_V_fu_3690_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_27_0_reg_1580 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_28_0_reg_1567_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_28_0_reg_1567 <= acc_28_V_fu_3696_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_28_0_reg_1567 <= ap_const_lv16_FF80;
            end if; 
        end if;
    end process;

    acc_V_29_0_reg_1554_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_29_0_reg_1554 <= acc_29_V_fu_3702_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_29_0_reg_1554 <= ap_const_lv16_FF80;
            end if; 
        end if;
    end process;

    acc_V_2_0_reg_1905_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_2_0_reg_1905 <= acc_2_V_fu_3540_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_2_0_reg_1905 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_V_30_0_reg_1541_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_30_0_reg_1541 <= acc_30_V_fu_3708_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_30_0_reg_1541 <= ap_const_lv16_FF80;
            end if; 
        end if;
    end process;

    acc_V_31_0_reg_1528_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_31_0_reg_1528 <= acc_31_V_fu_3714_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_31_0_reg_1528 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_V_32_0_reg_1515_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_32_0_reg_1515 <= acc_32_V_fu_3720_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_32_0_reg_1515 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_V_33_0_reg_1502_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_33_0_reg_1502 <= acc_33_V_fu_3726_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_33_0_reg_1502 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_34_0_reg_1489_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_34_0_reg_1489 <= acc_34_V_fu_3732_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_34_0_reg_1489 <= ap_const_lv16_FF80;
            end if; 
        end if;
    end process;

    acc_V_35_0_reg_1476_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_35_0_reg_1476 <= acc_35_V_fu_3738_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_35_0_reg_1476 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_36_0_reg_1463_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_36_0_reg_1463 <= acc_36_V_fu_3744_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_36_0_reg_1463 <= ap_const_lv16_200;
            end if; 
        end if;
    end process;

    acc_V_37_0_reg_1450_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_37_0_reg_1450 <= acc_37_V_fu_3750_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_37_0_reg_1450 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_V_38_0_reg_1437_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_38_0_reg_1437 <= acc_38_V_fu_3756_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_38_0_reg_1437 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_39_0_reg_1424_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_39_0_reg_1424 <= acc_39_V_fu_3762_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_39_0_reg_1424 <= ap_const_lv16_280;
            end if; 
        end if;
    end process;

    acc_V_3_0_reg_1892_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_3_0_reg_1892 <= acc_3_V_fu_3546_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_3_0_reg_1892 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_40_0_reg_1411_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_40_0_reg_1411 <= acc_40_V_fu_3768_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_40_0_reg_1411 <= ap_const_lv16_200;
            end if; 
        end if;
    end process;

    acc_V_41_0_reg_1398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_41_0_reg_1398 <= acc_41_V_fu_3774_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_41_0_reg_1398 <= ap_const_lv16_FF80;
            end if; 
        end if;
    end process;

    acc_V_42_0_reg_1385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_42_0_reg_1385 <= acc_42_V_fu_3780_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_42_0_reg_1385 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_43_0_reg_1372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_43_0_reg_1372 <= acc_43_V_fu_3786_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_43_0_reg_1372 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_44_0_reg_1359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_44_0_reg_1359 <= acc_44_V_fu_3792_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_44_0_reg_1359 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_45_0_reg_1346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_45_0_reg_1346 <= acc_45_V_fu_3798_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_45_0_reg_1346 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_46_0_reg_1333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_46_0_reg_1333 <= acc_46_V_fu_3804_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_46_0_reg_1333 <= ap_const_lv16_FF00;
            end if; 
        end if;
    end process;

    acc_V_47_0_reg_1320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_47_0_reg_1320 <= acc_47_V_fu_3810_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_47_0_reg_1320 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_48_0_reg_1307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_48_0_reg_1307 <= acc_48_V_fu_3816_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_48_0_reg_1307 <= ap_const_lv16_FD80;
            end if; 
        end if;
    end process;

    acc_V_49_0_reg_1294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_49_0_reg_1294 <= acc_49_V_fu_3822_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_49_0_reg_1294 <= ap_const_lv16_200;
            end if; 
        end if;
    end process;

    acc_V_4_0_reg_1879_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_4_0_reg_1879 <= acc_4_V_fu_3552_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_4_0_reg_1879 <= ap_const_lv16_FF00;
            end if; 
        end if;
    end process;

    acc_V_50_0_reg_1281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_50_0_reg_1281 <= acc_50_V_fu_3828_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_50_0_reg_1281 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_51_0_reg_1268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_51_0_reg_1268 <= acc_51_V_fu_3834_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_51_0_reg_1268 <= ap_const_lv16_FE80;
            end if; 
        end if;
    end process;

    acc_V_52_0_reg_1255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_52_0_reg_1255 <= acc_52_V_fu_3840_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_52_0_reg_1255 <= ap_const_lv16_FF80;
            end if; 
        end if;
    end process;

    acc_V_53_0_reg_1242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_53_0_reg_1242 <= acc_53_V_fu_3846_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_53_0_reg_1242 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_54_0_reg_1229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_54_0_reg_1229 <= acc_54_V_fu_3852_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_54_0_reg_1229 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_55_0_reg_1216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_55_0_reg_1216 <= acc_55_V_fu_3858_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_55_0_reg_1216 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_56_0_reg_1203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_56_0_reg_1203 <= acc_56_V_fu_3864_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_56_0_reg_1203 <= ap_const_lv16_FC80;
            end if; 
        end if;
    end process;

    acc_V_57_0_reg_1190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_57_0_reg_1190 <= acc_57_V_fu_3870_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_57_0_reg_1190 <= ap_const_lv16_FE80;
            end if; 
        end if;
    end process;

    acc_V_58_0_reg_1177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_58_0_reg_1177 <= acc_58_V_fu_3876_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_58_0_reg_1177 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_59_0_reg_1164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_59_0_reg_1164 <= acc_59_V_fu_3882_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_59_0_reg_1164 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_5_0_reg_1866_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_5_0_reg_1866 <= acc_5_V_fu_3558_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_5_0_reg_1866 <= ap_const_lv16_FF80;
            end if; 
        end if;
    end process;

    acc_V_60_0_reg_1151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_60_0_reg_1151 <= acc_60_V_fu_3888_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_60_0_reg_1151 <= ap_const_lv16_200;
            end if; 
        end if;
    end process;

    acc_V_61_0_reg_1138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_61_0_reg_1138 <= acc_61_V_fu_3894_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_61_0_reg_1138 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_62_0_reg_1125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_62_0_reg_1125 <= acc_62_V_fu_3900_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_62_0_reg_1125 <= ap_const_lv16_300;
            end if; 
        end if;
    end process;

    acc_V_63_0_reg_1112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_63_0_reg_1112 <= acc_63_V_reg_5815;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_63_0_reg_1112 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_6_0_reg_1853_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_6_0_reg_1853 <= acc_6_V_fu_3564_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_6_0_reg_1853 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_7_0_reg_1840_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_7_0_reg_1840 <= acc_7_V_fu_3570_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_7_0_reg_1840 <= ap_const_lv16_FF00;
            end if; 
        end if;
    end process;

    acc_V_8_0_reg_1827_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_8_0_reg_1827 <= acc_8_V_fu_3576_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_8_0_reg_1827 <= ap_const_lv16_FF80;
            end if; 
        end if;
    end process;

    acc_V_9_0_reg_1814_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_9_0_reg_1814 <= acc_9_V_fu_3582_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_9_0_reg_1814 <= ap_const_lv16_FF80;
            end if; 
        end if;
    end process;

    i1_0_i_reg_1100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln245_fu_1986_p2 = ap_const_lv1_0))) then 
                i1_0_i_reg_1100 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i1_0_i_reg_1100 <= i1_reg_4717;
            end if; 
        end if;
    end process;

    i_0_i_reg_1089_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                i_0_i_reg_1089 <= i_reg_4709;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_1089 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_ic_0_i_reg_1955_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                i_ic_0_i_reg_1955 <= i_ic_reg_6138;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                i_ic_0_i_reg_1955 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    in_index_reg_1944_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln336_fu_2093_p2 = ap_const_lv1_0))) then 
                in_index_reg_1944 <= ir_fu_2099_p2;
            elsif (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                in_index_reg_1944 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    pX_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                if ((ap_const_boolean_1 = ap_condition_1306)) then 
                    pX_2 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_1023)) then 
                    pX_2 <= add_ln290_fu_3928_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                if ((ap_const_boolean_1 = ap_condition_1216)) then 
                    pY_2 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_1034)) then 
                    pY_2 <= add_ln285_fu_3968_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                sX_2 <= select_ln292_reg_6152;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (((ap_const_lv1_0 = and_ln255_2_reg_4759) and (icmp_ln277_fu_3923_p2 = ap_const_lv1_1)) or ((icmp_ln277_fu_3923_p2 = ap_const_lv1_1) and (icmp_ln266_fu_3906_p2 = ap_const_lv1_1))))) then 
                sX_2 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    storemerge_i_reg_1966_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (((ap_const_lv1_0 = and_ln255_2_reg_4759) and (icmp_ln281_fu_3963_p2 = ap_const_lv1_1) and (icmp_ln277_fu_3923_p2 = ap_const_lv1_1)) or ((icmp_ln281_fu_3963_p2 = ap_const_lv1_1) and (icmp_ln277_fu_3923_p2 = ap_const_lv1_1) and (icmp_ln266_fu_3906_p2 = ap_const_lv1_1))))) then 
                storemerge_i_reg_1966 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                storemerge_i_reg_1966 <= select_ln287_reg_6160;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter3_reg = ap_const_lv1_0))) then
                acc_63_V_reg_5815 <= acc_63_V_fu_2956_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                and_ln255_2_reg_4759 <= and_ln255_2_fu_2087_p2;
                icmp_ln255_1_reg_4742 <= icmp_ln255_1_fu_2029_p2;
                icmp_ln255_reg_4732 <= icmp_ln255_fu_2019_p2;
                pX_2_load_reg_4753 <= pX_2;
                pY_2_load_reg_4747 <= pY_2;
                sX_2_load_reg_4727 <= sX_2;
                sY_2_load_reg_4737 <= sY_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((data_V_V_empty_n = ap_const_logic_0) and (icmp_ln247_fu_1998_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                i1_reg_4717 <= i1_fu_2004_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln255_2_reg_4759) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                i_ic_reg_6138 <= i_ic_fu_3912_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_4709 <= i_fu_1992_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and ((ap_const_lv1_0 = and_ln255_2_reg_4759) or (icmp_ln266_fu_3906_p2 = ap_const_lv1_1)))) then
                icmp_ln277_reg_6148 <= icmp_ln277_fu_3923_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln336_reg_4763 <= icmp_ln336_fu_2093_p2;
                icmp_ln336_reg_4763_pp0_iter1_reg <= icmp_ln336_reg_4763;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln336_reg_4763_pp0_iter2_reg <= icmp_ln336_reg_4763_pp0_iter1_reg;
                icmp_ln336_reg_4763_pp0_iter3_reg <= icmp_ln336_reg_4763_pp0_iter2_reg;
                icmp_ln336_reg_4763_pp0_iter4_reg <= icmp_ln336_reg_4763_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln336_reg_4763 = ap_const_lv1_0))) then
                layer_in_V_7_load_reg_4782 <= layer_in_V_7_q0;
                tmp_10_reg_4832 <= w9_V_q0(59 downto 54);
                tmp_11_reg_4837 <= w9_V_q0(65 downto 60);
                tmp_12_reg_4842 <= w9_V_q0(71 downto 66);
                tmp_13_reg_4847 <= w9_V_q0(77 downto 72);
                tmp_14_reg_4852 <= w9_V_q0(83 downto 78);
                tmp_15_reg_4857 <= w9_V_q0(89 downto 84);
                tmp_16_reg_4862 <= w9_V_q0(95 downto 90);
                tmp_17_reg_4867 <= w9_V_q0(101 downto 96);
                tmp_18_reg_4872 <= w9_V_q0(107 downto 102);
                tmp_19_reg_4877 <= w9_V_q0(113 downto 108);
                tmp_1_reg_4792 <= w9_V_q0(11 downto 6);
                tmp_20_reg_4882 <= w9_V_q0(119 downto 114);
                tmp_21_reg_4887 <= w9_V_q0(125 downto 120);
                tmp_22_reg_4892 <= w9_V_q0(131 downto 126);
                tmp_23_reg_4897 <= w9_V_q0(137 downto 132);
                tmp_24_reg_4902 <= w9_V_q0(143 downto 138);
                tmp_25_reg_4907 <= w9_V_q0(149 downto 144);
                tmp_26_reg_4912 <= w9_V_q0(155 downto 150);
                tmp_27_reg_4917 <= w9_V_q0(161 downto 156);
                tmp_28_reg_4922 <= w9_V_q0(167 downto 162);
                tmp_29_reg_4927 <= w9_V_q0(173 downto 168);
                tmp_2_reg_4797 <= w9_V_q0(17 downto 12);
                tmp_30_reg_4932 <= w9_V_q0(179 downto 174);
                tmp_31_reg_4937 <= w9_V_q0(185 downto 180);
                tmp_32_reg_4942 <= w9_V_q0(191 downto 186);
                tmp_33_reg_4947 <= w9_V_q0(197 downto 192);
                tmp_34_reg_4952 <= w9_V_q0(203 downto 198);
                tmp_35_reg_4957 <= w9_V_q0(209 downto 204);
                tmp_36_reg_4962 <= w9_V_q0(215 downto 210);
                tmp_37_reg_4967 <= w9_V_q0(221 downto 216);
                tmp_38_reg_4972 <= w9_V_q0(227 downto 222);
                tmp_39_reg_4977 <= w9_V_q0(233 downto 228);
                tmp_3_reg_4802 <= w9_V_q0(23 downto 18);
                tmp_40_reg_4982 <= w9_V_q0(239 downto 234);
                tmp_41_reg_4987 <= w9_V_q0(245 downto 240);
                tmp_42_reg_4992 <= w9_V_q0(251 downto 246);
                tmp_43_reg_4997 <= w9_V_q0(257 downto 252);
                tmp_44_reg_5002 <= w9_V_q0(263 downto 258);
                tmp_45_reg_5007 <= w9_V_q0(269 downto 264);
                tmp_46_reg_5012 <= w9_V_q0(275 downto 270);
                tmp_47_reg_5017 <= w9_V_q0(281 downto 276);
                tmp_48_reg_5022 <= w9_V_q0(287 downto 282);
                tmp_49_reg_5027 <= w9_V_q0(293 downto 288);
                tmp_4_reg_4807 <= w9_V_q0(29 downto 24);
                tmp_50_reg_5032 <= w9_V_q0(299 downto 294);
                tmp_51_reg_5037 <= w9_V_q0(305 downto 300);
                tmp_52_reg_5042 <= w9_V_q0(311 downto 306);
                tmp_53_reg_5047 <= w9_V_q0(317 downto 312);
                tmp_54_reg_5052 <= w9_V_q0(323 downto 318);
                tmp_55_reg_5057 <= w9_V_q0(329 downto 324);
                tmp_56_reg_5062 <= w9_V_q0(335 downto 330);
                tmp_57_reg_5067 <= w9_V_q0(341 downto 336);
                tmp_58_reg_5072 <= w9_V_q0(347 downto 342);
                tmp_59_reg_5077 <= w9_V_q0(353 downto 348);
                tmp_5_reg_4812 <= w9_V_q0(35 downto 30);
                tmp_60_reg_5082 <= w9_V_q0(359 downto 354);
                tmp_61_reg_5087 <= w9_V_q0(365 downto 360);
                tmp_62_reg_5092 <= w9_V_q0(371 downto 366);
                tmp_63_reg_5097 <= w9_V_q0(377 downto 372);
                tmp_64_reg_5102 <= w9_V_q0(382 downto 378);
                tmp_6_reg_4817 <= w9_V_q0(41 downto 36);
                tmp_7_reg_4822 <= w9_V_q0(47 downto 42);
                tmp_8_reg_4827 <= w9_V_q0(53 downto 48);
                trunc_ln344_reg_4787 <= trunc_ln344_fu_2111_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln336_reg_4763_pp0_iter3_reg = ap_const_lv1_0))) then
                mul_ln1118_10_reg_5530 <= grp_fu_4044_p2;
                mul_ln1118_11_reg_5535 <= grp_fu_4050_p2;
                mul_ln1118_12_reg_5540 <= grp_fu_4056_p2;
                mul_ln1118_13_reg_5545 <= grp_fu_4062_p2;
                mul_ln1118_14_reg_5550 <= grp_fu_4068_p2;
                mul_ln1118_15_reg_5555 <= grp_fu_4074_p2;
                mul_ln1118_16_reg_5560 <= grp_fu_4080_p2;
                mul_ln1118_17_reg_5565 <= grp_fu_4086_p2;
                mul_ln1118_18_reg_5570 <= grp_fu_4092_p2;
                mul_ln1118_19_reg_5575 <= grp_fu_4098_p2;
                mul_ln1118_20_reg_5580 <= grp_fu_4104_p2;
                mul_ln1118_21_reg_5585 <= grp_fu_4110_p2;
                mul_ln1118_22_reg_5590 <= grp_fu_4116_p2;
                mul_ln1118_23_reg_5595 <= grp_fu_4122_p2;
                mul_ln1118_24_reg_5600 <= grp_fu_4128_p2;
                mul_ln1118_25_reg_5605 <= grp_fu_4134_p2;
                mul_ln1118_26_reg_5610 <= grp_fu_4140_p2;
                mul_ln1118_27_reg_5615 <= grp_fu_4146_p2;
                mul_ln1118_28_reg_5620 <= grp_fu_4152_p2;
                mul_ln1118_29_reg_5625 <= grp_fu_4158_p2;
                mul_ln1118_30_reg_5630 <= grp_fu_4164_p2;
                mul_ln1118_31_reg_5635 <= grp_fu_4170_p2;
                mul_ln1118_32_reg_5640 <= grp_fu_4176_p2;
                mul_ln1118_33_reg_5645 <= grp_fu_4182_p2;
                mul_ln1118_34_reg_5650 <= grp_fu_4188_p2;
                mul_ln1118_35_reg_5655 <= grp_fu_4194_p2;
                mul_ln1118_36_reg_5660 <= grp_fu_4200_p2;
                mul_ln1118_37_reg_5665 <= grp_fu_4206_p2;
                mul_ln1118_38_reg_5670 <= grp_fu_4212_p2;
                mul_ln1118_39_reg_5675 <= grp_fu_4218_p2;
                mul_ln1118_40_reg_5680 <= grp_fu_4224_p2;
                mul_ln1118_41_reg_5685 <= grp_fu_4230_p2;
                mul_ln1118_42_reg_5690 <= grp_fu_4236_p2;
                mul_ln1118_43_reg_5695 <= grp_fu_4242_p2;
                mul_ln1118_44_reg_5700 <= grp_fu_4248_p2;
                mul_ln1118_45_reg_5705 <= grp_fu_4254_p2;
                mul_ln1118_46_reg_5710 <= grp_fu_4260_p2;
                mul_ln1118_47_reg_5715 <= grp_fu_4266_p2;
                mul_ln1118_48_reg_5720 <= grp_fu_4272_p2;
                mul_ln1118_49_reg_5725 <= grp_fu_4278_p2;
                mul_ln1118_50_reg_5730 <= grp_fu_4284_p2;
                mul_ln1118_51_reg_5735 <= grp_fu_4290_p2;
                mul_ln1118_52_reg_5740 <= grp_fu_4296_p2;
                mul_ln1118_53_reg_5745 <= grp_fu_4302_p2;
                mul_ln1118_54_reg_5750 <= grp_fu_4308_p2;
                mul_ln1118_55_reg_5755 <= grp_fu_4314_p2;
                mul_ln1118_56_reg_5760 <= grp_fu_4320_p2;
                mul_ln1118_57_reg_5765 <= grp_fu_4326_p2;
                mul_ln1118_58_reg_5770 <= grp_fu_4332_p2;
                mul_ln1118_59_reg_5775 <= grp_fu_4338_p2;
                mul_ln1118_5_reg_5505 <= grp_fu_4014_p2;
                mul_ln1118_60_reg_5780 <= grp_fu_4344_p2;
                mul_ln1118_61_reg_5785 <= grp_fu_4350_p2;
                mul_ln1118_62_reg_5790 <= grp_fu_4356_p2;
                mul_ln1118_63_reg_5795 <= grp_fu_4362_p2;
                mul_ln1118_64_reg_5800 <= grp_fu_4368_p2;
                mul_ln1118_65_reg_5805 <= grp_fu_4374_p2;
                mul_ln1118_66_reg_5810 <= grp_fu_4380_p2;
                mul_ln1118_6_reg_5510 <= grp_fu_4020_p2;
                mul_ln1118_7_reg_5515 <= grp_fu_4026_p2;
                mul_ln1118_8_reg_5520 <= grp_fu_4032_p2;
                mul_ln1118_9_reg_5525 <= grp_fu_4038_p2;
                mul_ln1118_reg_5500 <= grp_fu_4008_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                res_pack_V_reg_6165 <= layer_out_i_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) and (icmp_ln277_reg_6148 = ap_const_lv1_1))) then
                sY_2 <= storemerge_i_reg_1966;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (((ap_const_lv1_0 = and_ln255_2_reg_4759) and (icmp_ln281_fu_3963_p2 = ap_const_lv1_0) and (icmp_ln277_fu_3923_p2 = ap_const_lv1_1)) or ((icmp_ln281_fu_3963_p2 = ap_const_lv1_0) and (icmp_ln277_fu_3923_p2 = ap_const_lv1_1) and (icmp_ln266_fu_3906_p2 = ap_const_lv1_1))))) then
                select_ln287_reg_6160 <= select_ln287_fu_3984_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (((ap_const_lv1_0 = and_ln255_2_reg_4759) and (icmp_ln277_fu_3923_p2 = ap_const_lv1_0)) or ((icmp_ln277_fu_3923_p2 = ap_const_lv1_0) and (icmp_ln266_fu_3906_p2 = ap_const_lv1_1))))) then
                select_ln292_reg_6152 <= select_ln292_fu_3944_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((data_V_V_empty_n = ap_const_logic_0) and (icmp_ln247_fu_1998_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln247_fu_1998_p2 = ap_const_lv1_0))) then
                tmp_V_reg_4722 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln336_reg_4763_pp0_iter2_reg = ap_const_lv1_0))) then
                trunc_ln708_62_reg_5495 <= grp_fu_2940_p2(20 downto 5);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, data_V_V_empty_n, res_V_V_full_n, ap_CS_fsm_state3, icmp_ln247_fu_1998_p2, ap_CS_fsm_state46, ap_CS_fsm_state2, ap_CS_fsm_state5, grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done, and_ln255_2_fu_2087_p2, and_ln255_2_reg_4759, icmp_ln336_fu_2093_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_CS_fsm_state44, icmp_ln266_fu_3906_p2, icmp_ln277_fu_3923_p2, icmp_ln281_fu_3963_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, icmp_ln245_fu_1986_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln245_fu_1986_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((data_V_V_empty_n = ap_const_logic_0) and (icmp_ln247_fu_1998_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln247_fu_1998_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif ((not(((data_V_V_empty_n = ap_const_logic_0) and (icmp_ln247_fu_1998_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln247_fu_1998_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_lv1_1 = and_ln255_2_fu_2087_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln255_2_fu_2087_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln336_fu_2093_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln336_fu_2093_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (((ap_const_lv1_0 = and_ln255_2_reg_4759) and (icmp_ln281_fu_3963_p2 = ap_const_lv1_1) and (icmp_ln277_fu_3923_p2 = ap_const_lv1_1)) or ((icmp_ln281_fu_3963_p2 = ap_const_lv1_1) and (icmp_ln277_fu_3923_p2 = ap_const_lv1_1) and (icmp_ln266_fu_3906_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (((ap_const_lv1_0 = and_ln255_2_reg_4759) and (icmp_ln281_fu_3963_p2 = ap_const_lv1_0) and (icmp_ln277_fu_3923_p2 = ap_const_lv1_1)) or ((icmp_ln281_fu_3963_p2 = ap_const_lv1_0) and (icmp_ln277_fu_3923_p2 = ap_const_lv1_1) and (icmp_ln266_fu_3906_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (((ap_const_lv1_0 = and_ln255_2_reg_4759) and (icmp_ln277_fu_3923_p2 = ap_const_lv1_0)) or ((icmp_ln277_fu_3923_p2 = ap_const_lv1_0) and (icmp_ln266_fu_3906_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    acc_0_V_fu_3528_p2 <= std_logic_vector(unsigned(acc_V_0_0_reg_1931) + unsigned(trunc_ln_fu_2961_p4));
    acc_10_V_fu_3588_p2 <= std_logic_vector(unsigned(acc_V_10_0_reg_1801) + unsigned(trunc_ln708_s_fu_3051_p4));
    acc_11_V_fu_3594_p2 <= std_logic_vector(unsigned(acc_V_11_0_reg_1788) + unsigned(trunc_ln708_10_fu_3060_p4));
    acc_12_V_fu_3600_p2 <= std_logic_vector(unsigned(acc_V_12_0_reg_1775) + unsigned(trunc_ln708_11_fu_3069_p4));
    acc_13_V_fu_3606_p2 <= std_logic_vector(unsigned(acc_V_13_0_reg_1762) + unsigned(trunc_ln708_12_fu_3078_p4));
    acc_14_V_fu_3612_p2 <= std_logic_vector(unsigned(acc_V_14_0_reg_1749) + unsigned(trunc_ln708_13_fu_3087_p4));
    acc_15_V_fu_3618_p2 <= std_logic_vector(unsigned(acc_V_15_0_reg_1736) + unsigned(trunc_ln708_14_fu_3096_p4));
    acc_16_V_fu_3624_p2 <= std_logic_vector(unsigned(acc_V_16_0_reg_1723) + unsigned(trunc_ln708_15_fu_3105_p4));
    acc_17_V_fu_3630_p2 <= std_logic_vector(unsigned(acc_V_17_0_reg_1710) + unsigned(trunc_ln708_16_fu_3114_p4));
    acc_18_V_fu_3636_p2 <= std_logic_vector(unsigned(acc_V_18_0_reg_1697) + unsigned(trunc_ln708_17_fu_3123_p4));
    acc_19_V_fu_3642_p2 <= std_logic_vector(unsigned(acc_V_19_0_reg_1684) + unsigned(trunc_ln708_18_fu_3132_p4));
    acc_1_V_fu_3534_p2 <= std_logic_vector(unsigned(acc_V_1_0_reg_1918) + unsigned(trunc_ln708_1_fu_2970_p4));
    acc_20_V_fu_3648_p2 <= std_logic_vector(unsigned(acc_V_20_0_reg_1671) + unsigned(trunc_ln708_19_fu_3141_p4));
    acc_21_V_fu_3654_p2 <= std_logic_vector(unsigned(acc_V_21_0_reg_1658) + unsigned(trunc_ln708_20_fu_3150_p4));
    acc_22_V_fu_3660_p2 <= std_logic_vector(unsigned(acc_V_22_0_reg_1645) + unsigned(trunc_ln708_21_fu_3159_p4));
    acc_23_V_fu_3666_p2 <= std_logic_vector(unsigned(acc_V_23_0_reg_1632) + unsigned(trunc_ln708_22_fu_3168_p4));
    acc_24_V_fu_3672_p2 <= std_logic_vector(unsigned(acc_V_24_0_reg_1619) + unsigned(trunc_ln708_23_fu_3177_p4));
    acc_25_V_fu_3678_p2 <= std_logic_vector(unsigned(acc_V_25_0_reg_1606) + unsigned(trunc_ln708_24_fu_3186_p4));
    acc_26_V_fu_3684_p2 <= std_logic_vector(unsigned(acc_V_26_0_reg_1593) + unsigned(trunc_ln708_25_fu_3195_p4));
    acc_27_V_fu_3690_p2 <= std_logic_vector(unsigned(acc_V_27_0_reg_1580) + unsigned(trunc_ln708_26_fu_3204_p4));
    acc_28_V_fu_3696_p2 <= std_logic_vector(unsigned(acc_V_28_0_reg_1567) + unsigned(trunc_ln708_27_fu_3213_p4));
    acc_29_V_fu_3702_p2 <= std_logic_vector(unsigned(acc_V_29_0_reg_1554) + unsigned(trunc_ln708_28_fu_3222_p4));
    acc_2_V_fu_3540_p2 <= std_logic_vector(unsigned(acc_V_2_0_reg_1905) + unsigned(trunc_ln708_2_fu_2979_p4));
    acc_30_V_fu_3708_p2 <= std_logic_vector(unsigned(acc_V_30_0_reg_1541) + unsigned(trunc_ln708_29_fu_3231_p4));
    acc_31_V_fu_3714_p2 <= std_logic_vector(unsigned(acc_V_31_0_reg_1528) + unsigned(trunc_ln708_30_fu_3240_p4));
    acc_32_V_fu_3720_p2 <= std_logic_vector(unsigned(acc_V_32_0_reg_1515) + unsigned(trunc_ln708_31_fu_3249_p4));
    acc_33_V_fu_3726_p2 <= std_logic_vector(unsigned(acc_V_33_0_reg_1502) + unsigned(trunc_ln708_32_fu_3258_p4));
    acc_34_V_fu_3732_p2 <= std_logic_vector(unsigned(acc_V_34_0_reg_1489) + unsigned(trunc_ln708_33_fu_3267_p4));
    acc_35_V_fu_3738_p2 <= std_logic_vector(unsigned(acc_V_35_0_reg_1476) + unsigned(trunc_ln708_34_fu_3276_p4));
    acc_36_V_fu_3744_p2 <= std_logic_vector(unsigned(acc_V_36_0_reg_1463) + unsigned(trunc_ln708_35_fu_3285_p4));
    acc_37_V_fu_3750_p2 <= std_logic_vector(unsigned(acc_V_37_0_reg_1450) + unsigned(trunc_ln708_36_fu_3294_p4));
    acc_38_V_fu_3756_p2 <= std_logic_vector(unsigned(acc_V_38_0_reg_1437) + unsigned(trunc_ln708_37_fu_3303_p4));
    acc_39_V_fu_3762_p2 <= std_logic_vector(unsigned(acc_V_39_0_reg_1424) + unsigned(trunc_ln708_38_fu_3312_p4));
    acc_3_V_fu_3546_p2 <= std_logic_vector(unsigned(acc_V_3_0_reg_1892) + unsigned(trunc_ln708_3_fu_2988_p4));
    acc_40_V_fu_3768_p2 <= std_logic_vector(unsigned(acc_V_40_0_reg_1411) + unsigned(trunc_ln708_39_fu_3321_p4));
    acc_41_V_fu_3774_p2 <= std_logic_vector(unsigned(acc_V_41_0_reg_1398) + unsigned(trunc_ln708_40_fu_3330_p4));
    acc_42_V_fu_3780_p2 <= std_logic_vector(unsigned(acc_V_42_0_reg_1385) + unsigned(trunc_ln708_41_fu_3339_p4));
    acc_43_V_fu_3786_p2 <= std_logic_vector(unsigned(acc_V_43_0_reg_1372) + unsigned(trunc_ln708_42_fu_3348_p4));
    acc_44_V_fu_3792_p2 <= std_logic_vector(unsigned(acc_V_44_0_reg_1359) + unsigned(trunc_ln708_43_fu_3357_p4));
    acc_45_V_fu_3798_p2 <= std_logic_vector(unsigned(acc_V_45_0_reg_1346) + unsigned(trunc_ln708_44_fu_3366_p4));
    acc_46_V_fu_3804_p2 <= std_logic_vector(unsigned(acc_V_46_0_reg_1333) + unsigned(trunc_ln708_45_fu_3375_p4));
    acc_47_V_fu_3810_p2 <= std_logic_vector(unsigned(acc_V_47_0_reg_1320) + unsigned(trunc_ln708_46_fu_3384_p4));
    acc_48_V_fu_3816_p2 <= std_logic_vector(unsigned(acc_V_48_0_reg_1307) + unsigned(trunc_ln708_47_fu_3393_p4));
    acc_49_V_fu_3822_p2 <= std_logic_vector(unsigned(acc_V_49_0_reg_1294) + unsigned(trunc_ln708_48_fu_3402_p4));
    acc_4_V_fu_3552_p2 <= std_logic_vector(unsigned(acc_V_4_0_reg_1879) + unsigned(trunc_ln708_4_fu_2997_p4));
    acc_50_V_fu_3828_p2 <= std_logic_vector(unsigned(acc_V_50_0_reg_1281) + unsigned(trunc_ln708_49_fu_3411_p4));
    acc_51_V_fu_3834_p2 <= std_logic_vector(unsigned(acc_V_51_0_reg_1268) + unsigned(trunc_ln708_50_fu_3420_p4));
    acc_52_V_fu_3840_p2 <= std_logic_vector(unsigned(acc_V_52_0_reg_1255) + unsigned(trunc_ln708_51_fu_3429_p4));
    acc_53_V_fu_3846_p2 <= std_logic_vector(unsigned(acc_V_53_0_reg_1242) + unsigned(trunc_ln708_52_fu_3438_p4));
    acc_54_V_fu_3852_p2 <= std_logic_vector(unsigned(acc_V_54_0_reg_1229) + unsigned(trunc_ln708_53_fu_3447_p4));
    acc_55_V_fu_3858_p2 <= std_logic_vector(unsigned(acc_V_55_0_reg_1216) + unsigned(trunc_ln708_54_fu_3456_p4));
    acc_56_V_fu_3864_p2 <= std_logic_vector(unsigned(acc_V_56_0_reg_1203) + unsigned(trunc_ln708_55_fu_3465_p4));
    acc_57_V_fu_3870_p2 <= std_logic_vector(unsigned(acc_V_57_0_reg_1190) + unsigned(trunc_ln708_56_fu_3474_p4));
    acc_58_V_fu_3876_p2 <= std_logic_vector(unsigned(acc_V_58_0_reg_1177) + unsigned(trunc_ln708_57_fu_3483_p4));
    acc_59_V_fu_3882_p2 <= std_logic_vector(unsigned(acc_V_59_0_reg_1164) + unsigned(trunc_ln708_58_fu_3492_p4));
    acc_5_V_fu_3558_p2 <= std_logic_vector(unsigned(acc_V_5_0_reg_1866) + unsigned(trunc_ln708_5_fu_3006_p4));
    acc_60_V_fu_3888_p2 <= std_logic_vector(unsigned(acc_V_60_0_reg_1151) + unsigned(trunc_ln708_59_fu_3501_p4));
    acc_61_V_fu_3894_p2 <= std_logic_vector(unsigned(acc_V_61_0_reg_1138) + unsigned(trunc_ln708_60_fu_3510_p4));
    acc_62_V_fu_3900_p2 <= std_logic_vector(unsigned(acc_V_62_0_reg_1125) + unsigned(trunc_ln708_61_fu_3519_p4));
    acc_63_V_fu_2956_p2 <= std_logic_vector(unsigned(ap_phi_mux_acc_V_63_0_phi_fu_1117_p4) + unsigned(trunc_ln708_62_reg_5495));
    acc_6_V_fu_3564_p2 <= std_logic_vector(unsigned(acc_V_6_0_reg_1853) + unsigned(trunc_ln708_6_fu_3015_p4));
    acc_7_V_fu_3570_p2 <= std_logic_vector(unsigned(acc_V_7_0_reg_1840) + unsigned(trunc_ln708_7_fu_3024_p4));
    acc_8_V_fu_3576_p2 <= std_logic_vector(unsigned(acc_V_8_0_reg_1827) + unsigned(trunc_ln708_8_fu_3033_p4));
    acc_9_V_fu_3582_p2 <= std_logic_vector(unsigned(acc_V_9_0_reg_1814) + unsigned(trunc_ln708_9_fu_3042_p4));
    add_ln285_fu_3968_p2 <= std_logic_vector(unsigned(pY_2_load_reg_4747) + unsigned(ap_const_lv32_1));
    add_ln287_fu_3979_p2 <= std_logic_vector(unsigned(sY_2_load_reg_4737) + unsigned(ap_const_lv32_1));
    add_ln290_fu_3928_p2 <= std_logic_vector(unsigned(pX_2_load_reg_4753) + unsigned(ap_const_lv32_1));
    add_ln292_fu_3939_p2 <= std_logic_vector(unsigned(sX_2_load_reg_4727) + unsigned(ap_const_lv32_1));
    and_ln255_1_fu_2081_p2 <= (icmp_ln255_3_fu_2069_p2 and icmp_ln255_2_fu_2049_p2);
    and_ln255_2_fu_2087_p2 <= (and_ln255_fu_2075_p2 and and_ln255_1_fu_2081_p2);
    and_ln255_fu_2075_p2 <= (icmp_ln255_fu_2019_p2 and icmp_ln255_1_fu_2029_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(6);
    ap_CS_fsm_state13 <= ap_CS_fsm(7);
    ap_CS_fsm_state14 <= ap_CS_fsm(8);
    ap_CS_fsm_state15 <= ap_CS_fsm(9);
    ap_CS_fsm_state16 <= ap_CS_fsm(10);
    ap_CS_fsm_state17 <= ap_CS_fsm(11);
    ap_CS_fsm_state18 <= ap_CS_fsm(12);
    ap_CS_fsm_state19 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(14);
    ap_CS_fsm_state21 <= ap_CS_fsm(15);
    ap_CS_fsm_state22 <= ap_CS_fsm(16);
    ap_CS_fsm_state23 <= ap_CS_fsm(17);
    ap_CS_fsm_state24 <= ap_CS_fsm(18);
    ap_CS_fsm_state25 <= ap_CS_fsm(19);
    ap_CS_fsm_state26 <= ap_CS_fsm(20);
    ap_CS_fsm_state27 <= ap_CS_fsm(21);
    ap_CS_fsm_state28 <= ap_CS_fsm(22);
    ap_CS_fsm_state29 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(24);
    ap_CS_fsm_state31 <= ap_CS_fsm(25);
    ap_CS_fsm_state32 <= ap_CS_fsm(26);
    ap_CS_fsm_state33 <= ap_CS_fsm(27);
    ap_CS_fsm_state34 <= ap_CS_fsm(28);
    ap_CS_fsm_state35 <= ap_CS_fsm(29);
    ap_CS_fsm_state36 <= ap_CS_fsm(30);
    ap_CS_fsm_state37 <= ap_CS_fsm(31);
    ap_CS_fsm_state38 <= ap_CS_fsm(32);
    ap_CS_fsm_state39 <= ap_CS_fsm(33);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(34);
    ap_CS_fsm_state41 <= ap_CS_fsm(35);
    ap_CS_fsm_state42 <= ap_CS_fsm(36);
    ap_CS_fsm_state43 <= ap_CS_fsm(37);
    ap_CS_fsm_state44 <= ap_CS_fsm(38);
    ap_CS_fsm_state45 <= ap_CS_fsm(39);
    ap_CS_fsm_state46 <= ap_CS_fsm(40);
    ap_CS_fsm_state47 <= ap_CS_fsm(41);
    ap_CS_fsm_state48 <= ap_CS_fsm(42);
    ap_CS_fsm_state49 <= ap_CS_fsm(43);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_assign_proc : process(data_V_V_empty_n, icmp_ln247_fu_1998_p2)
    begin
                ap_block_state3 <= ((data_V_V_empty_n = ap_const_logic_0) and (icmp_ln247_fu_1998_p2 = ap_const_lv1_0));
    end process;


    ap_block_state3_ignore_call0_assign_proc : process(data_V_V_empty_n, icmp_ln247_fu_1998_p2)
    begin
                ap_block_state3_ignore_call0 <= ((data_V_V_empty_n = ap_const_logic_0) and (icmp_ln247_fu_1998_p2 = ap_const_lv1_0));
    end process;

        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1023_assign_proc : process(and_ln255_2_reg_4759, icmp_ln266_fu_3906_p2, icmp_ln277_fu_3923_p2)
    begin
                ap_condition_1023 <= (((ap_const_lv1_0 = and_ln255_2_reg_4759) and (icmp_ln277_fu_3923_p2 = ap_const_lv1_0)) or ((icmp_ln277_fu_3923_p2 = ap_const_lv1_0) and (icmp_ln266_fu_3906_p2 = ap_const_lv1_1)));
    end process;


    ap_condition_1034_assign_proc : process(and_ln255_2_reg_4759, icmp_ln266_fu_3906_p2, icmp_ln277_fu_3923_p2, icmp_ln281_fu_3963_p2)
    begin
                ap_condition_1034 <= (((ap_const_lv1_0 = and_ln255_2_reg_4759) and (icmp_ln281_fu_3963_p2 = ap_const_lv1_0) and (icmp_ln277_fu_3923_p2 = ap_const_lv1_1)) or ((icmp_ln281_fu_3963_p2 = ap_const_lv1_0) and (icmp_ln277_fu_3923_p2 = ap_const_lv1_1) and (icmp_ln266_fu_3906_p2 = ap_const_lv1_1)));
    end process;


    ap_condition_1216_assign_proc : process(and_ln255_2_reg_4759, icmp_ln266_fu_3906_p2, icmp_ln277_fu_3923_p2, icmp_ln281_fu_3963_p2)
    begin
                ap_condition_1216 <= (((ap_const_lv1_0 = and_ln255_2_reg_4759) and (icmp_ln281_fu_3963_p2 = ap_const_lv1_1) and (icmp_ln277_fu_3923_p2 = ap_const_lv1_1)) or ((icmp_ln281_fu_3963_p2 = ap_const_lv1_1) and (icmp_ln277_fu_3923_p2 = ap_const_lv1_1) and (icmp_ln266_fu_3906_p2 = ap_const_lv1_1)));
    end process;


    ap_condition_1306_assign_proc : process(and_ln255_2_reg_4759, icmp_ln266_fu_3906_p2, icmp_ln277_fu_3923_p2)
    begin
                ap_condition_1306 <= (((ap_const_lv1_0 = and_ln255_2_reg_4759) and (icmp_ln277_fu_3923_p2 = ap_const_lv1_1)) or ((icmp_ln277_fu_3923_p2 = ap_const_lv1_1) and (icmp_ln266_fu_3906_p2 = ap_const_lv1_1)));
    end process;


    ap_condition_pp0_exit_iter0_state6_assign_proc : process(icmp_ln336_fu_2093_p2)
    begin
        if ((icmp_ln336_fu_2093_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln245_fu_1986_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln245_fu_1986_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_acc_V_63_0_phi_fu_1117_p4_assign_proc : process(acc_V_63_0_reg_1112, icmp_ln336_reg_4763_pp0_iter4_reg, acc_63_V_reg_5815, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_4763_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_acc_V_63_0_phi_fu_1117_p4 <= acc_63_V_reg_5815;
        else 
            ap_phi_mux_acc_V_63_0_phi_fu_1117_p4 <= acc_V_63_0_reg_1112;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data_V_V_blk_n_assign_proc : process(data_V_V_empty_n, ap_CS_fsm_state3, icmp_ln247_fu_1998_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln247_fu_1998_p2 = ap_const_lv1_0))) then 
            data_V_V_blk_n <= data_V_V_empty_n;
        else 
            data_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_V_read_assign_proc : process(data_V_V_empty_n, ap_CS_fsm_state3, icmp_ln247_fu_1998_p2)
    begin
        if ((not(((data_V_V_empty_n = ap_const_logic_0) and (icmp_ln247_fu_1998_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln247_fu_1998_p2 = ap_const_lv1_0))) then 
            data_V_V_read <= ap_const_logic_1;
        else 
            data_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_start <= grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_ap_start_reg;
    grp_fu_2940_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4008_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4014_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4020_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4026_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4032_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4038_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4044_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4050_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4056_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4062_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4068_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4074_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4080_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4086_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4092_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4098_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4104_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4110_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4116_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4122_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4128_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4134_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4140_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4146_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4152_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4158_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4164_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4170_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4176_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4182_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4188_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4194_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4200_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4206_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4212_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4218_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4224_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4230_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4236_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4242_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4248_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4254_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4260_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4266_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4272_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4278_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4284_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4290_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4296_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4302_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4308_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4314_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4320_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4326_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4332_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4338_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4344_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4350_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4356_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4362_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4368_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4374_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    grp_fu_4380_p1 <= sext_ln1116_cast_fu_2745_p1(16 - 1 downto 0);
    i1_fu_2004_p2 <= std_logic_vector(unsigned(i1_0_i_reg_1100) + unsigned(ap_const_lv6_1));
    i_fu_1992_p2 <= std_logic_vector(unsigned(i_0_i_reg_1089) + unsigned(ap_const_lv9_1));
    i_ic_fu_3912_p2 <= std_logic_vector(unsigned(i_ic_0_i_reg_1955) + unsigned(ap_const_lv7_1));
    icmp_ln245_fu_1986_p2 <= "1" when (i_0_i_reg_1089 = ap_const_lv9_121) else "0";
    icmp_ln247_fu_1998_p2 <= "1" when (i1_0_i_reg_1100 = ap_const_lv6_20) else "0";
    icmp_ln255_1_fu_2029_p2 <= "1" when (sY_2 = ap_const_lv32_2) else "0";
    icmp_ln255_2_fu_2049_p2 <= "1" when (signed(tmp_9_fu_2039_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln255_3_fu_2069_p2 <= "1" when (signed(tmp_65_fu_2059_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln255_fu_2019_p2 <= "1" when (sX_2 = ap_const_lv32_2) else "0";
    icmp_ln266_fu_3906_p2 <= "1" when (i_ic_0_i_reg_1955 = ap_const_lv7_40) else "0";
    icmp_ln277_fu_3923_p2 <= "1" when (pX_2_load_reg_4753 = ap_const_lv32_10) else "0";
    icmp_ln281_fu_3963_p2 <= "1" when (pY_2_load_reg_4747 = ap_const_lv32_10) else "0";
    icmp_ln336_fu_2093_p2 <= "1" when (in_index_reg_1944 = ap_const_lv9_120) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln245_fu_1986_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln245_fu_1986_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ir_fu_2099_p2 <= std_logic_vector(unsigned(in_index_reg_1944) + unsigned(ap_const_lv9_1));

    layer_in_V_7_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_output_V_address0, ap_block_pp0_stage0, zext_ln344_fu_2105_p1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            layer_in_V_7_address0 <= zext_ln344_fu_2105_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_in_V_7_address0 <= grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_output_V_address0;
        else 
            layer_in_V_7_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    layer_in_V_7_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_output_V_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer_in_V_7_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_in_V_7_ce0 <= grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_output_V_ce0;
        else 
            layer_in_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_V_7_we0_assign_proc : process(ap_CS_fsm_state5, grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_output_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_in_V_7_we0 <= grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_output_V_we0;
        else 
            layer_in_V_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_out_i_address0_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state43, zext_ln268_fu_3918_p1, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            layer_out_i_address0 <= zext_ln268_fu_3918_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            layer_out_i_address0 <= ap_const_lv64_3E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer_out_i_address0 <= ap_const_lv64_3C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            layer_out_i_address0 <= ap_const_lv64_3A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            layer_out_i_address0 <= ap_const_lv64_38(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            layer_out_i_address0 <= ap_const_lv64_36(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            layer_out_i_address0 <= ap_const_lv64_34(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer_out_i_address0 <= ap_const_lv64_32(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            layer_out_i_address0 <= ap_const_lv64_30(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            layer_out_i_address0 <= ap_const_lv64_2E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            layer_out_i_address0 <= ap_const_lv64_2C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            layer_out_i_address0 <= ap_const_lv64_2A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer_out_i_address0 <= ap_const_lv64_28(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            layer_out_i_address0 <= ap_const_lv64_26(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            layer_out_i_address0 <= ap_const_lv64_24(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            layer_out_i_address0 <= ap_const_lv64_22(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            layer_out_i_address0 <= ap_const_lv64_20(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer_out_i_address0 <= ap_const_lv64_1E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            layer_out_i_address0 <= ap_const_lv64_1C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            layer_out_i_address0 <= ap_const_lv64_1A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_out_i_address0 <= ap_const_lv64_18(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            layer_out_i_address0 <= ap_const_lv64_16(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer_out_i_address0 <= ap_const_lv64_14(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            layer_out_i_address0 <= ap_const_lv64_12(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            layer_out_i_address0 <= ap_const_lv64_10(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            layer_out_i_address0 <= ap_const_lv64_E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            layer_out_i_address0 <= ap_const_lv64_C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            layer_out_i_address0 <= ap_const_lv64_A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            layer_out_i_address0 <= ap_const_lv64_8(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            layer_out_i_address0 <= ap_const_lv64_6(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            layer_out_i_address0 <= ap_const_lv64_4(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            layer_out_i_address0 <= ap_const_lv64_2(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            layer_out_i_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            layer_out_i_address0 <= "XXXXXX";
        end if; 
    end process;


    layer_out_i_address1_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            layer_out_i_address1 <= ap_const_lv64_3F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer_out_i_address1 <= ap_const_lv64_3D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            layer_out_i_address1 <= ap_const_lv64_3B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            layer_out_i_address1 <= ap_const_lv64_39(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            layer_out_i_address1 <= ap_const_lv64_37(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            layer_out_i_address1 <= ap_const_lv64_35(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer_out_i_address1 <= ap_const_lv64_33(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            layer_out_i_address1 <= ap_const_lv64_31(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            layer_out_i_address1 <= ap_const_lv64_2F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            layer_out_i_address1 <= ap_const_lv64_2D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            layer_out_i_address1 <= ap_const_lv64_2B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer_out_i_address1 <= ap_const_lv64_29(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            layer_out_i_address1 <= ap_const_lv64_27(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            layer_out_i_address1 <= ap_const_lv64_25(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            layer_out_i_address1 <= ap_const_lv64_23(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            layer_out_i_address1 <= ap_const_lv64_21(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer_out_i_address1 <= ap_const_lv64_1F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            layer_out_i_address1 <= ap_const_lv64_1D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            layer_out_i_address1 <= ap_const_lv64_1B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_out_i_address1 <= ap_const_lv64_19(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            layer_out_i_address1 <= ap_const_lv64_17(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer_out_i_address1 <= ap_const_lv64_15(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            layer_out_i_address1 <= ap_const_lv64_13(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            layer_out_i_address1 <= ap_const_lv64_11(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            layer_out_i_address1 <= ap_const_lv64_F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            layer_out_i_address1 <= ap_const_lv64_D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            layer_out_i_address1 <= ap_const_lv64_B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            layer_out_i_address1 <= ap_const_lv64_9(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            layer_out_i_address1 <= ap_const_lv64_7(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            layer_out_i_address1 <= ap_const_lv64_5(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            layer_out_i_address1 <= ap_const_lv64_3(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            layer_out_i_address1 <= ap_const_lv64_1(6 - 1 downto 0);
        else 
            layer_out_i_address1 <= "XXXXXX";
        end if; 
    end process;


    layer_out_i_ce0_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state43, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            layer_out_i_ce0 <= ap_const_logic_1;
        else 
            layer_out_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_out_i_ce1_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            layer_out_i_ce1 <= ap_const_logic_1;
        else 
            layer_out_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    layer_out_i_d0_assign_proc : process(acc_V_62_0_reg_1125, acc_V_60_0_reg_1151, acc_V_58_0_reg_1177, acc_V_56_0_reg_1203, acc_V_54_0_reg_1229, acc_V_52_0_reg_1255, acc_V_50_0_reg_1281, acc_V_48_0_reg_1307, acc_V_46_0_reg_1333, acc_V_44_0_reg_1359, acc_V_42_0_reg_1385, acc_V_40_0_reg_1411, acc_V_38_0_reg_1437, acc_V_36_0_reg_1463, acc_V_34_0_reg_1489, acc_V_32_0_reg_1515, acc_V_30_0_reg_1541, acc_V_28_0_reg_1567, acc_V_26_0_reg_1593, acc_V_24_0_reg_1619, acc_V_22_0_reg_1645, acc_V_20_0_reg_1671, acc_V_18_0_reg_1697, acc_V_16_0_reg_1723, acc_V_14_0_reg_1749, acc_V_12_0_reg_1775, acc_V_10_0_reg_1801, acc_V_8_0_reg_1827, acc_V_6_0_reg_1853, acc_V_4_0_reg_1879, acc_V_2_0_reg_1905, acc_V_0_0_reg_1931, ap_CS_fsm_state43, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            layer_out_i_d0 <= acc_V_62_0_reg_1125;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer_out_i_d0 <= acc_V_60_0_reg_1151;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            layer_out_i_d0 <= acc_V_58_0_reg_1177;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            layer_out_i_d0 <= acc_V_56_0_reg_1203;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            layer_out_i_d0 <= acc_V_54_0_reg_1229;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            layer_out_i_d0 <= acc_V_52_0_reg_1255;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer_out_i_d0 <= acc_V_50_0_reg_1281;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            layer_out_i_d0 <= acc_V_48_0_reg_1307;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            layer_out_i_d0 <= acc_V_46_0_reg_1333;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            layer_out_i_d0 <= acc_V_44_0_reg_1359;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            layer_out_i_d0 <= acc_V_42_0_reg_1385;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer_out_i_d0 <= acc_V_40_0_reg_1411;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            layer_out_i_d0 <= acc_V_38_0_reg_1437;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            layer_out_i_d0 <= acc_V_36_0_reg_1463;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            layer_out_i_d0 <= acc_V_34_0_reg_1489;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            layer_out_i_d0 <= acc_V_32_0_reg_1515;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer_out_i_d0 <= acc_V_30_0_reg_1541;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            layer_out_i_d0 <= acc_V_28_0_reg_1567;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            layer_out_i_d0 <= acc_V_26_0_reg_1593;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_out_i_d0 <= acc_V_24_0_reg_1619;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            layer_out_i_d0 <= acc_V_22_0_reg_1645;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer_out_i_d0 <= acc_V_20_0_reg_1671;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            layer_out_i_d0 <= acc_V_18_0_reg_1697;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            layer_out_i_d0 <= acc_V_16_0_reg_1723;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            layer_out_i_d0 <= acc_V_14_0_reg_1749;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            layer_out_i_d0 <= acc_V_12_0_reg_1775;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            layer_out_i_d0 <= acc_V_10_0_reg_1801;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            layer_out_i_d0 <= acc_V_8_0_reg_1827;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            layer_out_i_d0 <= acc_V_6_0_reg_1853;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            layer_out_i_d0 <= acc_V_4_0_reg_1879;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            layer_out_i_d0 <= acc_V_2_0_reg_1905;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            layer_out_i_d0 <= acc_V_0_0_reg_1931;
        else 
            layer_out_i_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    layer_out_i_d1_assign_proc : process(acc_V_63_0_reg_1112, acc_V_61_0_reg_1138, acc_V_59_0_reg_1164, acc_V_57_0_reg_1190, acc_V_55_0_reg_1216, acc_V_53_0_reg_1242, acc_V_51_0_reg_1268, acc_V_49_0_reg_1294, acc_V_47_0_reg_1320, acc_V_45_0_reg_1346, acc_V_43_0_reg_1372, acc_V_41_0_reg_1398, acc_V_39_0_reg_1424, acc_V_37_0_reg_1450, acc_V_35_0_reg_1476, acc_V_33_0_reg_1502, acc_V_31_0_reg_1528, acc_V_29_0_reg_1554, acc_V_27_0_reg_1580, acc_V_25_0_reg_1606, acc_V_23_0_reg_1632, acc_V_21_0_reg_1658, acc_V_19_0_reg_1684, acc_V_17_0_reg_1710, acc_V_15_0_reg_1736, acc_V_13_0_reg_1762, acc_V_11_0_reg_1788, acc_V_9_0_reg_1814, acc_V_7_0_reg_1840, acc_V_5_0_reg_1866, acc_V_3_0_reg_1892, acc_V_1_0_reg_1918, ap_CS_fsm_state43, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            layer_out_i_d1 <= acc_V_63_0_reg_1112;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer_out_i_d1 <= acc_V_61_0_reg_1138;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            layer_out_i_d1 <= acc_V_59_0_reg_1164;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            layer_out_i_d1 <= acc_V_57_0_reg_1190;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            layer_out_i_d1 <= acc_V_55_0_reg_1216;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            layer_out_i_d1 <= acc_V_53_0_reg_1242;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer_out_i_d1 <= acc_V_51_0_reg_1268;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            layer_out_i_d1 <= acc_V_49_0_reg_1294;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            layer_out_i_d1 <= acc_V_47_0_reg_1320;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            layer_out_i_d1 <= acc_V_45_0_reg_1346;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            layer_out_i_d1 <= acc_V_43_0_reg_1372;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer_out_i_d1 <= acc_V_41_0_reg_1398;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            layer_out_i_d1 <= acc_V_39_0_reg_1424;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            layer_out_i_d1 <= acc_V_37_0_reg_1450;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            layer_out_i_d1 <= acc_V_35_0_reg_1476;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            layer_out_i_d1 <= acc_V_33_0_reg_1502;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer_out_i_d1 <= acc_V_31_0_reg_1528;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            layer_out_i_d1 <= acc_V_29_0_reg_1554;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            layer_out_i_d1 <= acc_V_27_0_reg_1580;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_out_i_d1 <= acc_V_25_0_reg_1606;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            layer_out_i_d1 <= acc_V_23_0_reg_1632;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer_out_i_d1 <= acc_V_21_0_reg_1658;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            layer_out_i_d1 <= acc_V_19_0_reg_1684;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            layer_out_i_d1 <= acc_V_17_0_reg_1710;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            layer_out_i_d1 <= acc_V_15_0_reg_1736;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            layer_out_i_d1 <= acc_V_13_0_reg_1762;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            layer_out_i_d1 <= acc_V_11_0_reg_1788;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            layer_out_i_d1 <= acc_V_9_0_reg_1814;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            layer_out_i_d1 <= acc_V_7_0_reg_1840;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            layer_out_i_d1 <= acc_V_5_0_reg_1866;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            layer_out_i_d1 <= acc_V_3_0_reg_1892;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            layer_out_i_d1 <= acc_V_1_0_reg_1918;
        else 
            layer_out_i_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    layer_out_i_we0_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            layer_out_i_we0 <= ap_const_logic_1;
        else 
            layer_out_i_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_out_i_we1_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            layer_out_i_we1 <= ap_const_logic_1;
        else 
            layer_out_i_we1 <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_V_blk_n_assign_proc : process(res_V_V_full_n, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            res_V_V_blk_n <= res_V_V_full_n;
        else 
            res_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_V_din <= res_pack_V_reg_6165;

    res_V_V_write_assign_proc : process(res_V_V_full_n, ap_CS_fsm_state46)
    begin
        if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            res_V_V_write <= ap_const_logic_1;
        else 
            res_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln287_fu_3984_p3 <= 
        ap_const_lv32_2 when (icmp_ln255_1_reg_4742(0) = '1') else 
        add_ln287_fu_3979_p2;
    select_ln292_fu_3944_p3 <= 
        ap_const_lv32_2 when (icmp_ln255_reg_4732(0) = '1') else 
        add_ln292_fu_3939_p2;
        sext_ln1116_cast_fu_2745_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(layer_in_V_7_load_reg_4782),21));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_65_fu_2059_p4 <= pX_2(31 downto 1);
    tmp_9_fu_2039_p4 <= pY_2(31 downto 1);

    tmpdata_V_address0_assign_proc : process(ap_CS_fsm_state5, grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_data_V_address0, ap_CS_fsm_state4, zext_ln249_fu_2010_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmpdata_V_address0 <= zext_ln249_fu_2010_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmpdata_V_address0 <= grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_data_V_address0;
        else 
            tmpdata_V_address0 <= "XXXXX";
        end if; 
    end process;


    tmpdata_V_ce0_assign_proc : process(ap_CS_fsm_state5, grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_data_V_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmpdata_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmpdata_V_ce0 <= grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config9_s_fu_1977_data_V_ce0;
        else 
            tmpdata_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmpdata_V_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmpdata_V_we0 <= ap_const_logic_1;
        else 
            tmpdata_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln344_fu_2111_p1 <= w9_V_q0(6 - 1 downto 0);
    trunc_ln708_10_fu_3060_p4 <= mul_ln1118_15_reg_5555(20 downto 5);
    trunc_ln708_11_fu_3069_p4 <= mul_ln1118_16_reg_5560(20 downto 5);
    trunc_ln708_12_fu_3078_p4 <= mul_ln1118_17_reg_5565(20 downto 5);
    trunc_ln708_13_fu_3087_p4 <= mul_ln1118_18_reg_5570(20 downto 5);
    trunc_ln708_14_fu_3096_p4 <= mul_ln1118_19_reg_5575(20 downto 5);
    trunc_ln708_15_fu_3105_p4 <= mul_ln1118_20_reg_5580(20 downto 5);
    trunc_ln708_16_fu_3114_p4 <= mul_ln1118_21_reg_5585(20 downto 5);
    trunc_ln708_17_fu_3123_p4 <= mul_ln1118_22_reg_5590(20 downto 5);
    trunc_ln708_18_fu_3132_p4 <= mul_ln1118_23_reg_5595(20 downto 5);
    trunc_ln708_19_fu_3141_p4 <= mul_ln1118_24_reg_5600(20 downto 5);
    trunc_ln708_1_fu_2970_p4 <= mul_ln1118_5_reg_5505(20 downto 5);
    trunc_ln708_20_fu_3150_p4 <= mul_ln1118_25_reg_5605(20 downto 5);
    trunc_ln708_21_fu_3159_p4 <= mul_ln1118_26_reg_5610(20 downto 5);
    trunc_ln708_22_fu_3168_p4 <= mul_ln1118_27_reg_5615(20 downto 5);
    trunc_ln708_23_fu_3177_p4 <= mul_ln1118_28_reg_5620(20 downto 5);
    trunc_ln708_24_fu_3186_p4 <= mul_ln1118_29_reg_5625(20 downto 5);
    trunc_ln708_25_fu_3195_p4 <= mul_ln1118_30_reg_5630(20 downto 5);
    trunc_ln708_26_fu_3204_p4 <= mul_ln1118_31_reg_5635(20 downto 5);
    trunc_ln708_27_fu_3213_p4 <= mul_ln1118_32_reg_5640(20 downto 5);
    trunc_ln708_28_fu_3222_p4 <= mul_ln1118_33_reg_5645(20 downto 5);
    trunc_ln708_29_fu_3231_p4 <= mul_ln1118_34_reg_5650(20 downto 5);
    trunc_ln708_2_fu_2979_p4 <= mul_ln1118_6_reg_5510(20 downto 5);
    trunc_ln708_30_fu_3240_p4 <= mul_ln1118_35_reg_5655(20 downto 5);
    trunc_ln708_31_fu_3249_p4 <= mul_ln1118_36_reg_5660(20 downto 5);
    trunc_ln708_32_fu_3258_p4 <= mul_ln1118_37_reg_5665(20 downto 5);
    trunc_ln708_33_fu_3267_p4 <= mul_ln1118_38_reg_5670(20 downto 5);
    trunc_ln708_34_fu_3276_p4 <= mul_ln1118_39_reg_5675(20 downto 5);
    trunc_ln708_35_fu_3285_p4 <= mul_ln1118_40_reg_5680(20 downto 5);
    trunc_ln708_36_fu_3294_p4 <= mul_ln1118_41_reg_5685(20 downto 5);
    trunc_ln708_37_fu_3303_p4 <= mul_ln1118_42_reg_5690(20 downto 5);
    trunc_ln708_38_fu_3312_p4 <= mul_ln1118_43_reg_5695(20 downto 5);
    trunc_ln708_39_fu_3321_p4 <= mul_ln1118_44_reg_5700(20 downto 5);
    trunc_ln708_3_fu_2988_p4 <= mul_ln1118_7_reg_5515(20 downto 5);
    trunc_ln708_40_fu_3330_p4 <= mul_ln1118_45_reg_5705(20 downto 5);
    trunc_ln708_41_fu_3339_p4 <= mul_ln1118_46_reg_5710(20 downto 5);
    trunc_ln708_42_fu_3348_p4 <= mul_ln1118_47_reg_5715(20 downto 5);
    trunc_ln708_43_fu_3357_p4 <= mul_ln1118_48_reg_5720(20 downto 5);
    trunc_ln708_44_fu_3366_p4 <= mul_ln1118_49_reg_5725(20 downto 5);
    trunc_ln708_45_fu_3375_p4 <= mul_ln1118_50_reg_5730(20 downto 5);
    trunc_ln708_46_fu_3384_p4 <= mul_ln1118_51_reg_5735(20 downto 5);
    trunc_ln708_47_fu_3393_p4 <= mul_ln1118_52_reg_5740(20 downto 5);
    trunc_ln708_48_fu_3402_p4 <= mul_ln1118_53_reg_5745(20 downto 5);
    trunc_ln708_49_fu_3411_p4 <= mul_ln1118_54_reg_5750(20 downto 5);
    trunc_ln708_4_fu_2997_p4 <= mul_ln1118_8_reg_5520(20 downto 5);
    trunc_ln708_50_fu_3420_p4 <= mul_ln1118_55_reg_5755(20 downto 5);
    trunc_ln708_51_fu_3429_p4 <= mul_ln1118_56_reg_5760(20 downto 5);
    trunc_ln708_52_fu_3438_p4 <= mul_ln1118_57_reg_5765(20 downto 5);
    trunc_ln708_53_fu_3447_p4 <= mul_ln1118_58_reg_5770(20 downto 5);
    trunc_ln708_54_fu_3456_p4 <= mul_ln1118_59_reg_5775(20 downto 5);
    trunc_ln708_55_fu_3465_p4 <= mul_ln1118_60_reg_5780(20 downto 5);
    trunc_ln708_56_fu_3474_p4 <= mul_ln1118_61_reg_5785(20 downto 5);
    trunc_ln708_57_fu_3483_p4 <= mul_ln1118_62_reg_5790(20 downto 5);
    trunc_ln708_58_fu_3492_p4 <= mul_ln1118_63_reg_5795(20 downto 5);
    trunc_ln708_59_fu_3501_p4 <= mul_ln1118_64_reg_5800(20 downto 5);
    trunc_ln708_5_fu_3006_p4 <= mul_ln1118_9_reg_5525(20 downto 5);
    trunc_ln708_60_fu_3510_p4 <= mul_ln1118_65_reg_5805(20 downto 5);
    trunc_ln708_61_fu_3519_p4 <= mul_ln1118_66_reg_5810(20 downto 5);
    trunc_ln708_6_fu_3015_p4 <= mul_ln1118_10_reg_5530(20 downto 5);
    trunc_ln708_7_fu_3024_p4 <= mul_ln1118_11_reg_5535(20 downto 5);
    trunc_ln708_8_fu_3033_p4 <= mul_ln1118_12_reg_5540(20 downto 5);
    trunc_ln708_9_fu_3042_p4 <= mul_ln1118_13_reg_5545(20 downto 5);
    trunc_ln708_s_fu_3051_p4 <= mul_ln1118_14_reg_5550(20 downto 5);
    trunc_ln_fu_2961_p4 <= mul_ln1118_reg_5500(20 downto 5);
    w9_V_address0 <= zext_ln344_fu_2105_p1(9 - 1 downto 0);

    w9_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w9_V_ce0 <= ap_const_logic_1;
        else 
            w9_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln249_fu_2010_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_i_reg_1100),64));
    zext_ln268_fu_3918_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_ic_0_i_reg_1955),64));
    zext_ln344_fu_2105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_index_reg_1944),64));
end behav;
