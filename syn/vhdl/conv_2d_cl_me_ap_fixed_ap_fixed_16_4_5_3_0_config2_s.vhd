-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_V_empty_n : IN STD_LOGIC;
    data_V_V_read : OUT STD_LOGIC;
    res_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_V_full_n : IN STD_LOGIC;
    res_V_V_write : OUT STD_LOGIC );
end;


architecture behav of conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv16_180 : STD_LOGIC_VECTOR (15 downto 0) := "0000000110000000";
    constant ap_const_lv16_100 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_const_lv16_FF80 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110000000";
    constant ap_const_lv16_80 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_const_lv16_FF00 : STD_LOGIC_VECTOR (15 downto 0) := "1111111100000000";
    constant ap_const_lv16_FE80 : STD_LOGIC_VECTOR (15 downto 0) := "1111111010000000";
    constant ap_const_lv16_200 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv11_484 : STD_LOGIC_VECTOR (10 downto 0) := "10010000100";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_95 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010101";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_9B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011011";
    constant ap_const_lv32_9C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011100";
    constant ap_const_lv32_A1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100001";
    constant ap_const_lv32_A2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100010";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_AD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101101";
    constant ap_const_lv32_AE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101110";
    constant ap_const_lv32_B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110011";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv32_B9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111001";
    constant ap_const_lv32_BA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111010";
    constant ap_const_lv32_BE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111110";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer_in_V_9_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer_in_V_9_ce0 : STD_LOGIC;
    signal layer_in_V_9_we0 : STD_LOGIC;
    signal layer_in_V_9_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sX_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pX_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal w2_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal w2_V_ce0 : STD_LOGIC;
    signal w2_V_q0 : STD_LOGIC_VECTOR (190 downto 0);
    signal data_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln247_fu_1130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal acc_V_31_0_reg_660 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_30_0_reg_673 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_29_0_reg_686 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_28_0_reg_699 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_27_0_reg_712 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_26_0_reg_725 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_25_0_reg_738 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_24_0_reg_751 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_23_0_reg_764 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_22_0_reg_777 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_21_0_reg_790 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_20_0_reg_803 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_19_0_reg_816 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_18_0_reg_829 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_17_0_reg_842 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_16_0_reg_855 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_15_0_reg_868 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_14_0_reg_881 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_13_0_reg_894 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_12_0_reg_907 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_11_0_reg_920 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_10_0_reg_933 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_9_0_reg_946 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_8_0_reg_959 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_7_0_reg_972 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_6_0_reg_985 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_5_0_reg_998 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_4_0_reg_1011 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_3_0_reg_1024 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_2_0_reg_1037 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_1_0_reg_1050 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_0_0_reg_1063 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_index_reg_1076 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_fu_1124_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_2593 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i1_fu_1136_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i1_reg_2601 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal tmp_V_reg_2606 : STD_LOGIC_VECTOR (15 downto 0);
    signal sX_4_load_reg_2611 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_ready : STD_LOGIC;
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done : STD_LOGIC;
    signal icmp_ln255_fu_1151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln255_reg_2616 : STD_LOGIC_VECTOR (0 downto 0);
    signal sY_4_load_reg_2621 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln255_7_fu_1161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln255_7_reg_2626 : STD_LOGIC_VECTOR (0 downto 0);
    signal pY_4_load_reg_2631 : STD_LOGIC_VECTOR (31 downto 0);
    signal pX_4_load_reg_2637 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln255_6_fu_1219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln255_6_reg_2643 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln336_fu_1225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln336_reg_2647 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln336_reg_2647_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln336_reg_2647_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln336_reg_2647_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln336_reg_2647_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ir_fu_1231_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal layer_in_V_9_load_reg_2666 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln344_fu_1243_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln344_reg_2671 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_96_reg_2676 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_97_reg_2681 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_98_reg_2686 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_99_reg_2691 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_100_reg_2696 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_101_reg_2701 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_102_reg_2706 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_103_reg_2711 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_104_reg_2716 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_105_reg_2721 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_106_reg_2726 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_107_reg_2731 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_108_reg_2736 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_109_reg_2741 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_110_reg_2746 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_111_reg_2751 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_112_reg_2756 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_113_reg_2761 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_114_reg_2766 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_115_reg_2771 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_116_reg_2776 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_117_reg_2781 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_118_reg_2786 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_119_reg_2791 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_120_reg_2796 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_121_reg_2801 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_122_reg_2806 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_123_reg_2811 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_124_reg_2816 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_125_reg_2821 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_126_reg_2826 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln1116_cast_fu_1557_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln708_31_reg_3027 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2244_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_reg_3032 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2250_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_99_reg_3037 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2256_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_100_reg_3042 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2262_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_101_reg_3047 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2268_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_102_reg_3052 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2274_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_103_reg_3057 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2280_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_104_reg_3062 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2286_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_105_reg_3067 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2292_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_106_reg_3072 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2298_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_107_reg_3077 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2304_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_108_reg_3082 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2310_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_109_reg_3087 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2316_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_110_reg_3092 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2322_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_111_reg_3097 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2328_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_112_reg_3102 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2334_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_113_reg_3107 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2340_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_114_reg_3112 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2346_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_115_reg_3117 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2352_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_116_reg_3122 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2358_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_117_reg_3127 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2364_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_118_reg_3132 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2370_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_119_reg_3137 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2376_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_120_reg_3142 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2382_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_121_reg_3147 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2388_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_122_reg_3152 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2394_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_123_reg_3157 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2400_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_124_reg_3162 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2406_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_125_reg_3167 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2412_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_126_reg_3172 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2418_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_127_reg_3177 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2424_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_128_reg_3182 : STD_LOGIC_VECTOR (20 downto 0);
    signal acc_31_V_fu_1672_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_31_V_reg_3187 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal acc_0_V_fu_1956_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal acc_1_V_fu_1962_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_2_V_fu_1968_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_3_V_fu_1974_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_4_V_fu_1980_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_5_V_fu_1986_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_6_V_fu_1992_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_7_V_fu_1998_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_8_V_fu_2004_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_9_V_fu_2010_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_10_V_fu_2016_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_11_V_fu_2022_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_12_V_fu_2028_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_13_V_fu_2034_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_14_V_fu_2040_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_15_V_fu_2046_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_16_V_fu_2052_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_17_V_fu_2058_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_18_V_fu_2064_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_19_V_fu_2070_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_20_V_fu_2076_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_21_V_fu_2082_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_22_V_fu_2088_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_23_V_fu_2094_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_24_V_fu_2100_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_25_V_fu_2106_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_26_V_fu_2112_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_27_V_fu_2118_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_28_V_fu_2124_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_29_V_fu_2130_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_30_V_fu_2136_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_ic_fu_2148_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_ic_reg_3350 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal icmp_ln266_fu_2142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln277_fu_2159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln277_reg_3360 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln292_fu_2180_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln292_reg_3364 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln287_fu_2220_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln287_reg_3372 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln281_fu_2199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal layer_out_i_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_pack_V_reg_3377 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal tmpdata_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmpdata_V_ce0 : STD_LOGIC;
    signal tmpdata_V_we0 : STD_LOGIC;
    signal tmpdata_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_out_i_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer_out_i_ce0 : STD_LOGIC;
    signal layer_out_i_we0 : STD_LOGIC;
    signal layer_out_i_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_out_i_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer_out_i_ce1 : STD_LOGIC;
    signal layer_out_i_we1 : STD_LOGIC;
    signal layer_out_i_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_start : STD_LOGIC;
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_idle : STD_LOGIC;
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_data_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_data_V_ce0 : STD_LOGIC;
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_output_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_output_V_ce0 : STD_LOGIC;
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_output_V_we0 : STD_LOGIC;
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_output_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_0_i_reg_637 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal i1_0_i_reg_648 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln245_fu_1118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_acc_V_31_0_phi_fu_665_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_ic_0_i_reg_1087 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal storemerge_i_reg_1098 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state3_ignore_call0 : BOOLEAN;
    signal zext_ln249_fu_1142_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln344_fu_1237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln268_fu_2154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal add_ln285_fu_2204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln290_fu_2164_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_127_fu_1171_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_128_fu_1191_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln255_8_fu_1181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln255_9_fu_1201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln255_5_fu_1213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln255_fu_1207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1656_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1656_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln_fu_1677_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_1_fu_1686_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_2_fu_1695_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_3_fu_1704_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_4_fu_1713_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_5_fu_1722_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_6_fu_1731_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_7_fu_1740_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_8_fu_1749_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_9_fu_1758_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_10_fu_1767_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_11_fu_1776_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_12_fu_1785_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_13_fu_1794_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_14_fu_1803_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_15_fu_1812_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_16_fu_1821_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_17_fu_1830_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_18_fu_1839_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_19_fu_1848_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_20_fu_1857_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_21_fu_1866_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_22_fu_1875_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_23_fu_1884_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_24_fu_1893_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_25_fu_1902_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_26_fu_1911_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_27_fu_1920_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_28_fu_1929_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_29_fu_1938_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_30_fu_1947_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln292_fu_2175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln287_fu_2215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2244_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2250_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2256_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2262_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2268_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2274_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2280_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2286_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2292_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2298_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2304_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2310_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2316_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2322_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2328_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2334_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2340_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2346_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2352_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2358_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2364_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2370_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2376_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2382_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2388_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2394_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2400_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2406_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2412_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2418_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2424_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_623 : BOOLEAN;
    signal ap_condition_839 : BOOLEAN;
    signal ap_condition_634 : BOOLEAN;
    signal ap_condition_781 : BOOLEAN;

    component cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        data_V_ce0 : OUT STD_LOGIC;
        data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_axi_mul_5s_16s_21_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component myproject_axi_mul_mul_6s_16s_21_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config2_s_layecud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config2_s_w2_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (190 downto 0) );
    end component;


    component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config2_s_tmpddEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config2_s_layeeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    layer_in_V_9_U : component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config2_s_layecud
    generic map (
        DataWidth => 16,
        AddressRange => 27,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_in_V_9_address0,
        ce0 => layer_in_V_9_ce0,
        we0 => layer_in_V_9_we0,
        d0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_output_V_d0,
        q0 => layer_in_V_9_q0);

    w2_V_U : component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config2_s_w2_V
    generic map (
        DataWidth => 191,
        AddressRange => 27,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w2_V_address0,
        ce0 => w2_V_ce0,
        q0 => w2_V_q0);

    tmpdata_V_U : component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config2_s_tmpddEe
    generic map (
        DataWidth => 16,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmpdata_V_address0,
        ce0 => tmpdata_V_ce0,
        we0 => tmpdata_V_we0,
        d0 => tmp_V_reg_2606,
        q0 => tmpdata_V_q0);

    layer_out_i_U : component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config2_s_layeeOg
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_out_i_address0,
        ce0 => layer_out_i_ce0,
        we0 => layer_out_i_we0,
        d0 => layer_out_i_d0,
        q0 => layer_out_i_q0,
        address1 => layer_out_i_address1,
        ce1 => layer_out_i_ce1,
        we1 => layer_out_i_we1,
        d1 => layer_out_i_d1);

    grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109 : component cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_start,
        ap_done => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done,
        ap_idle => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_idle,
        ap_ready => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_ready,
        data_V_address0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_data_V_address0,
        data_V_ce0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_data_V_ce0,
        data_V_q0 => tmpdata_V_q0,
        output_V_address0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_output_V_address0,
        output_V_ce0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_output_V_ce0,
        output_V_we0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_output_V_we0,
        output_V_d0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_output_V_d0,
        output_V_q0 => layer_in_V_9_q0);

    myproject_axi_mul_5s_16s_21_2_1_U9 : component myproject_axi_mul_5s_16s_21_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 5,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_126_reg_2826,
        din1 => grp_fu_1656_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1656_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U10 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln344_reg_2671,
        din1 => grp_fu_2244_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2244_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U11 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_96_reg_2676,
        din1 => grp_fu_2250_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2250_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U12 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_97_reg_2681,
        din1 => grp_fu_2256_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2256_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U13 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_98_reg_2686,
        din1 => grp_fu_2262_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2262_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U14 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_99_reg_2691,
        din1 => grp_fu_2268_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2268_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U15 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_100_reg_2696,
        din1 => grp_fu_2274_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2274_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U16 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_101_reg_2701,
        din1 => grp_fu_2280_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2280_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U17 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_102_reg_2706,
        din1 => grp_fu_2286_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2286_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U18 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_103_reg_2711,
        din1 => grp_fu_2292_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2292_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U19 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_104_reg_2716,
        din1 => grp_fu_2298_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2298_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U20 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_105_reg_2721,
        din1 => grp_fu_2304_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2304_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U21 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_106_reg_2726,
        din1 => grp_fu_2310_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2310_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U22 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_107_reg_2731,
        din1 => grp_fu_2316_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2316_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U23 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_108_reg_2736,
        din1 => grp_fu_2322_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2322_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U24 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_109_reg_2741,
        din1 => grp_fu_2328_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2328_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U25 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_110_reg_2746,
        din1 => grp_fu_2334_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2334_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U26 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_111_reg_2751,
        din1 => grp_fu_2340_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2340_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U27 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_112_reg_2756,
        din1 => grp_fu_2346_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2346_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U28 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_113_reg_2761,
        din1 => grp_fu_2352_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2352_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U29 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_114_reg_2766,
        din1 => grp_fu_2358_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2358_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U30 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_115_reg_2771,
        din1 => grp_fu_2364_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2364_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U31 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_116_reg_2776,
        din1 => grp_fu_2370_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2370_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U32 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_117_reg_2781,
        din1 => grp_fu_2376_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2376_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U33 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_118_reg_2786,
        din1 => grp_fu_2382_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2382_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U34 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_119_reg_2791,
        din1 => grp_fu_2388_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2388_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U35 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_120_reg_2796,
        din1 => grp_fu_2394_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2394_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U36 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_121_reg_2801,
        din1 => grp_fu_2400_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2400_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U37 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_122_reg_2806,
        din1 => grp_fu_2406_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2406_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U38 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_123_reg_2811,
        din1 => grp_fu_2412_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2412_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U39 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_124_reg_2816,
        din1 => grp_fu_2418_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2418_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U40 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_125_reg_2821,
        din1 => grp_fu_2424_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2424_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln245_fu_1118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state6);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((icmp_ln247_fu_1130_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (icmp_ln247_fu_1130_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_ready = ap_const_logic_1)) then 
                    grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    acc_V_0_0_reg_1063_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_0_0_reg_1063 <= acc_0_V_fu_1956_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_0_0_reg_1063 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_10_0_reg_933_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_10_0_reg_933 <= acc_10_V_fu_2016_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_10_0_reg_933 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_11_0_reg_920_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_11_0_reg_920 <= acc_11_V_fu_2022_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_11_0_reg_920 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_12_0_reg_907_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_12_0_reg_907 <= acc_12_V_fu_2028_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_12_0_reg_907 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_13_0_reg_894_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_13_0_reg_894 <= acc_13_V_fu_2034_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_13_0_reg_894 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_14_0_reg_881_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_14_0_reg_881 <= acc_14_V_fu_2040_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_14_0_reg_881 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_15_0_reg_868_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_15_0_reg_868 <= acc_15_V_fu_2046_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_15_0_reg_868 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_16_0_reg_855_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_16_0_reg_855 <= acc_16_V_fu_2052_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_16_0_reg_855 <= ap_const_lv16_FF80;
            end if; 
        end if;
    end process;

    acc_V_17_0_reg_842_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_17_0_reg_842 <= acc_17_V_fu_2058_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_17_0_reg_842 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_18_0_reg_829_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_18_0_reg_829 <= acc_18_V_fu_2064_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_18_0_reg_829 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_19_0_reg_816_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_19_0_reg_816 <= acc_19_V_fu_2070_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_19_0_reg_816 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_1_0_reg_1050_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_1_0_reg_1050 <= acc_1_V_fu_1962_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_1_0_reg_1050 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_20_0_reg_803_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_20_0_reg_803 <= acc_20_V_fu_2076_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_20_0_reg_803 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_21_0_reg_790_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_21_0_reg_790 <= acc_21_V_fu_2082_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_21_0_reg_790 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_22_0_reg_777_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_22_0_reg_777 <= acc_22_V_fu_2088_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_22_0_reg_777 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_23_0_reg_764_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_23_0_reg_764 <= acc_23_V_fu_2094_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_23_0_reg_764 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_24_0_reg_751_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_24_0_reg_751 <= acc_24_V_fu_2100_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_24_0_reg_751 <= ap_const_lv16_FE80;
            end if; 
        end if;
    end process;

    acc_V_25_0_reg_738_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_25_0_reg_738 <= acc_25_V_fu_2106_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_25_0_reg_738 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_26_0_reg_725_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_26_0_reg_725 <= acc_26_V_fu_2112_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_26_0_reg_725 <= ap_const_lv16_FF00;
            end if; 
        end if;
    end process;

    acc_V_27_0_reg_712_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_27_0_reg_712 <= acc_27_V_fu_2118_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_27_0_reg_712 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_28_0_reg_699_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_28_0_reg_699 <= acc_28_V_fu_2124_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_28_0_reg_699 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_29_0_reg_686_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_29_0_reg_686 <= acc_29_V_fu_2130_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_29_0_reg_686 <= ap_const_lv16_FF80;
            end if; 
        end if;
    end process;

    acc_V_2_0_reg_1037_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_2_0_reg_1037 <= acc_2_V_fu_1968_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_2_0_reg_1037 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_30_0_reg_673_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_30_0_reg_673 <= acc_30_V_fu_2136_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_30_0_reg_673 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_31_0_reg_660_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_31_0_reg_660 <= acc_31_V_reg_3187;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_31_0_reg_660 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_3_0_reg_1024_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_3_0_reg_1024 <= acc_3_V_fu_1974_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_3_0_reg_1024 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_4_0_reg_1011_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_4_0_reg_1011 <= acc_4_V_fu_1980_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_4_0_reg_1011 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_5_0_reg_998_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_5_0_reg_998 <= acc_5_V_fu_1986_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_5_0_reg_998 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_V_6_0_reg_985_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_6_0_reg_985 <= acc_6_V_fu_1992_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_6_0_reg_985 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_V_7_0_reg_972_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_7_0_reg_972 <= acc_7_V_fu_1998_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_7_0_reg_972 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_8_0_reg_959_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_8_0_reg_959 <= acc_8_V_fu_2004_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_8_0_reg_959 <= ap_const_lv16_200;
            end if; 
        end if;
    end process;

    acc_V_9_0_reg_946_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_9_0_reg_946 <= acc_9_V_fu_2010_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_9_0_reg_946 <= ap_const_lv16_200;
            end if; 
        end if;
    end process;

    i1_0_i_reg_648_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln245_fu_1118_p2 = ap_const_lv1_0))) then 
                i1_0_i_reg_648 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i1_0_i_reg_648 <= i1_reg_2601;
            end if; 
        end if;
    end process;

    i_0_i_reg_637_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                i_0_i_reg_637 <= i_reg_2593;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_637 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    i_ic_0_i_reg_1087_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                i_ic_0_i_reg_1087 <= i_ic_reg_3350;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                i_ic_0_i_reg_1087 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    in_index_reg_1076_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln336_fu_1225_p2 = ap_const_lv1_0))) then 
                in_index_reg_1076 <= ir_fu_1231_p2;
            elsif (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                in_index_reg_1076 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    pX_4_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                if ((ap_const_boolean_1 = ap_condition_839)) then 
                    pX_4 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_623)) then 
                    pX_4 <= add_ln290_fu_2164_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_4_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                if ((ap_const_boolean_1 = ap_condition_781)) then 
                    pY_4 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_634)) then 
                    pY_4 <= add_ln285_fu_2204_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_4_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                sX_4 <= select_ln292_reg_3364;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (((icmp_ln277_fu_2159_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln255_6_reg_2643)) or ((icmp_ln277_fu_2159_p2 = ap_const_lv1_1) and (icmp_ln266_fu_2142_p2 = ap_const_lv1_1))))) then 
                sX_4 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    storemerge_i_reg_1098_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (((icmp_ln281_fu_2199_p2 = ap_const_lv1_1) and (icmp_ln277_fu_2159_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln255_6_reg_2643)) or ((icmp_ln281_fu_2199_p2 = ap_const_lv1_1) and (icmp_ln277_fu_2159_p2 = ap_const_lv1_1) and (icmp_ln266_fu_2142_p2 = ap_const_lv1_1))))) then 
                storemerge_i_reg_1098 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                storemerge_i_reg_1098 <= select_ln287_reg_3372;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter3_reg = ap_const_lv1_0))) then
                acc_31_V_reg_3187 <= acc_31_V_fu_1672_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                and_ln255_6_reg_2643 <= and_ln255_6_fu_1219_p2;
                icmp_ln255_7_reg_2626 <= icmp_ln255_7_fu_1161_p2;
                icmp_ln255_reg_2616 <= icmp_ln255_fu_1151_p2;
                pX_4_load_reg_2637 <= pX_4;
                pY_4_load_reg_2631 <= pY_4;
                sX_4_load_reg_2611 <= sX_4;
                sY_4_load_reg_2621 <= sY_4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln247_fu_1130_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                i1_reg_2601 <= i1_fu_1136_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln255_6_reg_2643) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                i_ic_reg_3350 <= i_ic_fu_2148_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_2593 <= i_fu_1124_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and ((icmp_ln266_fu_2142_p2 = ap_const_lv1_1) or (ap_const_lv1_0 = and_ln255_6_reg_2643)))) then
                icmp_ln277_reg_3360 <= icmp_ln277_fu_2159_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln336_reg_2647 <= icmp_ln336_fu_1225_p2;
                icmp_ln336_reg_2647_pp0_iter1_reg <= icmp_ln336_reg_2647;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln336_reg_2647_pp0_iter2_reg <= icmp_ln336_reg_2647_pp0_iter1_reg;
                icmp_ln336_reg_2647_pp0_iter3_reg <= icmp_ln336_reg_2647_pp0_iter2_reg;
                icmp_ln336_reg_2647_pp0_iter4_reg <= icmp_ln336_reg_2647_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln336_reg_2647 = ap_const_lv1_0))) then
                layer_in_V_9_load_reg_2666 <= layer_in_V_9_q0;
                tmp_100_reg_2696 <= w2_V_q0(35 downto 30);
                tmp_101_reg_2701 <= w2_V_q0(41 downto 36);
                tmp_102_reg_2706 <= w2_V_q0(47 downto 42);
                tmp_103_reg_2711 <= w2_V_q0(53 downto 48);
                tmp_104_reg_2716 <= w2_V_q0(59 downto 54);
                tmp_105_reg_2721 <= w2_V_q0(65 downto 60);
                tmp_106_reg_2726 <= w2_V_q0(71 downto 66);
                tmp_107_reg_2731 <= w2_V_q0(77 downto 72);
                tmp_108_reg_2736 <= w2_V_q0(83 downto 78);
                tmp_109_reg_2741 <= w2_V_q0(89 downto 84);
                tmp_110_reg_2746 <= w2_V_q0(95 downto 90);
                tmp_111_reg_2751 <= w2_V_q0(101 downto 96);
                tmp_112_reg_2756 <= w2_V_q0(107 downto 102);
                tmp_113_reg_2761 <= w2_V_q0(113 downto 108);
                tmp_114_reg_2766 <= w2_V_q0(119 downto 114);
                tmp_115_reg_2771 <= w2_V_q0(125 downto 120);
                tmp_116_reg_2776 <= w2_V_q0(131 downto 126);
                tmp_117_reg_2781 <= w2_V_q0(137 downto 132);
                tmp_118_reg_2786 <= w2_V_q0(143 downto 138);
                tmp_119_reg_2791 <= w2_V_q0(149 downto 144);
                tmp_120_reg_2796 <= w2_V_q0(155 downto 150);
                tmp_121_reg_2801 <= w2_V_q0(161 downto 156);
                tmp_122_reg_2806 <= w2_V_q0(167 downto 162);
                tmp_123_reg_2811 <= w2_V_q0(173 downto 168);
                tmp_124_reg_2816 <= w2_V_q0(179 downto 174);
                tmp_125_reg_2821 <= w2_V_q0(185 downto 180);
                tmp_126_reg_2826 <= w2_V_q0(190 downto 186);
                tmp_96_reg_2676 <= w2_V_q0(11 downto 6);
                tmp_97_reg_2681 <= w2_V_q0(17 downto 12);
                tmp_98_reg_2686 <= w2_V_q0(23 downto 18);
                tmp_99_reg_2691 <= w2_V_q0(29 downto 24);
                trunc_ln344_reg_2671 <= trunc_ln344_fu_1243_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln336_reg_2647_pp0_iter3_reg = ap_const_lv1_0))) then
                mul_ln1118_100_reg_3042 <= grp_fu_2256_p2;
                mul_ln1118_101_reg_3047 <= grp_fu_2262_p2;
                mul_ln1118_102_reg_3052 <= grp_fu_2268_p2;
                mul_ln1118_103_reg_3057 <= grp_fu_2274_p2;
                mul_ln1118_104_reg_3062 <= grp_fu_2280_p2;
                mul_ln1118_105_reg_3067 <= grp_fu_2286_p2;
                mul_ln1118_106_reg_3072 <= grp_fu_2292_p2;
                mul_ln1118_107_reg_3077 <= grp_fu_2298_p2;
                mul_ln1118_108_reg_3082 <= grp_fu_2304_p2;
                mul_ln1118_109_reg_3087 <= grp_fu_2310_p2;
                mul_ln1118_110_reg_3092 <= grp_fu_2316_p2;
                mul_ln1118_111_reg_3097 <= grp_fu_2322_p2;
                mul_ln1118_112_reg_3102 <= grp_fu_2328_p2;
                mul_ln1118_113_reg_3107 <= grp_fu_2334_p2;
                mul_ln1118_114_reg_3112 <= grp_fu_2340_p2;
                mul_ln1118_115_reg_3117 <= grp_fu_2346_p2;
                mul_ln1118_116_reg_3122 <= grp_fu_2352_p2;
                mul_ln1118_117_reg_3127 <= grp_fu_2358_p2;
                mul_ln1118_118_reg_3132 <= grp_fu_2364_p2;
                mul_ln1118_119_reg_3137 <= grp_fu_2370_p2;
                mul_ln1118_120_reg_3142 <= grp_fu_2376_p2;
                mul_ln1118_121_reg_3147 <= grp_fu_2382_p2;
                mul_ln1118_122_reg_3152 <= grp_fu_2388_p2;
                mul_ln1118_123_reg_3157 <= grp_fu_2394_p2;
                mul_ln1118_124_reg_3162 <= grp_fu_2400_p2;
                mul_ln1118_125_reg_3167 <= grp_fu_2406_p2;
                mul_ln1118_126_reg_3172 <= grp_fu_2412_p2;
                mul_ln1118_127_reg_3177 <= grp_fu_2418_p2;
                mul_ln1118_128_reg_3182 <= grp_fu_2424_p2;
                mul_ln1118_99_reg_3037 <= grp_fu_2250_p2;
                mul_ln1118_reg_3032 <= grp_fu_2244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                res_pack_V_reg_3377 <= layer_out_i_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln277_reg_3360 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                sY_4 <= storemerge_i_reg_1098;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (((icmp_ln277_fu_2159_p2 = ap_const_lv1_1) and (icmp_ln281_fu_2199_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln255_6_reg_2643)) or ((icmp_ln277_fu_2159_p2 = ap_const_lv1_1) and (icmp_ln266_fu_2142_p2 = ap_const_lv1_1) and (icmp_ln281_fu_2199_p2 = ap_const_lv1_0))))) then
                select_ln287_reg_3372 <= select_ln287_fu_2220_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (((icmp_ln277_fu_2159_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln255_6_reg_2643)) or ((icmp_ln266_fu_2142_p2 = ap_const_lv1_1) and (icmp_ln277_fu_2159_p2 = ap_const_lv1_0))))) then
                select_ln292_reg_3364 <= select_ln292_fu_2180_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln247_fu_1130_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (icmp_ln247_fu_1130_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_V_reg_2606 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln336_reg_2647_pp0_iter2_reg = ap_const_lv1_0))) then
                trunc_ln708_31_reg_3027 <= grp_fu_1656_p2(20 downto 5);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, data_V_V_empty_n, res_V_V_full_n, ap_CS_fsm_state3, icmp_ln247_fu_1130_p2, ap_CS_fsm_state30, ap_CS_fsm_state2, ap_CS_fsm_state5, grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done, and_ln255_6_fu_1219_p2, and_ln255_6_reg_2643, icmp_ln336_fu_1225_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_CS_fsm_state28, icmp_ln266_fu_2142_p2, icmp_ln277_fu_2159_p2, icmp_ln281_fu_2199_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, icmp_ln245_fu_1118_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln245_fu_1118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((icmp_ln247_fu_1130_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (icmp_ln247_fu_1130_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif ((not(((icmp_ln247_fu_1130_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (icmp_ln247_fu_1130_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_lv1_1 = and_ln255_6_fu_1219_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln255_6_fu_1219_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln336_fu_1225_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln336_fu_1225_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (((icmp_ln281_fu_2199_p2 = ap_const_lv1_1) and (icmp_ln277_fu_2159_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln255_6_reg_2643)) or ((icmp_ln281_fu_2199_p2 = ap_const_lv1_1) and (icmp_ln277_fu_2159_p2 = ap_const_lv1_1) and (icmp_ln266_fu_2142_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (((icmp_ln277_fu_2159_p2 = ap_const_lv1_1) and (icmp_ln281_fu_2199_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln255_6_reg_2643)) or ((icmp_ln277_fu_2159_p2 = ap_const_lv1_1) and (icmp_ln266_fu_2142_p2 = ap_const_lv1_1) and (icmp_ln281_fu_2199_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (((icmp_ln277_fu_2159_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln255_6_reg_2643)) or ((icmp_ln266_fu_2142_p2 = ap_const_lv1_1) and (icmp_ln277_fu_2159_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    acc_0_V_fu_1956_p2 <= std_logic_vector(unsigned(acc_V_0_0_reg_1063) + unsigned(trunc_ln_fu_1677_p4));
    acc_10_V_fu_2016_p2 <= std_logic_vector(unsigned(acc_V_10_0_reg_933) + unsigned(trunc_ln708_10_fu_1767_p4));
    acc_11_V_fu_2022_p2 <= std_logic_vector(unsigned(acc_V_11_0_reg_920) + unsigned(trunc_ln708_11_fu_1776_p4));
    acc_12_V_fu_2028_p2 <= std_logic_vector(unsigned(acc_V_12_0_reg_907) + unsigned(trunc_ln708_12_fu_1785_p4));
    acc_13_V_fu_2034_p2 <= std_logic_vector(unsigned(acc_V_13_0_reg_894) + unsigned(trunc_ln708_13_fu_1794_p4));
    acc_14_V_fu_2040_p2 <= std_logic_vector(unsigned(acc_V_14_0_reg_881) + unsigned(trunc_ln708_14_fu_1803_p4));
    acc_15_V_fu_2046_p2 <= std_logic_vector(unsigned(acc_V_15_0_reg_868) + unsigned(trunc_ln708_15_fu_1812_p4));
    acc_16_V_fu_2052_p2 <= std_logic_vector(unsigned(acc_V_16_0_reg_855) + unsigned(trunc_ln708_16_fu_1821_p4));
    acc_17_V_fu_2058_p2 <= std_logic_vector(unsigned(acc_V_17_0_reg_842) + unsigned(trunc_ln708_17_fu_1830_p4));
    acc_18_V_fu_2064_p2 <= std_logic_vector(unsigned(acc_V_18_0_reg_829) + unsigned(trunc_ln708_18_fu_1839_p4));
    acc_19_V_fu_2070_p2 <= std_logic_vector(unsigned(acc_V_19_0_reg_816) + unsigned(trunc_ln708_19_fu_1848_p4));
    acc_1_V_fu_1962_p2 <= std_logic_vector(unsigned(acc_V_1_0_reg_1050) + unsigned(trunc_ln708_1_fu_1686_p4));
    acc_20_V_fu_2076_p2 <= std_logic_vector(unsigned(acc_V_20_0_reg_803) + unsigned(trunc_ln708_20_fu_1857_p4));
    acc_21_V_fu_2082_p2 <= std_logic_vector(unsigned(acc_V_21_0_reg_790) + unsigned(trunc_ln708_21_fu_1866_p4));
    acc_22_V_fu_2088_p2 <= std_logic_vector(unsigned(acc_V_22_0_reg_777) + unsigned(trunc_ln708_22_fu_1875_p4));
    acc_23_V_fu_2094_p2 <= std_logic_vector(unsigned(acc_V_23_0_reg_764) + unsigned(trunc_ln708_23_fu_1884_p4));
    acc_24_V_fu_2100_p2 <= std_logic_vector(unsigned(acc_V_24_0_reg_751) + unsigned(trunc_ln708_24_fu_1893_p4));
    acc_25_V_fu_2106_p2 <= std_logic_vector(unsigned(acc_V_25_0_reg_738) + unsigned(trunc_ln708_25_fu_1902_p4));
    acc_26_V_fu_2112_p2 <= std_logic_vector(unsigned(acc_V_26_0_reg_725) + unsigned(trunc_ln708_26_fu_1911_p4));
    acc_27_V_fu_2118_p2 <= std_logic_vector(unsigned(acc_V_27_0_reg_712) + unsigned(trunc_ln708_27_fu_1920_p4));
    acc_28_V_fu_2124_p2 <= std_logic_vector(unsigned(acc_V_28_0_reg_699) + unsigned(trunc_ln708_28_fu_1929_p4));
    acc_29_V_fu_2130_p2 <= std_logic_vector(unsigned(acc_V_29_0_reg_686) + unsigned(trunc_ln708_29_fu_1938_p4));
    acc_2_V_fu_1968_p2 <= std_logic_vector(unsigned(acc_V_2_0_reg_1037) + unsigned(trunc_ln708_2_fu_1695_p4));
    acc_30_V_fu_2136_p2 <= std_logic_vector(unsigned(acc_V_30_0_reg_673) + unsigned(trunc_ln708_30_fu_1947_p4));
    acc_31_V_fu_1672_p2 <= std_logic_vector(unsigned(ap_phi_mux_acc_V_31_0_phi_fu_665_p4) + unsigned(trunc_ln708_31_reg_3027));
    acc_3_V_fu_1974_p2 <= std_logic_vector(unsigned(acc_V_3_0_reg_1024) + unsigned(trunc_ln708_3_fu_1704_p4));
    acc_4_V_fu_1980_p2 <= std_logic_vector(unsigned(acc_V_4_0_reg_1011) + unsigned(trunc_ln708_4_fu_1713_p4));
    acc_5_V_fu_1986_p2 <= std_logic_vector(unsigned(acc_V_5_0_reg_998) + unsigned(trunc_ln708_5_fu_1722_p4));
    acc_6_V_fu_1992_p2 <= std_logic_vector(unsigned(acc_V_6_0_reg_985) + unsigned(trunc_ln708_6_fu_1731_p4));
    acc_7_V_fu_1998_p2 <= std_logic_vector(unsigned(acc_V_7_0_reg_972) + unsigned(trunc_ln708_7_fu_1740_p4));
    acc_8_V_fu_2004_p2 <= std_logic_vector(unsigned(acc_V_8_0_reg_959) + unsigned(trunc_ln708_8_fu_1749_p4));
    acc_9_V_fu_2010_p2 <= std_logic_vector(unsigned(acc_V_9_0_reg_946) + unsigned(trunc_ln708_9_fu_1758_p4));
    add_ln285_fu_2204_p2 <= std_logic_vector(unsigned(pY_4_load_reg_2631) + unsigned(ap_const_lv32_1));
    add_ln287_fu_2215_p2 <= std_logic_vector(unsigned(sY_4_load_reg_2621) + unsigned(ap_const_lv32_1));
    add_ln290_fu_2164_p2 <= std_logic_vector(unsigned(pX_4_load_reg_2637) + unsigned(ap_const_lv32_1));
    add_ln292_fu_2175_p2 <= std_logic_vector(unsigned(sX_4_load_reg_2611) + unsigned(ap_const_lv32_1));
    and_ln255_5_fu_1213_p2 <= (icmp_ln255_9_fu_1201_p2 and icmp_ln255_8_fu_1181_p2);
    and_ln255_6_fu_1219_p2 <= (and_ln255_fu_1207_p2 and and_ln255_5_fu_1213_p2);
    and_ln255_fu_1207_p2 <= (icmp_ln255_fu_1151_p2 and icmp_ln255_7_fu_1161_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(6);
    ap_CS_fsm_state13 <= ap_CS_fsm(7);
    ap_CS_fsm_state14 <= ap_CS_fsm(8);
    ap_CS_fsm_state15 <= ap_CS_fsm(9);
    ap_CS_fsm_state16 <= ap_CS_fsm(10);
    ap_CS_fsm_state17 <= ap_CS_fsm(11);
    ap_CS_fsm_state18 <= ap_CS_fsm(12);
    ap_CS_fsm_state19 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(14);
    ap_CS_fsm_state21 <= ap_CS_fsm(15);
    ap_CS_fsm_state22 <= ap_CS_fsm(16);
    ap_CS_fsm_state23 <= ap_CS_fsm(17);
    ap_CS_fsm_state24 <= ap_CS_fsm(18);
    ap_CS_fsm_state25 <= ap_CS_fsm(19);
    ap_CS_fsm_state26 <= ap_CS_fsm(20);
    ap_CS_fsm_state27 <= ap_CS_fsm(21);
    ap_CS_fsm_state28 <= ap_CS_fsm(22);
    ap_CS_fsm_state29 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(24);
    ap_CS_fsm_state31 <= ap_CS_fsm(25);
    ap_CS_fsm_state32 <= ap_CS_fsm(26);
    ap_CS_fsm_state33 <= ap_CS_fsm(27);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_assign_proc : process(data_V_V_empty_n, icmp_ln247_fu_1130_p2)
    begin
                ap_block_state3 <= ((icmp_ln247_fu_1130_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_ignore_call0_assign_proc : process(data_V_V_empty_n, icmp_ln247_fu_1130_p2)
    begin
                ap_block_state3_ignore_call0 <= ((icmp_ln247_fu_1130_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_623_assign_proc : process(and_ln255_6_reg_2643, icmp_ln266_fu_2142_p2, icmp_ln277_fu_2159_p2)
    begin
                ap_condition_623 <= (((icmp_ln277_fu_2159_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln255_6_reg_2643)) or ((icmp_ln266_fu_2142_p2 = ap_const_lv1_1) and (icmp_ln277_fu_2159_p2 = ap_const_lv1_0)));
    end process;


    ap_condition_634_assign_proc : process(and_ln255_6_reg_2643, icmp_ln266_fu_2142_p2, icmp_ln277_fu_2159_p2, icmp_ln281_fu_2199_p2)
    begin
                ap_condition_634 <= (((icmp_ln277_fu_2159_p2 = ap_const_lv1_1) and (icmp_ln281_fu_2199_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln255_6_reg_2643)) or ((icmp_ln277_fu_2159_p2 = ap_const_lv1_1) and (icmp_ln266_fu_2142_p2 = ap_const_lv1_1) and (icmp_ln281_fu_2199_p2 = ap_const_lv1_0)));
    end process;


    ap_condition_781_assign_proc : process(and_ln255_6_reg_2643, icmp_ln266_fu_2142_p2, icmp_ln277_fu_2159_p2, icmp_ln281_fu_2199_p2)
    begin
                ap_condition_781 <= (((icmp_ln281_fu_2199_p2 = ap_const_lv1_1) and (icmp_ln277_fu_2159_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln255_6_reg_2643)) or ((icmp_ln281_fu_2199_p2 = ap_const_lv1_1) and (icmp_ln277_fu_2159_p2 = ap_const_lv1_1) and (icmp_ln266_fu_2142_p2 = ap_const_lv1_1)));
    end process;


    ap_condition_839_assign_proc : process(and_ln255_6_reg_2643, icmp_ln266_fu_2142_p2, icmp_ln277_fu_2159_p2)
    begin
                ap_condition_839 <= (((icmp_ln277_fu_2159_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln255_6_reg_2643)) or ((icmp_ln277_fu_2159_p2 = ap_const_lv1_1) and (icmp_ln266_fu_2142_p2 = ap_const_lv1_1)));
    end process;


    ap_condition_pp0_exit_iter0_state6_assign_proc : process(icmp_ln336_fu_1225_p2)
    begin
        if ((icmp_ln336_fu_1225_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln245_fu_1118_p2)
    begin
        if (((icmp_ln245_fu_1118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_acc_V_31_0_phi_fu_665_p4_assign_proc : process(acc_V_31_0_reg_660, icmp_ln336_reg_2647_pp0_iter4_reg, acc_31_V_reg_3187, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2647_pp0_iter4_reg = ap_const_lv1_0))) then 
            ap_phi_mux_acc_V_31_0_phi_fu_665_p4 <= acc_31_V_reg_3187;
        else 
            ap_phi_mux_acc_V_31_0_phi_fu_665_p4 <= acc_V_31_0_reg_660;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data_V_V_blk_n_assign_proc : process(data_V_V_empty_n, ap_CS_fsm_state3, icmp_ln247_fu_1130_p2)
    begin
        if (((icmp_ln247_fu_1130_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data_V_V_blk_n <= data_V_V_empty_n;
        else 
            data_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_V_read_assign_proc : process(data_V_V_empty_n, ap_CS_fsm_state3, icmp_ln247_fu_1130_p2)
    begin
        if ((not(((icmp_ln247_fu_1130_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (icmp_ln247_fu_1130_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data_V_V_read <= ap_const_logic_1;
        else 
            data_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_start <= grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_ap_start_reg;
    grp_fu_1656_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2244_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2250_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2256_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2262_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2268_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2274_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2280_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2286_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2292_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2298_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2304_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2310_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2316_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2322_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2328_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2334_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2340_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2346_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2352_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2358_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2364_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2370_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2376_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2382_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2388_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2394_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2400_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2406_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2412_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2418_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    grp_fu_2424_p1 <= sext_ln1116_cast_fu_1557_p1(16 - 1 downto 0);
    i1_fu_1136_p2 <= std_logic_vector(unsigned(i1_0_i_reg_648) + unsigned(ap_const_lv2_1));
    i_fu_1124_p2 <= std_logic_vector(unsigned(i_0_i_reg_637) + unsigned(ap_const_lv11_1));
    i_ic_fu_2148_p2 <= std_logic_vector(unsigned(i_ic_0_i_reg_1087) + unsigned(ap_const_lv6_1));
    icmp_ln245_fu_1118_p2 <= "1" when (i_0_i_reg_637 = ap_const_lv11_484) else "0";
    icmp_ln247_fu_1130_p2 <= "1" when (i1_0_i_reg_648 = ap_const_lv2_3) else "0";
    icmp_ln255_7_fu_1161_p2 <= "1" when (sY_4 = ap_const_lv32_2) else "0";
    icmp_ln255_8_fu_1181_p2 <= "1" when (signed(tmp_127_fu_1171_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln255_9_fu_1201_p2 <= "1" when (signed(tmp_128_fu_1191_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln255_fu_1151_p2 <= "1" when (sX_4 = ap_const_lv32_2) else "0";
    icmp_ln266_fu_2142_p2 <= "1" when (i_ic_0_i_reg_1087 = ap_const_lv6_20) else "0";
    icmp_ln277_fu_2159_p2 <= "1" when (pX_4_load_reg_2637 = ap_const_lv32_21) else "0";
    icmp_ln281_fu_2199_p2 <= "1" when (pY_4_load_reg_2631 = ap_const_lv32_21) else "0";
    icmp_ln336_fu_1225_p2 <= "1" when (in_index_reg_1076 = ap_const_lv5_1B) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln245_fu_1118_p2)
    begin
        if (((icmp_ln245_fu_1118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ir_fu_1231_p2 <= std_logic_vector(unsigned(in_index_reg_1076) + unsigned(ap_const_lv5_1));

    layer_in_V_9_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_output_V_address0, ap_block_pp0_stage0, zext_ln344_fu_1237_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer_in_V_9_address0 <= zext_ln344_fu_1237_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_in_V_9_address0 <= grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_output_V_address0;
        else 
            layer_in_V_9_address0 <= "XXXXX";
        end if; 
    end process;


    layer_in_V_9_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_output_V_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer_in_V_9_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_in_V_9_ce0 <= grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_output_V_ce0;
        else 
            layer_in_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_V_9_we0_assign_proc : process(ap_CS_fsm_state5, grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_output_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_in_V_9_we0 <= grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_output_V_we0;
        else 
            layer_in_V_9_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_out_i_address0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state27, zext_ln268_fu_2154_p1, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            layer_out_i_address0 <= zext_ln268_fu_2154_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer_out_i_address0 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            layer_out_i_address0 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            layer_out_i_address0 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_out_i_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            layer_out_i_address0 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer_out_i_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            layer_out_i_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            layer_out_i_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            layer_out_i_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            layer_out_i_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            layer_out_i_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            layer_out_i_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            layer_out_i_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            layer_out_i_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            layer_out_i_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            layer_out_i_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            layer_out_i_address0 <= "XXXXX";
        end if; 
    end process;


    layer_out_i_address1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer_out_i_address1 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            layer_out_i_address1 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            layer_out_i_address1 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_out_i_address1 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            layer_out_i_address1 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer_out_i_address1 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            layer_out_i_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            layer_out_i_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            layer_out_i_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            layer_out_i_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            layer_out_i_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            layer_out_i_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            layer_out_i_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            layer_out_i_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            layer_out_i_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            layer_out_i_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            layer_out_i_address1 <= "XXXXX";
        end if; 
    end process;


    layer_out_i_ce0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state27, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            layer_out_i_ce0 <= ap_const_logic_1;
        else 
            layer_out_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_out_i_ce1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            layer_out_i_ce1 <= ap_const_logic_1;
        else 
            layer_out_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    layer_out_i_d0_assign_proc : process(acc_V_30_0_reg_673, acc_V_28_0_reg_699, acc_V_26_0_reg_725, acc_V_24_0_reg_751, acc_V_22_0_reg_777, acc_V_20_0_reg_803, acc_V_18_0_reg_829, acc_V_16_0_reg_855, acc_V_14_0_reg_881, acc_V_12_0_reg_907, acc_V_10_0_reg_933, acc_V_8_0_reg_959, acc_V_6_0_reg_985, acc_V_4_0_reg_1011, acc_V_2_0_reg_1037, acc_V_0_0_reg_1063, ap_CS_fsm_state27, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer_out_i_d0 <= acc_V_30_0_reg_673;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            layer_out_i_d0 <= acc_V_28_0_reg_699;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            layer_out_i_d0 <= acc_V_26_0_reg_725;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_out_i_d0 <= acc_V_24_0_reg_751;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            layer_out_i_d0 <= acc_V_22_0_reg_777;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer_out_i_d0 <= acc_V_20_0_reg_803;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            layer_out_i_d0 <= acc_V_18_0_reg_829;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            layer_out_i_d0 <= acc_V_16_0_reg_855;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            layer_out_i_d0 <= acc_V_14_0_reg_881;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            layer_out_i_d0 <= acc_V_12_0_reg_907;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            layer_out_i_d0 <= acc_V_10_0_reg_933;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            layer_out_i_d0 <= acc_V_8_0_reg_959;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            layer_out_i_d0 <= acc_V_6_0_reg_985;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            layer_out_i_d0 <= acc_V_4_0_reg_1011;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            layer_out_i_d0 <= acc_V_2_0_reg_1037;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            layer_out_i_d0 <= acc_V_0_0_reg_1063;
        else 
            layer_out_i_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    layer_out_i_d1_assign_proc : process(acc_V_31_0_reg_660, acc_V_29_0_reg_686, acc_V_27_0_reg_712, acc_V_25_0_reg_738, acc_V_23_0_reg_764, acc_V_21_0_reg_790, acc_V_19_0_reg_816, acc_V_17_0_reg_842, acc_V_15_0_reg_868, acc_V_13_0_reg_894, acc_V_11_0_reg_920, acc_V_9_0_reg_946, acc_V_7_0_reg_972, acc_V_5_0_reg_998, acc_V_3_0_reg_1024, acc_V_1_0_reg_1050, ap_CS_fsm_state27, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer_out_i_d1 <= acc_V_31_0_reg_660;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            layer_out_i_d1 <= acc_V_29_0_reg_686;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            layer_out_i_d1 <= acc_V_27_0_reg_712;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_out_i_d1 <= acc_V_25_0_reg_738;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            layer_out_i_d1 <= acc_V_23_0_reg_764;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer_out_i_d1 <= acc_V_21_0_reg_790;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            layer_out_i_d1 <= acc_V_19_0_reg_816;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            layer_out_i_d1 <= acc_V_17_0_reg_842;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            layer_out_i_d1 <= acc_V_15_0_reg_868;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            layer_out_i_d1 <= acc_V_13_0_reg_894;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            layer_out_i_d1 <= acc_V_11_0_reg_920;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            layer_out_i_d1 <= acc_V_9_0_reg_946;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            layer_out_i_d1 <= acc_V_7_0_reg_972;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            layer_out_i_d1 <= acc_V_5_0_reg_998;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            layer_out_i_d1 <= acc_V_3_0_reg_1024;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            layer_out_i_d1 <= acc_V_1_0_reg_1050;
        else 
            layer_out_i_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    layer_out_i_we0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            layer_out_i_we0 <= ap_const_logic_1;
        else 
            layer_out_i_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_out_i_we1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            layer_out_i_we1 <= ap_const_logic_1;
        else 
            layer_out_i_we1 <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_V_blk_n_assign_proc : process(res_V_V_full_n, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            res_V_V_blk_n <= res_V_V_full_n;
        else 
            res_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_V_din <= res_pack_V_reg_3377;

    res_V_V_write_assign_proc : process(res_V_V_full_n, ap_CS_fsm_state30)
    begin
        if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            res_V_V_write <= ap_const_logic_1;
        else 
            res_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln287_fu_2220_p3 <= 
        ap_const_lv32_2 when (icmp_ln255_7_reg_2626(0) = '1') else 
        add_ln287_fu_2215_p2;
    select_ln292_fu_2180_p3 <= 
        ap_const_lv32_2 when (icmp_ln255_reg_2616(0) = '1') else 
        add_ln292_fu_2175_p2;
        sext_ln1116_cast_fu_1557_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(layer_in_V_9_load_reg_2666),21));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_127_fu_1171_p4 <= pY_4(31 downto 1);
    tmp_128_fu_1191_p4 <= pX_4(31 downto 1);

    tmpdata_V_address0_assign_proc : process(ap_CS_fsm_state5, grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_data_V_address0, ap_CS_fsm_state4, zext_ln249_fu_1142_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmpdata_V_address0 <= zext_ln249_fu_1142_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmpdata_V_address0 <= grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_data_V_address0;
        else 
            tmpdata_V_address0 <= "XX";
        end if; 
    end process;


    tmpdata_V_ce0_assign_proc : process(ap_CS_fsm_state5, grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_data_V_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmpdata_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmpdata_V_ce0 <= grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config2_s_fu_1109_data_V_ce0;
        else 
            tmpdata_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmpdata_V_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmpdata_V_we0 <= ap_const_logic_1;
        else 
            tmpdata_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln344_fu_1243_p1 <= w2_V_q0(6 - 1 downto 0);
    trunc_ln708_10_fu_1767_p4 <= mul_ln1118_108_reg_3082(20 downto 5);
    trunc_ln708_11_fu_1776_p4 <= mul_ln1118_109_reg_3087(20 downto 5);
    trunc_ln708_12_fu_1785_p4 <= mul_ln1118_110_reg_3092(20 downto 5);
    trunc_ln708_13_fu_1794_p4 <= mul_ln1118_111_reg_3097(20 downto 5);
    trunc_ln708_14_fu_1803_p4 <= mul_ln1118_112_reg_3102(20 downto 5);
    trunc_ln708_15_fu_1812_p4 <= mul_ln1118_113_reg_3107(20 downto 5);
    trunc_ln708_16_fu_1821_p4 <= mul_ln1118_114_reg_3112(20 downto 5);
    trunc_ln708_17_fu_1830_p4 <= mul_ln1118_115_reg_3117(20 downto 5);
    trunc_ln708_18_fu_1839_p4 <= mul_ln1118_116_reg_3122(20 downto 5);
    trunc_ln708_19_fu_1848_p4 <= mul_ln1118_117_reg_3127(20 downto 5);
    trunc_ln708_1_fu_1686_p4 <= mul_ln1118_99_reg_3037(20 downto 5);
    trunc_ln708_20_fu_1857_p4 <= mul_ln1118_118_reg_3132(20 downto 5);
    trunc_ln708_21_fu_1866_p4 <= mul_ln1118_119_reg_3137(20 downto 5);
    trunc_ln708_22_fu_1875_p4 <= mul_ln1118_120_reg_3142(20 downto 5);
    trunc_ln708_23_fu_1884_p4 <= mul_ln1118_121_reg_3147(20 downto 5);
    trunc_ln708_24_fu_1893_p4 <= mul_ln1118_122_reg_3152(20 downto 5);
    trunc_ln708_25_fu_1902_p4 <= mul_ln1118_123_reg_3157(20 downto 5);
    trunc_ln708_26_fu_1911_p4 <= mul_ln1118_124_reg_3162(20 downto 5);
    trunc_ln708_27_fu_1920_p4 <= mul_ln1118_125_reg_3167(20 downto 5);
    trunc_ln708_28_fu_1929_p4 <= mul_ln1118_126_reg_3172(20 downto 5);
    trunc_ln708_29_fu_1938_p4 <= mul_ln1118_127_reg_3177(20 downto 5);
    trunc_ln708_2_fu_1695_p4 <= mul_ln1118_100_reg_3042(20 downto 5);
    trunc_ln708_30_fu_1947_p4 <= mul_ln1118_128_reg_3182(20 downto 5);
    trunc_ln708_3_fu_1704_p4 <= mul_ln1118_101_reg_3047(20 downto 5);
    trunc_ln708_4_fu_1713_p4 <= mul_ln1118_102_reg_3052(20 downto 5);
    trunc_ln708_5_fu_1722_p4 <= mul_ln1118_103_reg_3057(20 downto 5);
    trunc_ln708_6_fu_1731_p4 <= mul_ln1118_104_reg_3062(20 downto 5);
    trunc_ln708_7_fu_1740_p4 <= mul_ln1118_105_reg_3067(20 downto 5);
    trunc_ln708_8_fu_1749_p4 <= mul_ln1118_106_reg_3072(20 downto 5);
    trunc_ln708_9_fu_1758_p4 <= mul_ln1118_107_reg_3077(20 downto 5);
    trunc_ln_fu_1677_p4 <= mul_ln1118_reg_3032(20 downto 5);
    w2_V_address0 <= zext_ln344_fu_1237_p1(5 - 1 downto 0);

    w2_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w2_V_ce0 <= ap_const_logic_1;
        else 
            w2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln249_fu_1142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_i_reg_648),64));
    zext_ln268_fu_2154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_ic_0_i_reg_1087),64));
    zext_ln344_fu_1237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_index_reg_1076),64));
end behav;
