-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_axi is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 15;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC );
end;


architecture behav of myproject_axi is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject_axi,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.429000,HLS_SYN_LAT=12199901,HLS_SYN_TPT=12101634,HLS_SYN_MEM=87,HLS_SYN_DSP=197,HLS_SYN_FF=22189,HLS_SYN_LUT=23369,HLS_VERSION=2019_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal in_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Loop_1_proc188_U0_ap_start : STD_LOGIC;
    signal Loop_1_proc188_U0_ap_done : STD_LOGIC;
    signal Loop_1_proc188_U0_ap_continue : STD_LOGIC;
    signal Loop_1_proc188_U0_ap_idle : STD_LOGIC;
    signal Loop_1_proc188_U0_ap_ready : STD_LOGIC;
    signal Loop_1_proc188_U0_start_out : STD_LOGIC;
    signal Loop_1_proc188_U0_start_write : STD_LOGIC;
    signal Loop_1_proc188_U0_in_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal Loop_1_proc188_U0_in_V_ce0 : STD_LOGIC;
    signal Loop_1_proc188_U0_in_local_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Loop_1_proc188_U0_in_local_V_V_write : STD_LOGIC;
    signal myproject_U0_ap_start : STD_LOGIC;
    signal myproject_U0_start_out : STD_LOGIC;
    signal myproject_U0_start_write : STD_LOGIC;
    signal myproject_U0_conv2d_input_V_V_read : STD_LOGIC;
    signal myproject_U0_layer19_out_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal myproject_U0_layer19_out_V_V_write : STD_LOGIC;
    signal myproject_U0_ap_done : STD_LOGIC;
    signal myproject_U0_ap_ready : STD_LOGIC;
    signal myproject_U0_ap_idle : STD_LOGIC;
    signal myproject_U0_ap_continue : STD_LOGIC;
    signal Loop_2_proc189_U0_ap_start : STD_LOGIC;
    signal Loop_2_proc189_U0_ap_done : STD_LOGIC;
    signal Loop_2_proc189_U0_ap_continue : STD_LOGIC;
    signal Loop_2_proc189_U0_ap_idle : STD_LOGIC;
    signal Loop_2_proc189_U0_ap_ready : STD_LOGIC;
    signal Loop_2_proc189_U0_out_local_V_V_read : STD_LOGIC;
    signal Loop_2_proc189_U0_out_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_2_proc189_U0_out_V_ce0 : STD_LOGIC;
    signal Loop_2_proc189_U0_out_V_we0 : STD_LOGIC;
    signal Loop_2_proc189_U0_out_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal in_local_V_V_full_n : STD_LOGIC;
    signal in_local_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal in_local_V_V_empty_n : STD_LOGIC;
    signal out_local_V_V_full_n : STD_LOGIC;
    signal out_local_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_V_V_empty_n : STD_LOGIC;
    signal start_for_myproject_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_myproject_U0_full_n : STD_LOGIC;
    signal start_for_myproject_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_myproject_U0_empty_n : STD_LOGIC;
    signal start_for_Loop_2_proc189_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_2_proc189_U0_full_n : STD_LOGIC;
    signal start_for_Loop_2_proc189_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_2_proc189_U0_empty_n : STD_LOGIC;
    signal Loop_2_proc189_U0_start_full_n : STD_LOGIC;
    signal Loop_2_proc189_U0_start_write : STD_LOGIC;

    component Loop_1_proc188 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        in_V_ce0 : OUT STD_LOGIC;
        in_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        in_local_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        in_local_V_V_full_n : IN STD_LOGIC;
        in_local_V_V_write : OUT STD_LOGIC );
    end component;


    component myproject IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        conv2d_input_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        conv2d_input_V_V_empty_n : IN STD_LOGIC;
        conv2d_input_V_V_read : OUT STD_LOGIC;
        layer19_out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        layer19_out_V_V_full_n : IN STD_LOGIC;
        layer19_out_V_V_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component Loop_2_proc189 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_local_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        out_local_V_V_empty_n : IN STD_LOGIC;
        out_local_V_V_read : OUT STD_LOGIC;
        out_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        out_V_ce0 : OUT STD_LOGIC;
        out_V_we0 : OUT STD_LOGIC;
        out_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fifo_w16_d3072_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d5_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_myproject_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Loop_2_proc189_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component myproject_axi_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        in_V_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        in_V_ce0 : IN STD_LOGIC;
        in_V_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_V_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        out_V_ce0 : IN STD_LOGIC;
        out_V_we0 : IN STD_LOGIC;
        out_V_d0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    myproject_axi_AXILiteS_s_axi_U : component myproject_axi_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        in_V_address0 => Loop_1_proc188_U0_in_V_address0,
        in_V_ce0 => Loop_1_proc188_U0_in_V_ce0,
        in_V_q0 => in_V_q0,
        out_V_address0 => Loop_2_proc189_U0_out_V_address0,
        out_V_ce0 => Loop_2_proc189_U0_out_V_ce0,
        out_V_we0 => Loop_2_proc189_U0_out_V_we0,
        out_V_d0 => Loop_2_proc189_U0_out_V_d0);

    Loop_1_proc188_U0 : component Loop_1_proc188
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_1_proc188_U0_ap_start,
        start_full_n => start_for_myproject_U0_full_n,
        ap_done => Loop_1_proc188_U0_ap_done,
        ap_continue => Loop_1_proc188_U0_ap_continue,
        ap_idle => Loop_1_proc188_U0_ap_idle,
        ap_ready => Loop_1_proc188_U0_ap_ready,
        start_out => Loop_1_proc188_U0_start_out,
        start_write => Loop_1_proc188_U0_start_write,
        in_V_address0 => Loop_1_proc188_U0_in_V_address0,
        in_V_ce0 => Loop_1_proc188_U0_in_V_ce0,
        in_V_q0 => in_V_q0,
        in_local_V_V_din => Loop_1_proc188_U0_in_local_V_V_din,
        in_local_V_V_full_n => in_local_V_V_full_n,
        in_local_V_V_write => Loop_1_proc188_U0_in_local_V_V_write);

    myproject_U0 : component myproject
    port map (
        ap_start => myproject_U0_ap_start,
        start_full_n => start_for_Loop_2_proc189_U0_full_n,
        start_out => myproject_U0_start_out,
        start_write => myproject_U0_start_write,
        conv2d_input_V_V_dout => in_local_V_V_dout,
        conv2d_input_V_V_empty_n => in_local_V_V_empty_n,
        conv2d_input_V_V_read => myproject_U0_conv2d_input_V_V_read,
        layer19_out_V_V_din => myproject_U0_layer19_out_V_V_din,
        layer19_out_V_V_full_n => out_local_V_V_full_n,
        layer19_out_V_V_write => myproject_U0_layer19_out_V_V_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_done => myproject_U0_ap_done,
        ap_ready => myproject_U0_ap_ready,
        ap_idle => myproject_U0_ap_idle,
        ap_continue => myproject_U0_ap_continue);

    Loop_2_proc189_U0 : component Loop_2_proc189
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_2_proc189_U0_ap_start,
        ap_done => Loop_2_proc189_U0_ap_done,
        ap_continue => Loop_2_proc189_U0_ap_continue,
        ap_idle => Loop_2_proc189_U0_ap_idle,
        ap_ready => Loop_2_proc189_U0_ap_ready,
        out_local_V_V_dout => out_local_V_V_dout,
        out_local_V_V_empty_n => out_local_V_V_empty_n,
        out_local_V_V_read => Loop_2_proc189_U0_out_local_V_V_read,
        out_V_address0 => Loop_2_proc189_U0_out_V_address0,
        out_V_ce0 => Loop_2_proc189_U0_out_V_ce0,
        out_V_we0 => Loop_2_proc189_U0_out_V_we0,
        out_V_d0 => Loop_2_proc189_U0_out_V_d0);

    in_local_V_V_U : component fifo_w16_d3072_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_1_proc188_U0_in_local_V_V_din,
        if_full_n => in_local_V_V_full_n,
        if_write => Loop_1_proc188_U0_in_local_V_V_write,
        if_dout => in_local_V_V_dout,
        if_empty_n => in_local_V_V_empty_n,
        if_read => myproject_U0_conv2d_input_V_V_read);

    out_local_V_V_U : component fifo_w16_d5_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => myproject_U0_layer19_out_V_V_din,
        if_full_n => out_local_V_V_full_n,
        if_write => myproject_U0_layer19_out_V_V_write,
        if_dout => out_local_V_V_dout,
        if_empty_n => out_local_V_V_empty_n,
        if_read => Loop_2_proc189_U0_out_local_V_V_read);

    start_for_myproject_U0_U : component start_for_myproject_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_myproject_U0_din,
        if_full_n => start_for_myproject_U0_full_n,
        if_write => Loop_1_proc188_U0_start_write,
        if_dout => start_for_myproject_U0_dout,
        if_empty_n => start_for_myproject_U0_empty_n,
        if_read => myproject_U0_ap_ready);

    start_for_Loop_2_proc189_U0_U : component start_for_Loop_2_proc189_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Loop_2_proc189_U0_din,
        if_full_n => start_for_Loop_2_proc189_U0_full_n,
        if_write => myproject_U0_start_write,
        if_dout => start_for_Loop_2_proc189_U0_dout,
        if_empty_n => start_for_Loop_2_proc189_U0_empty_n,
        if_read => Loop_2_proc189_U0_ap_ready);




    Loop_1_proc188_U0_ap_continue <= ap_const_logic_1;
    Loop_1_proc188_U0_ap_start <= ap_const_logic_1;
    Loop_2_proc189_U0_ap_continue <= ap_const_logic_1;
    Loop_2_proc189_U0_ap_start <= start_for_Loop_2_proc189_U0_empty_n;
    Loop_2_proc189_U0_start_full_n <= ap_const_logic_1;
    Loop_2_proc189_U0_start_write <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    myproject_U0_ap_continue <= ap_const_logic_1;
    myproject_U0_ap_start <= start_for_myproject_U0_empty_n;
    start_for_Loop_2_proc189_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_myproject_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
