-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config5_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_V_empty_n : IN STD_LOGIC;
    data_V_V_read : OUT STD_LOGIC;
    res_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_V_full_n : IN STD_LOGIC;
    res_V_V_write : OUT STD_LOGIC );
end;


architecture behav of conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config5_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv16_100 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_const_lv16_80 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_180 : STD_LOGIC_VECTOR (15 downto 0) := "0000000110000000";
    constant ap_const_lv16_FE80 : STD_LOGIC_VECTOR (15 downto 0) := "1111111010000000";
    constant ap_const_lv16_FF80 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110000000";
    constant ap_const_lv16_FF00 : STD_LOGIC_VECTOR (15 downto 0) := "1111111100000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv9_120 : STD_LOGIC_VECTOR (8 downto 0) := "100100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_95 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010101";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_9B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011011";
    constant ap_const_lv32_9C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011100";
    constant ap_const_lv32_A1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100001";
    constant ap_const_lv32_A2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100010";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_AD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101101";
    constant ap_const_lv32_AE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101110";
    constant ap_const_lv32_B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110011";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv32_B9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111001";
    constant ap_const_lv32_BA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111010";
    constant ap_const_lv32_BE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111110";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer_in_V_8_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer_in_V_8_ce0 : STD_LOGIC;
    signal layer_in_V_8_we0 : STD_LOGIC;
    signal layer_in_V_8_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sX_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pX_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal w5_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal w5_V_ce0 : STD_LOGIC;
    signal w5_V_q0 : STD_LOGIC_VECTOR (190 downto 0);
    signal data_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln247_fu_1122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal acc_V_31_0_reg_652 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_30_0_reg_665 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_29_0_reg_678 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_28_0_reg_691 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_27_0_reg_704 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_26_0_reg_717 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_25_0_reg_730 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_24_0_reg_743 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_23_0_reg_756 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_22_0_reg_769 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_21_0_reg_782 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_20_0_reg_795 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_19_0_reg_808 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_18_0_reg_821 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_17_0_reg_834 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_16_0_reg_847 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_15_0_reg_860 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_14_0_reg_873 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_13_0_reg_886 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_12_0_reg_899 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_11_0_reg_912 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_10_0_reg_925 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_9_0_reg_938 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_8_0_reg_951 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_7_0_reg_964 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_6_0_reg_977 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_5_0_reg_990 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_4_0_reg_1003 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_3_0_reg_1016 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_2_0_reg_1029 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_1_0_reg_1042 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_0_0_reg_1055 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_index_reg_1068 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_fu_1116_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_2585 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i1_fu_1128_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i1_reg_2593 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal tmp_V_reg_2598 : STD_LOGIC_VECTOR (15 downto 0);
    signal sX_3_load_reg_2603 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_ready : STD_LOGIC;
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done : STD_LOGIC;
    signal icmp_ln255_fu_1143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln255_reg_2608 : STD_LOGIC_VECTOR (0 downto 0);
    signal sY_3_load_reg_2613 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln255_4_fu_1153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln255_4_reg_2618 : STD_LOGIC_VECTOR (0 downto 0);
    signal pY_3_load_reg_2623 : STD_LOGIC_VECTOR (31 downto 0);
    signal pX_3_load_reg_2629 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln255_4_fu_1211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln255_4_reg_2635 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln336_fu_1217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln336_reg_2639 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln336_reg_2639_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln336_reg_2639_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln336_reg_2639_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln336_reg_2639_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ir_fu_1223_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal layer_in_V_8_load_reg_2658 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln344_fu_1235_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln344_reg_2663 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_65_reg_2668 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_66_reg_2673 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_67_reg_2678 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_68_reg_2683 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_69_reg_2688 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_70_reg_2693 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_71_reg_2698 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_72_reg_2703 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_73_reg_2708 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_74_reg_2713 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_75_reg_2718 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_76_reg_2723 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_77_reg_2728 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_78_reg_2733 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_79_reg_2738 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_80_reg_2743 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_81_reg_2748 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_82_reg_2753 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_83_reg_2758 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_84_reg_2763 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_85_reg_2768 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_86_reg_2773 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_87_reg_2778 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_88_reg_2783 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_89_reg_2788 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_90_reg_2793 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_91_reg_2798 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_92_reg_2803 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_93_reg_2808 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_94_reg_2813 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_95_reg_2818 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln1116_cast_fu_1549_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln708_31_reg_3019 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2236_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_reg_3024 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2242_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_68_reg_3029 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2248_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_69_reg_3034 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2254_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_70_reg_3039 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2260_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_71_reg_3044 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2266_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_72_reg_3049 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2272_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_73_reg_3054 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2278_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_74_reg_3059 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2284_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_75_reg_3064 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2290_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_76_reg_3069 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2296_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_77_reg_3074 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2302_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_78_reg_3079 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2308_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_79_reg_3084 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2314_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_80_reg_3089 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2320_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_81_reg_3094 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2326_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_82_reg_3099 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2332_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_83_reg_3104 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2338_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_84_reg_3109 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2344_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_85_reg_3114 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2350_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_86_reg_3119 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2356_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_87_reg_3124 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2362_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_88_reg_3129 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2368_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_89_reg_3134 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2374_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_90_reg_3139 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2380_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_91_reg_3144 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2386_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_92_reg_3149 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2392_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_93_reg_3154 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2398_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_94_reg_3159 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2404_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_95_reg_3164 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2410_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_96_reg_3169 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2416_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_97_reg_3174 : STD_LOGIC_VECTOR (20 downto 0);
    signal acc_31_V_fu_1664_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_31_V_reg_3179 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal acc_0_V_fu_1948_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal acc_1_V_fu_1954_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_2_V_fu_1960_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_3_V_fu_1966_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_4_V_fu_1972_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_5_V_fu_1978_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_6_V_fu_1984_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_7_V_fu_1990_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_8_V_fu_1996_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_9_V_fu_2002_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_10_V_fu_2008_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_11_V_fu_2014_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_12_V_fu_2020_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_13_V_fu_2026_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_14_V_fu_2032_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_15_V_fu_2038_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_16_V_fu_2044_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_17_V_fu_2050_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_18_V_fu_2056_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_19_V_fu_2062_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_20_V_fu_2068_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_21_V_fu_2074_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_22_V_fu_2080_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_23_V_fu_2086_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_24_V_fu_2092_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_25_V_fu_2098_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_26_V_fu_2104_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_27_V_fu_2110_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_28_V_fu_2116_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_29_V_fu_2122_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_30_V_fu_2128_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_ic_fu_2140_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_ic_reg_3342 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal icmp_ln266_fu_2134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln277_fu_2151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln277_reg_3352 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln292_fu_2172_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln292_reg_3356 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln287_fu_2212_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln287_reg_3364 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln281_fu_2191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal layer_out_i_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_pack_V_reg_3369 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal tmpdata_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmpdata_V_ce0 : STD_LOGIC;
    signal tmpdata_V_we0 : STD_LOGIC;
    signal tmpdata_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_out_i_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer_out_i_ce0 : STD_LOGIC;
    signal layer_out_i_we0 : STD_LOGIC;
    signal layer_out_i_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_out_i_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer_out_i_ce1 : STD_LOGIC;
    signal layer_out_i_we1 : STD_LOGIC;
    signal layer_out_i_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_start : STD_LOGIC;
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_idle : STD_LOGIC;
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_data_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_data_V_ce0 : STD_LOGIC;
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_output_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_output_V_ce0 : STD_LOGIC;
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_output_V_we0 : STD_LOGIC;
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_output_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_0_i_reg_629 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal i1_0_i_reg_640 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln245_fu_1110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_acc_V_31_0_phi_fu_657_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_ic_0_i_reg_1079 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal storemerge_i_reg_1090 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state3_ignore_call0 : BOOLEAN;
    signal zext_ln249_fu_1134_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln344_fu_1229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln268_fu_2146_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal add_ln285_fu_2196_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln290_fu_2156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_96_fu_1163_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_97_fu_1183_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln255_5_fu_1173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln255_6_fu_1193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln255_3_fu_1205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln255_fu_1199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1648_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1648_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln_fu_1669_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_1_fu_1678_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_2_fu_1687_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_3_fu_1696_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_4_fu_1705_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_5_fu_1714_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_6_fu_1723_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_7_fu_1732_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_8_fu_1741_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_9_fu_1750_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_10_fu_1759_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_11_fu_1768_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_12_fu_1777_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_13_fu_1786_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_14_fu_1795_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_15_fu_1804_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_16_fu_1813_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_17_fu_1822_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_18_fu_1831_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_19_fu_1840_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_20_fu_1849_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_21_fu_1858_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_22_fu_1867_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_23_fu_1876_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_24_fu_1885_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_25_fu_1894_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_26_fu_1903_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_27_fu_1912_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_28_fu_1921_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_29_fu_1930_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_30_fu_1939_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln292_fu_2167_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln287_fu_2207_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2236_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2242_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2248_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2254_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2260_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2266_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2272_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2278_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2284_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2290_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2296_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2302_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2308_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2314_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2320_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2326_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2332_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2338_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2344_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2350_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2356_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2362_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2368_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2374_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2380_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2386_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2392_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2398_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2404_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2410_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2416_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_623 : BOOLEAN;
    signal ap_condition_837 : BOOLEAN;
    signal ap_condition_634 : BOOLEAN;
    signal ap_condition_779 : BOOLEAN;

    component cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        data_V_ce0 : OUT STD_LOGIC;
        data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_axi_mul_5s_16s_21_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component myproject_axi_mul_mul_6s_16s_21_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config5_s_layeg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config5_s_w5_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (190 downto 0) );
    end component;


    component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config5_s_tmpdhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config2_s_layeeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    layer_in_V_8_U : component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config5_s_layeg8j
    generic map (
        DataWidth => 16,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_in_V_8_address0,
        ce0 => layer_in_V_8_ce0,
        we0 => layer_in_V_8_we0,
        d0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_output_V_d0,
        q0 => layer_in_V_8_q0);

    w5_V_U : component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config5_s_w5_V
    generic map (
        DataWidth => 191,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w5_V_address0,
        ce0 => w5_V_ce0,
        q0 => w5_V_q0);

    tmpdata_V_U : component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config5_s_tmpdhbi
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmpdata_V_address0,
        ce0 => tmpdata_V_ce0,
        we0 => tmpdata_V_we0,
        d0 => tmp_V_reg_2598,
        q0 => tmpdata_V_q0);

    layer_out_i_U : component conv_2d_cl_me_ap_fixed_ap_fixed_16_4_5_3_0_config2_s_layeeOg
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_out_i_address0,
        ce0 => layer_out_i_ce0,
        we0 => layer_out_i_we0,
        d0 => layer_out_i_d0,
        q0 => layer_out_i_q0,
        address1 => layer_out_i_address1,
        ce1 => layer_out_i_ce1,
        we1 => layer_out_i_we1,
        d1 => layer_out_i_d1);

    grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101 : component cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_start,
        ap_done => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done,
        ap_idle => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_idle,
        ap_ready => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_ready,
        data_V_address0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_data_V_address0,
        data_V_ce0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_data_V_ce0,
        data_V_q0 => tmpdata_V_q0,
        output_V_address0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_output_V_address0,
        output_V_ce0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_output_V_ce0,
        output_V_we0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_output_V_we0,
        output_V_d0 => grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_output_V_d0,
        output_V_q0 => layer_in_V_8_q0);

    myproject_axi_mul_5s_16s_21_2_1_U55 : component myproject_axi_mul_5s_16s_21_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 5,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_95_reg_2818,
        din1 => grp_fu_1648_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1648_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U56 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln344_reg_2663,
        din1 => grp_fu_2236_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2236_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U57 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_65_reg_2668,
        din1 => grp_fu_2242_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2242_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U58 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_66_reg_2673,
        din1 => grp_fu_2248_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2248_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U59 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_67_reg_2678,
        din1 => grp_fu_2254_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2254_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U60 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_68_reg_2683,
        din1 => grp_fu_2260_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2260_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U61 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_69_reg_2688,
        din1 => grp_fu_2266_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2266_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U62 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_70_reg_2693,
        din1 => grp_fu_2272_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2272_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U63 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_71_reg_2698,
        din1 => grp_fu_2278_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2278_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U64 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_72_reg_2703,
        din1 => grp_fu_2284_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2284_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U65 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_73_reg_2708,
        din1 => grp_fu_2290_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2290_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U66 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_74_reg_2713,
        din1 => grp_fu_2296_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2296_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U67 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_75_reg_2718,
        din1 => grp_fu_2302_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2302_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U68 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_76_reg_2723,
        din1 => grp_fu_2308_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2308_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U69 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_77_reg_2728,
        din1 => grp_fu_2314_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2314_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U70 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_78_reg_2733,
        din1 => grp_fu_2320_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2320_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U71 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_79_reg_2738,
        din1 => grp_fu_2326_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2326_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U72 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_80_reg_2743,
        din1 => grp_fu_2332_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2332_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U73 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_81_reg_2748,
        din1 => grp_fu_2338_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2338_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U74 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_82_reg_2753,
        din1 => grp_fu_2344_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2344_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U75 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_83_reg_2758,
        din1 => grp_fu_2350_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2350_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U76 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_84_reg_2763,
        din1 => grp_fu_2356_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2356_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U77 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_85_reg_2768,
        din1 => grp_fu_2362_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2362_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U78 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_86_reg_2773,
        din1 => grp_fu_2368_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2368_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U79 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_87_reg_2778,
        din1 => grp_fu_2374_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2374_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U80 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_88_reg_2783,
        din1 => grp_fu_2380_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2380_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U81 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_89_reg_2788,
        din1 => grp_fu_2386_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2386_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U82 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_90_reg_2793,
        din1 => grp_fu_2392_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2392_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U83 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_91_reg_2798,
        din1 => grp_fu_2398_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2398_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U84 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_92_reg_2803,
        din1 => grp_fu_2404_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2404_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U85 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_93_reg_2808,
        din1 => grp_fu_2410_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2410_p2);

    myproject_axi_mul_mul_6s_16s_21_3_1_U86 : component myproject_axi_mul_mul_6s_16s_21_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_94_reg_2813,
        din1 => grp_fu_2416_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2416_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln245_fu_1110_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state6);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((icmp_ln247_fu_1122_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (icmp_ln247_fu_1122_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_ready = ap_const_logic_1)) then 
                    grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    acc_V_0_0_reg_1055_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_0_0_reg_1055 <= acc_0_V_fu_1948_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_0_0_reg_1055 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_V_10_0_reg_925_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_10_0_reg_925 <= acc_10_V_fu_2008_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_10_0_reg_925 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_V_11_0_reg_912_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_11_0_reg_912 <= acc_11_V_fu_2014_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_11_0_reg_912 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_V_12_0_reg_899_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_12_0_reg_899 <= acc_12_V_fu_2020_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_12_0_reg_899 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_13_0_reg_886_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_13_0_reg_886 <= acc_13_V_fu_2026_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_13_0_reg_886 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_14_0_reg_873_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_14_0_reg_873 <= acc_14_V_fu_2032_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_14_0_reg_873 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_15_0_reg_860_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_15_0_reg_860 <= acc_15_V_fu_2038_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_15_0_reg_860 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_16_0_reg_847_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_16_0_reg_847 <= acc_16_V_fu_2044_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_16_0_reg_847 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_17_0_reg_834_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_17_0_reg_834 <= acc_17_V_fu_2050_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_17_0_reg_834 <= ap_const_lv16_FF80;
            end if; 
        end if;
    end process;

    acc_V_18_0_reg_821_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_18_0_reg_821 <= acc_18_V_fu_2056_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_18_0_reg_821 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_19_0_reg_808_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_19_0_reg_808 <= acc_19_V_fu_2062_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_19_0_reg_808 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_V_1_0_reg_1042_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_1_0_reg_1042 <= acc_1_V_fu_1954_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_1_0_reg_1042 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_20_0_reg_795_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_20_0_reg_795 <= acc_20_V_fu_2068_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_20_0_reg_795 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_21_0_reg_782_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_21_0_reg_782 <= acc_21_V_fu_2074_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_21_0_reg_782 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_22_0_reg_769_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_22_0_reg_769 <= acc_22_V_fu_2080_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_22_0_reg_769 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_23_0_reg_756_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_23_0_reg_756 <= acc_23_V_fu_2086_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_23_0_reg_756 <= ap_const_lv16_FF80;
            end if; 
        end if;
    end process;

    acc_V_24_0_reg_743_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_24_0_reg_743 <= acc_24_V_fu_2092_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_24_0_reg_743 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_25_0_reg_730_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_25_0_reg_730 <= acc_25_V_fu_2098_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_25_0_reg_730 <= ap_const_lv16_FE80;
            end if; 
        end if;
    end process;

    acc_V_26_0_reg_717_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_26_0_reg_717 <= acc_26_V_fu_2104_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_26_0_reg_717 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_27_0_reg_704_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_27_0_reg_704 <= acc_27_V_fu_2110_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_27_0_reg_704 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_28_0_reg_691_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_28_0_reg_691 <= acc_28_V_fu_2116_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_28_0_reg_691 <= ap_const_lv16_180;
            end if; 
        end if;
    end process;

    acc_V_29_0_reg_678_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_29_0_reg_678 <= acc_29_V_fu_2122_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_29_0_reg_678 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_V_2_0_reg_1029_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_2_0_reg_1029 <= acc_2_V_fu_1960_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_2_0_reg_1029 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_30_0_reg_665_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_30_0_reg_665 <= acc_30_V_fu_2128_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_30_0_reg_665 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_31_0_reg_652_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_31_0_reg_652 <= acc_31_V_reg_3179;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_31_0_reg_652 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_3_0_reg_1016_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_3_0_reg_1016 <= acc_3_V_fu_1966_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_3_0_reg_1016 <= ap_const_lv16_80;
            end if; 
        end if;
    end process;

    acc_V_4_0_reg_1003_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_4_0_reg_1003 <= acc_4_V_fu_1972_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_4_0_reg_1003 <= ap_const_lv16_FF00;
            end if; 
        end if;
    end process;

    acc_V_5_0_reg_990_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_5_0_reg_990 <= acc_5_V_fu_1978_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_5_0_reg_990 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_V_6_0_reg_977_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_6_0_reg_977 <= acc_6_V_fu_1984_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_6_0_reg_977 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    acc_V_7_0_reg_964_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_7_0_reg_964 <= acc_7_V_fu_1990_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_7_0_reg_964 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_V_8_0_reg_951_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_8_0_reg_951 <= acc_8_V_fu_1996_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_8_0_reg_951 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_V_9_0_reg_938_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
                acc_V_9_0_reg_938 <= acc_9_V_fu_2002_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_V_9_0_reg_938 <= ap_const_lv16_100;
            end if; 
        end if;
    end process;

    i1_0_i_reg_640_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln245_fu_1110_p2 = ap_const_lv1_0))) then 
                i1_0_i_reg_640 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i1_0_i_reg_640 <= i1_reg_2593;
            end if; 
        end if;
    end process;

    i_0_i_reg_629_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                i_0_i_reg_629 <= i_reg_2585;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_629 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    i_ic_0_i_reg_1079_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                i_ic_0_i_reg_1079 <= i_ic_reg_3342;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                i_ic_0_i_reg_1079 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    in_index_reg_1068_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln336_fu_1217_p2 = ap_const_lv1_0))) then 
                in_index_reg_1068 <= ir_fu_1223_p2;
            elsif (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                in_index_reg_1068 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    pX_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                if ((ap_const_boolean_1 = ap_condition_837)) then 
                    pX_3 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_623)) then 
                    pX_3 <= add_ln290_fu_2156_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                if ((ap_const_boolean_1 = ap_condition_779)) then 
                    pY_3 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_634)) then 
                    pY_3 <= add_ln285_fu_2196_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                sX_3 <= select_ln292_reg_3356;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (((icmp_ln277_fu_2151_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln255_4_reg_2635)) or ((icmp_ln277_fu_2151_p2 = ap_const_lv1_1) and (icmp_ln266_fu_2134_p2 = ap_const_lv1_1))))) then 
                sX_3 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    storemerge_i_reg_1090_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (((icmp_ln281_fu_2191_p2 = ap_const_lv1_1) and (icmp_ln277_fu_2151_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln255_4_reg_2635)) or ((icmp_ln281_fu_2191_p2 = ap_const_lv1_1) and (icmp_ln277_fu_2151_p2 = ap_const_lv1_1) and (icmp_ln266_fu_2134_p2 = ap_const_lv1_1))))) then 
                storemerge_i_reg_1090 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                storemerge_i_reg_1090 <= select_ln287_reg_3364;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter3_reg = ap_const_lv1_0))) then
                acc_31_V_reg_3179 <= acc_31_V_fu_1664_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                and_ln255_4_reg_2635 <= and_ln255_4_fu_1211_p2;
                icmp_ln255_4_reg_2618 <= icmp_ln255_4_fu_1153_p2;
                icmp_ln255_reg_2608 <= icmp_ln255_fu_1143_p2;
                pX_3_load_reg_2629 <= pX_3;
                pY_3_load_reg_2623 <= pY_3;
                sX_3_load_reg_2603 <= sX_3;
                sY_3_load_reg_2613 <= sY_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln247_fu_1122_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                i1_reg_2593 <= i1_fu_1128_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln255_4_reg_2635) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                i_ic_reg_3342 <= i_ic_fu_2140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_2585 <= i_fu_1116_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and ((icmp_ln266_fu_2134_p2 = ap_const_lv1_1) or (ap_const_lv1_0 = and_ln255_4_reg_2635)))) then
                icmp_ln277_reg_3352 <= icmp_ln277_fu_2151_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln336_reg_2639 <= icmp_ln336_fu_1217_p2;
                icmp_ln336_reg_2639_pp0_iter1_reg <= icmp_ln336_reg_2639;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln336_reg_2639_pp0_iter2_reg <= icmp_ln336_reg_2639_pp0_iter1_reg;
                icmp_ln336_reg_2639_pp0_iter3_reg <= icmp_ln336_reg_2639_pp0_iter2_reg;
                icmp_ln336_reg_2639_pp0_iter4_reg <= icmp_ln336_reg_2639_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln336_reg_2639 = ap_const_lv1_0))) then
                layer_in_V_8_load_reg_2658 <= layer_in_V_8_q0;
                tmp_65_reg_2668 <= w5_V_q0(11 downto 6);
                tmp_66_reg_2673 <= w5_V_q0(17 downto 12);
                tmp_67_reg_2678 <= w5_V_q0(23 downto 18);
                tmp_68_reg_2683 <= w5_V_q0(29 downto 24);
                tmp_69_reg_2688 <= w5_V_q0(35 downto 30);
                tmp_70_reg_2693 <= w5_V_q0(41 downto 36);
                tmp_71_reg_2698 <= w5_V_q0(47 downto 42);
                tmp_72_reg_2703 <= w5_V_q0(53 downto 48);
                tmp_73_reg_2708 <= w5_V_q0(59 downto 54);
                tmp_74_reg_2713 <= w5_V_q0(65 downto 60);
                tmp_75_reg_2718 <= w5_V_q0(71 downto 66);
                tmp_76_reg_2723 <= w5_V_q0(77 downto 72);
                tmp_77_reg_2728 <= w5_V_q0(83 downto 78);
                tmp_78_reg_2733 <= w5_V_q0(89 downto 84);
                tmp_79_reg_2738 <= w5_V_q0(95 downto 90);
                tmp_80_reg_2743 <= w5_V_q0(101 downto 96);
                tmp_81_reg_2748 <= w5_V_q0(107 downto 102);
                tmp_82_reg_2753 <= w5_V_q0(113 downto 108);
                tmp_83_reg_2758 <= w5_V_q0(119 downto 114);
                tmp_84_reg_2763 <= w5_V_q0(125 downto 120);
                tmp_85_reg_2768 <= w5_V_q0(131 downto 126);
                tmp_86_reg_2773 <= w5_V_q0(137 downto 132);
                tmp_87_reg_2778 <= w5_V_q0(143 downto 138);
                tmp_88_reg_2783 <= w5_V_q0(149 downto 144);
                tmp_89_reg_2788 <= w5_V_q0(155 downto 150);
                tmp_90_reg_2793 <= w5_V_q0(161 downto 156);
                tmp_91_reg_2798 <= w5_V_q0(167 downto 162);
                tmp_92_reg_2803 <= w5_V_q0(173 downto 168);
                tmp_93_reg_2808 <= w5_V_q0(179 downto 174);
                tmp_94_reg_2813 <= w5_V_q0(185 downto 180);
                tmp_95_reg_2818 <= w5_V_q0(190 downto 186);
                trunc_ln344_reg_2663 <= trunc_ln344_fu_1235_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln336_reg_2639_pp0_iter3_reg = ap_const_lv1_0))) then
                mul_ln1118_68_reg_3029 <= grp_fu_2242_p2;
                mul_ln1118_69_reg_3034 <= grp_fu_2248_p2;
                mul_ln1118_70_reg_3039 <= grp_fu_2254_p2;
                mul_ln1118_71_reg_3044 <= grp_fu_2260_p2;
                mul_ln1118_72_reg_3049 <= grp_fu_2266_p2;
                mul_ln1118_73_reg_3054 <= grp_fu_2272_p2;
                mul_ln1118_74_reg_3059 <= grp_fu_2278_p2;
                mul_ln1118_75_reg_3064 <= grp_fu_2284_p2;
                mul_ln1118_76_reg_3069 <= grp_fu_2290_p2;
                mul_ln1118_77_reg_3074 <= grp_fu_2296_p2;
                mul_ln1118_78_reg_3079 <= grp_fu_2302_p2;
                mul_ln1118_79_reg_3084 <= grp_fu_2308_p2;
                mul_ln1118_80_reg_3089 <= grp_fu_2314_p2;
                mul_ln1118_81_reg_3094 <= grp_fu_2320_p2;
                mul_ln1118_82_reg_3099 <= grp_fu_2326_p2;
                mul_ln1118_83_reg_3104 <= grp_fu_2332_p2;
                mul_ln1118_84_reg_3109 <= grp_fu_2338_p2;
                mul_ln1118_85_reg_3114 <= grp_fu_2344_p2;
                mul_ln1118_86_reg_3119 <= grp_fu_2350_p2;
                mul_ln1118_87_reg_3124 <= grp_fu_2356_p2;
                mul_ln1118_88_reg_3129 <= grp_fu_2362_p2;
                mul_ln1118_89_reg_3134 <= grp_fu_2368_p2;
                mul_ln1118_90_reg_3139 <= grp_fu_2374_p2;
                mul_ln1118_91_reg_3144 <= grp_fu_2380_p2;
                mul_ln1118_92_reg_3149 <= grp_fu_2386_p2;
                mul_ln1118_93_reg_3154 <= grp_fu_2392_p2;
                mul_ln1118_94_reg_3159 <= grp_fu_2398_p2;
                mul_ln1118_95_reg_3164 <= grp_fu_2404_p2;
                mul_ln1118_96_reg_3169 <= grp_fu_2410_p2;
                mul_ln1118_97_reg_3174 <= grp_fu_2416_p2;
                mul_ln1118_reg_3024 <= grp_fu_2236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                res_pack_V_reg_3369 <= layer_out_i_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln277_reg_3352 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                sY_3 <= storemerge_i_reg_1090;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (((icmp_ln277_fu_2151_p2 = ap_const_lv1_1) and (icmp_ln281_fu_2191_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln255_4_reg_2635)) or ((icmp_ln277_fu_2151_p2 = ap_const_lv1_1) and (icmp_ln266_fu_2134_p2 = ap_const_lv1_1) and (icmp_ln281_fu_2191_p2 = ap_const_lv1_0))))) then
                select_ln287_reg_3364 <= select_ln287_fu_2212_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (((icmp_ln277_fu_2151_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln255_4_reg_2635)) or ((icmp_ln266_fu_2134_p2 = ap_const_lv1_1) and (icmp_ln277_fu_2151_p2 = ap_const_lv1_0))))) then
                select_ln292_reg_3356 <= select_ln292_fu_2172_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln247_fu_1122_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (icmp_ln247_fu_1122_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_V_reg_2598 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln336_reg_2639_pp0_iter2_reg = ap_const_lv1_0))) then
                trunc_ln708_31_reg_3019 <= grp_fu_1648_p2(20 downto 5);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, data_V_V_empty_n, res_V_V_full_n, ap_CS_fsm_state3, icmp_ln247_fu_1122_p2, ap_CS_fsm_state30, ap_CS_fsm_state2, ap_CS_fsm_state5, grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done, and_ln255_4_fu_1211_p2, and_ln255_4_reg_2635, icmp_ln336_fu_1217_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_CS_fsm_state28, icmp_ln266_fu_2134_p2, icmp_ln277_fu_2151_p2, icmp_ln281_fu_2191_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, icmp_ln245_fu_1110_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln245_fu_1110_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((icmp_ln247_fu_1122_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (icmp_ln247_fu_1122_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif ((not(((icmp_ln247_fu_1122_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (icmp_ln247_fu_1122_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_lv1_1 = and_ln255_4_fu_1211_p2) and (grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = and_ln255_4_fu_1211_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln336_fu_1217_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln336_fu_1217_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (((icmp_ln281_fu_2191_p2 = ap_const_lv1_1) and (icmp_ln277_fu_2151_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln255_4_reg_2635)) or ((icmp_ln281_fu_2191_p2 = ap_const_lv1_1) and (icmp_ln277_fu_2151_p2 = ap_const_lv1_1) and (icmp_ln266_fu_2134_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (((icmp_ln277_fu_2151_p2 = ap_const_lv1_1) and (icmp_ln281_fu_2191_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln255_4_reg_2635)) or ((icmp_ln277_fu_2151_p2 = ap_const_lv1_1) and (icmp_ln266_fu_2134_p2 = ap_const_lv1_1) and (icmp_ln281_fu_2191_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (((icmp_ln277_fu_2151_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln255_4_reg_2635)) or ((icmp_ln266_fu_2134_p2 = ap_const_lv1_1) and (icmp_ln277_fu_2151_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    acc_0_V_fu_1948_p2 <= std_logic_vector(unsigned(acc_V_0_0_reg_1055) + unsigned(trunc_ln_fu_1669_p4));
    acc_10_V_fu_2008_p2 <= std_logic_vector(unsigned(acc_V_10_0_reg_925) + unsigned(trunc_ln708_10_fu_1759_p4));
    acc_11_V_fu_2014_p2 <= std_logic_vector(unsigned(acc_V_11_0_reg_912) + unsigned(trunc_ln708_11_fu_1768_p4));
    acc_12_V_fu_2020_p2 <= std_logic_vector(unsigned(acc_V_12_0_reg_899) + unsigned(trunc_ln708_12_fu_1777_p4));
    acc_13_V_fu_2026_p2 <= std_logic_vector(unsigned(acc_V_13_0_reg_886) + unsigned(trunc_ln708_13_fu_1786_p4));
    acc_14_V_fu_2032_p2 <= std_logic_vector(unsigned(acc_V_14_0_reg_873) + unsigned(trunc_ln708_14_fu_1795_p4));
    acc_15_V_fu_2038_p2 <= std_logic_vector(unsigned(acc_V_15_0_reg_860) + unsigned(trunc_ln708_15_fu_1804_p4));
    acc_16_V_fu_2044_p2 <= std_logic_vector(unsigned(acc_V_16_0_reg_847) + unsigned(trunc_ln708_16_fu_1813_p4));
    acc_17_V_fu_2050_p2 <= std_logic_vector(unsigned(acc_V_17_0_reg_834) + unsigned(trunc_ln708_17_fu_1822_p4));
    acc_18_V_fu_2056_p2 <= std_logic_vector(unsigned(acc_V_18_0_reg_821) + unsigned(trunc_ln708_18_fu_1831_p4));
    acc_19_V_fu_2062_p2 <= std_logic_vector(unsigned(acc_V_19_0_reg_808) + unsigned(trunc_ln708_19_fu_1840_p4));
    acc_1_V_fu_1954_p2 <= std_logic_vector(unsigned(acc_V_1_0_reg_1042) + unsigned(trunc_ln708_1_fu_1678_p4));
    acc_20_V_fu_2068_p2 <= std_logic_vector(unsigned(acc_V_20_0_reg_795) + unsigned(trunc_ln708_20_fu_1849_p4));
    acc_21_V_fu_2074_p2 <= std_logic_vector(unsigned(acc_V_21_0_reg_782) + unsigned(trunc_ln708_21_fu_1858_p4));
    acc_22_V_fu_2080_p2 <= std_logic_vector(unsigned(acc_V_22_0_reg_769) + unsigned(trunc_ln708_22_fu_1867_p4));
    acc_23_V_fu_2086_p2 <= std_logic_vector(unsigned(acc_V_23_0_reg_756) + unsigned(trunc_ln708_23_fu_1876_p4));
    acc_24_V_fu_2092_p2 <= std_logic_vector(unsigned(acc_V_24_0_reg_743) + unsigned(trunc_ln708_24_fu_1885_p4));
    acc_25_V_fu_2098_p2 <= std_logic_vector(unsigned(acc_V_25_0_reg_730) + unsigned(trunc_ln708_25_fu_1894_p4));
    acc_26_V_fu_2104_p2 <= std_logic_vector(unsigned(acc_V_26_0_reg_717) + unsigned(trunc_ln708_26_fu_1903_p4));
    acc_27_V_fu_2110_p2 <= std_logic_vector(unsigned(acc_V_27_0_reg_704) + unsigned(trunc_ln708_27_fu_1912_p4));
    acc_28_V_fu_2116_p2 <= std_logic_vector(unsigned(acc_V_28_0_reg_691) + unsigned(trunc_ln708_28_fu_1921_p4));
    acc_29_V_fu_2122_p2 <= std_logic_vector(unsigned(acc_V_29_0_reg_678) + unsigned(trunc_ln708_29_fu_1930_p4));
    acc_2_V_fu_1960_p2 <= std_logic_vector(unsigned(acc_V_2_0_reg_1029) + unsigned(trunc_ln708_2_fu_1687_p4));
    acc_30_V_fu_2128_p2 <= std_logic_vector(unsigned(acc_V_30_0_reg_665) + unsigned(trunc_ln708_30_fu_1939_p4));
    acc_31_V_fu_1664_p2 <= std_logic_vector(unsigned(ap_phi_mux_acc_V_31_0_phi_fu_657_p4) + unsigned(trunc_ln708_31_reg_3019));
    acc_3_V_fu_1966_p2 <= std_logic_vector(unsigned(acc_V_3_0_reg_1016) + unsigned(trunc_ln708_3_fu_1696_p4));
    acc_4_V_fu_1972_p2 <= std_logic_vector(unsigned(acc_V_4_0_reg_1003) + unsigned(trunc_ln708_4_fu_1705_p4));
    acc_5_V_fu_1978_p2 <= std_logic_vector(unsigned(acc_V_5_0_reg_990) + unsigned(trunc_ln708_5_fu_1714_p4));
    acc_6_V_fu_1984_p2 <= std_logic_vector(unsigned(acc_V_6_0_reg_977) + unsigned(trunc_ln708_6_fu_1723_p4));
    acc_7_V_fu_1990_p2 <= std_logic_vector(unsigned(acc_V_7_0_reg_964) + unsigned(trunc_ln708_7_fu_1732_p4));
    acc_8_V_fu_1996_p2 <= std_logic_vector(unsigned(acc_V_8_0_reg_951) + unsigned(trunc_ln708_8_fu_1741_p4));
    acc_9_V_fu_2002_p2 <= std_logic_vector(unsigned(acc_V_9_0_reg_938) + unsigned(trunc_ln708_9_fu_1750_p4));
    add_ln285_fu_2196_p2 <= std_logic_vector(unsigned(pY_3_load_reg_2623) + unsigned(ap_const_lv32_1));
    add_ln287_fu_2207_p2 <= std_logic_vector(unsigned(sY_3_load_reg_2613) + unsigned(ap_const_lv32_1));
    add_ln290_fu_2156_p2 <= std_logic_vector(unsigned(pX_3_load_reg_2629) + unsigned(ap_const_lv32_1));
    add_ln292_fu_2167_p2 <= std_logic_vector(unsigned(sX_3_load_reg_2603) + unsigned(ap_const_lv32_1));
    and_ln255_3_fu_1205_p2 <= (icmp_ln255_6_fu_1193_p2 and icmp_ln255_5_fu_1173_p2);
    and_ln255_4_fu_1211_p2 <= (and_ln255_fu_1199_p2 and and_ln255_3_fu_1205_p2);
    and_ln255_fu_1199_p2 <= (icmp_ln255_fu_1143_p2 and icmp_ln255_4_fu_1153_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(6);
    ap_CS_fsm_state13 <= ap_CS_fsm(7);
    ap_CS_fsm_state14 <= ap_CS_fsm(8);
    ap_CS_fsm_state15 <= ap_CS_fsm(9);
    ap_CS_fsm_state16 <= ap_CS_fsm(10);
    ap_CS_fsm_state17 <= ap_CS_fsm(11);
    ap_CS_fsm_state18 <= ap_CS_fsm(12);
    ap_CS_fsm_state19 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(14);
    ap_CS_fsm_state21 <= ap_CS_fsm(15);
    ap_CS_fsm_state22 <= ap_CS_fsm(16);
    ap_CS_fsm_state23 <= ap_CS_fsm(17);
    ap_CS_fsm_state24 <= ap_CS_fsm(18);
    ap_CS_fsm_state25 <= ap_CS_fsm(19);
    ap_CS_fsm_state26 <= ap_CS_fsm(20);
    ap_CS_fsm_state27 <= ap_CS_fsm(21);
    ap_CS_fsm_state28 <= ap_CS_fsm(22);
    ap_CS_fsm_state29 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(24);
    ap_CS_fsm_state31 <= ap_CS_fsm(25);
    ap_CS_fsm_state32 <= ap_CS_fsm(26);
    ap_CS_fsm_state33 <= ap_CS_fsm(27);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_assign_proc : process(data_V_V_empty_n, icmp_ln247_fu_1122_p2)
    begin
                ap_block_state3 <= ((icmp_ln247_fu_1122_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_ignore_call0_assign_proc : process(data_V_V_empty_n, icmp_ln247_fu_1122_p2)
    begin
                ap_block_state3_ignore_call0 <= ((icmp_ln247_fu_1122_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_623_assign_proc : process(and_ln255_4_reg_2635, icmp_ln266_fu_2134_p2, icmp_ln277_fu_2151_p2)
    begin
                ap_condition_623 <= (((icmp_ln277_fu_2151_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln255_4_reg_2635)) or ((icmp_ln266_fu_2134_p2 = ap_const_lv1_1) and (icmp_ln277_fu_2151_p2 = ap_const_lv1_0)));
    end process;


    ap_condition_634_assign_proc : process(and_ln255_4_reg_2635, icmp_ln266_fu_2134_p2, icmp_ln277_fu_2151_p2, icmp_ln281_fu_2191_p2)
    begin
                ap_condition_634 <= (((icmp_ln277_fu_2151_p2 = ap_const_lv1_1) and (icmp_ln281_fu_2191_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln255_4_reg_2635)) or ((icmp_ln277_fu_2151_p2 = ap_const_lv1_1) and (icmp_ln266_fu_2134_p2 = ap_const_lv1_1) and (icmp_ln281_fu_2191_p2 = ap_const_lv1_0)));
    end process;


    ap_condition_779_assign_proc : process(and_ln255_4_reg_2635, icmp_ln266_fu_2134_p2, icmp_ln277_fu_2151_p2, icmp_ln281_fu_2191_p2)
    begin
                ap_condition_779 <= (((icmp_ln281_fu_2191_p2 = ap_const_lv1_1) and (icmp_ln277_fu_2151_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln255_4_reg_2635)) or ((icmp_ln281_fu_2191_p2 = ap_const_lv1_1) and (icmp_ln277_fu_2151_p2 = ap_const_lv1_1) and (icmp_ln266_fu_2134_p2 = ap_const_lv1_1)));
    end process;


    ap_condition_837_assign_proc : process(and_ln255_4_reg_2635, icmp_ln266_fu_2134_p2, icmp_ln277_fu_2151_p2)
    begin
                ap_condition_837 <= (((icmp_ln277_fu_2151_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln255_4_reg_2635)) or ((icmp_ln277_fu_2151_p2 = ap_const_lv1_1) and (icmp_ln266_fu_2134_p2 = ap_const_lv1_1)));
    end process;


    ap_condition_pp0_exit_iter0_state6_assign_proc : process(icmp_ln336_fu_1217_p2)
    begin
        if ((icmp_ln336_fu_1217_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln245_fu_1110_p2)
    begin
        if (((icmp_ln245_fu_1110_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_acc_V_31_0_phi_fu_657_p4_assign_proc : process(acc_V_31_0_reg_652, icmp_ln336_reg_2639_pp0_iter4_reg, acc_31_V_reg_3179, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln336_reg_2639_pp0_iter4_reg = ap_const_lv1_0))) then 
            ap_phi_mux_acc_V_31_0_phi_fu_657_p4 <= acc_31_V_reg_3179;
        else 
            ap_phi_mux_acc_V_31_0_phi_fu_657_p4 <= acc_V_31_0_reg_652;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data_V_V_blk_n_assign_proc : process(data_V_V_empty_n, ap_CS_fsm_state3, icmp_ln247_fu_1122_p2)
    begin
        if (((icmp_ln247_fu_1122_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data_V_V_blk_n <= data_V_V_empty_n;
        else 
            data_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_V_read_assign_proc : process(data_V_V_empty_n, ap_CS_fsm_state3, icmp_ln247_fu_1122_p2)
    begin
        if ((not(((icmp_ln247_fu_1122_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0))) and (icmp_ln247_fu_1122_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data_V_V_read <= ap_const_logic_1;
        else 
            data_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_start <= grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_ap_start_reg;
    grp_fu_1648_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2236_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2242_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2248_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2254_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2260_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2266_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2272_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2278_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2284_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2290_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2296_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2302_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2308_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2314_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2320_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2326_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2332_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2338_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2344_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2350_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2356_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2362_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2368_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2374_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2380_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2386_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2392_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2398_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2404_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2410_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    grp_fu_2416_p1 <= sext_ln1116_cast_fu_1549_p1(16 - 1 downto 0);
    i1_fu_1128_p2 <= std_logic_vector(unsigned(i1_0_i_reg_640) + unsigned(ap_const_lv6_1));
    i_fu_1116_p2 <= std_logic_vector(unsigned(i_0_i_reg_629) + unsigned(ap_const_lv11_1));
    i_ic_fu_2140_p2 <= std_logic_vector(unsigned(i_ic_0_i_reg_1079) + unsigned(ap_const_lv6_1));
    icmp_ln245_fu_1110_p2 <= "1" when (i_0_i_reg_629 = ap_const_lv11_400) else "0";
    icmp_ln247_fu_1122_p2 <= "1" when (i1_0_i_reg_640 = ap_const_lv6_20) else "0";
    icmp_ln255_4_fu_1153_p2 <= "1" when (sY_3 = ap_const_lv32_2) else "0";
    icmp_ln255_5_fu_1173_p2 <= "1" when (signed(tmp_96_fu_1163_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln255_6_fu_1193_p2 <= "1" when (signed(tmp_97_fu_1183_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln255_fu_1143_p2 <= "1" when (sX_3 = ap_const_lv32_2) else "0";
    icmp_ln266_fu_2134_p2 <= "1" when (i_ic_0_i_reg_1079 = ap_const_lv6_20) else "0";
    icmp_ln277_fu_2151_p2 <= "1" when (pX_3_load_reg_2629 = ap_const_lv32_1F) else "0";
    icmp_ln281_fu_2191_p2 <= "1" when (pY_3_load_reg_2623 = ap_const_lv32_1F) else "0";
    icmp_ln336_fu_1217_p2 <= "1" when (in_index_reg_1068 = ap_const_lv9_120) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln245_fu_1110_p2)
    begin
        if (((icmp_ln245_fu_1110_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ir_fu_1223_p2 <= std_logic_vector(unsigned(in_index_reg_1068) + unsigned(ap_const_lv9_1));

    layer_in_V_8_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_output_V_address0, ap_block_pp0_stage0, zext_ln344_fu_1229_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer_in_V_8_address0 <= zext_ln344_fu_1229_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_in_V_8_address0 <= grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_output_V_address0;
        else 
            layer_in_V_8_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    layer_in_V_8_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_output_V_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer_in_V_8_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_in_V_8_ce0 <= grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_output_V_ce0;
        else 
            layer_in_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_V_8_we0_assign_proc : process(ap_CS_fsm_state5, grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_output_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_in_V_8_we0 <= grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_output_V_we0;
        else 
            layer_in_V_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_out_i_address0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state27, zext_ln268_fu_2146_p1, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            layer_out_i_address0 <= zext_ln268_fu_2146_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer_out_i_address0 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            layer_out_i_address0 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            layer_out_i_address0 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_out_i_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            layer_out_i_address0 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer_out_i_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            layer_out_i_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            layer_out_i_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            layer_out_i_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            layer_out_i_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            layer_out_i_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            layer_out_i_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            layer_out_i_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            layer_out_i_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            layer_out_i_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            layer_out_i_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            layer_out_i_address0 <= "XXXXX";
        end if; 
    end process;


    layer_out_i_address1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer_out_i_address1 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            layer_out_i_address1 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            layer_out_i_address1 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_out_i_address1 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            layer_out_i_address1 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer_out_i_address1 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            layer_out_i_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            layer_out_i_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            layer_out_i_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            layer_out_i_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            layer_out_i_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            layer_out_i_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            layer_out_i_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            layer_out_i_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            layer_out_i_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            layer_out_i_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            layer_out_i_address1 <= "XXXXX";
        end if; 
    end process;


    layer_out_i_ce0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state27, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            layer_out_i_ce0 <= ap_const_logic_1;
        else 
            layer_out_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_out_i_ce1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            layer_out_i_ce1 <= ap_const_logic_1;
        else 
            layer_out_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    layer_out_i_d0_assign_proc : process(acc_V_30_0_reg_665, acc_V_28_0_reg_691, acc_V_26_0_reg_717, acc_V_24_0_reg_743, acc_V_22_0_reg_769, acc_V_20_0_reg_795, acc_V_18_0_reg_821, acc_V_16_0_reg_847, acc_V_14_0_reg_873, acc_V_12_0_reg_899, acc_V_10_0_reg_925, acc_V_8_0_reg_951, acc_V_6_0_reg_977, acc_V_4_0_reg_1003, acc_V_2_0_reg_1029, acc_V_0_0_reg_1055, ap_CS_fsm_state27, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer_out_i_d0 <= acc_V_30_0_reg_665;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            layer_out_i_d0 <= acc_V_28_0_reg_691;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            layer_out_i_d0 <= acc_V_26_0_reg_717;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_out_i_d0 <= acc_V_24_0_reg_743;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            layer_out_i_d0 <= acc_V_22_0_reg_769;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer_out_i_d0 <= acc_V_20_0_reg_795;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            layer_out_i_d0 <= acc_V_18_0_reg_821;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            layer_out_i_d0 <= acc_V_16_0_reg_847;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            layer_out_i_d0 <= acc_V_14_0_reg_873;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            layer_out_i_d0 <= acc_V_12_0_reg_899;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            layer_out_i_d0 <= acc_V_10_0_reg_925;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            layer_out_i_d0 <= acc_V_8_0_reg_951;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            layer_out_i_d0 <= acc_V_6_0_reg_977;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            layer_out_i_d0 <= acc_V_4_0_reg_1003;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            layer_out_i_d0 <= acc_V_2_0_reg_1029;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            layer_out_i_d0 <= acc_V_0_0_reg_1055;
        else 
            layer_out_i_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    layer_out_i_d1_assign_proc : process(acc_V_31_0_reg_652, acc_V_29_0_reg_678, acc_V_27_0_reg_704, acc_V_25_0_reg_730, acc_V_23_0_reg_756, acc_V_21_0_reg_782, acc_V_19_0_reg_808, acc_V_17_0_reg_834, acc_V_15_0_reg_860, acc_V_13_0_reg_886, acc_V_11_0_reg_912, acc_V_9_0_reg_938, acc_V_7_0_reg_964, acc_V_5_0_reg_990, acc_V_3_0_reg_1016, acc_V_1_0_reg_1042, ap_CS_fsm_state27, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer_out_i_d1 <= acc_V_31_0_reg_652;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            layer_out_i_d1 <= acc_V_29_0_reg_678;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            layer_out_i_d1 <= acc_V_27_0_reg_704;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer_out_i_d1 <= acc_V_25_0_reg_730;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            layer_out_i_d1 <= acc_V_23_0_reg_756;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer_out_i_d1 <= acc_V_21_0_reg_782;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            layer_out_i_d1 <= acc_V_19_0_reg_808;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            layer_out_i_d1 <= acc_V_17_0_reg_834;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            layer_out_i_d1 <= acc_V_15_0_reg_860;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            layer_out_i_d1 <= acc_V_13_0_reg_886;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            layer_out_i_d1 <= acc_V_11_0_reg_912;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            layer_out_i_d1 <= acc_V_9_0_reg_938;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            layer_out_i_d1 <= acc_V_7_0_reg_964;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            layer_out_i_d1 <= acc_V_5_0_reg_990;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            layer_out_i_d1 <= acc_V_3_0_reg_1016;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            layer_out_i_d1 <= acc_V_1_0_reg_1042;
        else 
            layer_out_i_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    layer_out_i_we0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            layer_out_i_we0 <= ap_const_logic_1;
        else 
            layer_out_i_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_out_i_we1_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            layer_out_i_we1 <= ap_const_logic_1;
        else 
            layer_out_i_we1 <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_V_blk_n_assign_proc : process(res_V_V_full_n, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            res_V_V_blk_n <= res_V_V_full_n;
        else 
            res_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_V_din <= res_pack_V_reg_3369;

    res_V_V_write_assign_proc : process(res_V_V_full_n, ap_CS_fsm_state30)
    begin
        if (((res_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            res_V_V_write <= ap_const_logic_1;
        else 
            res_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln287_fu_2212_p3 <= 
        ap_const_lv32_2 when (icmp_ln255_4_reg_2618(0) = '1') else 
        add_ln287_fu_2207_p2;
    select_ln292_fu_2172_p3 <= 
        ap_const_lv32_2 when (icmp_ln255_reg_2608(0) = '1') else 
        add_ln292_fu_2167_p2;
        sext_ln1116_cast_fu_1549_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(layer_in_V_8_load_reg_2658),21));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_96_fu_1163_p4 <= pY_3(31 downto 1);
    tmp_97_fu_1183_p4 <= pX_3(31 downto 1);

    tmpdata_V_address0_assign_proc : process(ap_CS_fsm_state5, grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_data_V_address0, ap_CS_fsm_state4, zext_ln249_fu_1134_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmpdata_V_address0 <= zext_ln249_fu_1134_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmpdata_V_address0 <= grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_data_V_address0;
        else 
            tmpdata_V_address0 <= "XXXXX";
        end if; 
    end process;


    tmpdata_V_ce0_assign_proc : process(ap_CS_fsm_state5, grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_data_V_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmpdata_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmpdata_V_ce0 <= grp_cnnshift_arr_buffer_ap_fixed_ap_fixed_config5_s_fu_1101_data_V_ce0;
        else 
            tmpdata_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmpdata_V_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmpdata_V_we0 <= ap_const_logic_1;
        else 
            tmpdata_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln344_fu_1235_p1 <= w5_V_q0(6 - 1 downto 0);
    trunc_ln708_10_fu_1759_p4 <= mul_ln1118_77_reg_3074(20 downto 5);
    trunc_ln708_11_fu_1768_p4 <= mul_ln1118_78_reg_3079(20 downto 5);
    trunc_ln708_12_fu_1777_p4 <= mul_ln1118_79_reg_3084(20 downto 5);
    trunc_ln708_13_fu_1786_p4 <= mul_ln1118_80_reg_3089(20 downto 5);
    trunc_ln708_14_fu_1795_p4 <= mul_ln1118_81_reg_3094(20 downto 5);
    trunc_ln708_15_fu_1804_p4 <= mul_ln1118_82_reg_3099(20 downto 5);
    trunc_ln708_16_fu_1813_p4 <= mul_ln1118_83_reg_3104(20 downto 5);
    trunc_ln708_17_fu_1822_p4 <= mul_ln1118_84_reg_3109(20 downto 5);
    trunc_ln708_18_fu_1831_p4 <= mul_ln1118_85_reg_3114(20 downto 5);
    trunc_ln708_19_fu_1840_p4 <= mul_ln1118_86_reg_3119(20 downto 5);
    trunc_ln708_1_fu_1678_p4 <= mul_ln1118_68_reg_3029(20 downto 5);
    trunc_ln708_20_fu_1849_p4 <= mul_ln1118_87_reg_3124(20 downto 5);
    trunc_ln708_21_fu_1858_p4 <= mul_ln1118_88_reg_3129(20 downto 5);
    trunc_ln708_22_fu_1867_p4 <= mul_ln1118_89_reg_3134(20 downto 5);
    trunc_ln708_23_fu_1876_p4 <= mul_ln1118_90_reg_3139(20 downto 5);
    trunc_ln708_24_fu_1885_p4 <= mul_ln1118_91_reg_3144(20 downto 5);
    trunc_ln708_25_fu_1894_p4 <= mul_ln1118_92_reg_3149(20 downto 5);
    trunc_ln708_26_fu_1903_p4 <= mul_ln1118_93_reg_3154(20 downto 5);
    trunc_ln708_27_fu_1912_p4 <= mul_ln1118_94_reg_3159(20 downto 5);
    trunc_ln708_28_fu_1921_p4 <= mul_ln1118_95_reg_3164(20 downto 5);
    trunc_ln708_29_fu_1930_p4 <= mul_ln1118_96_reg_3169(20 downto 5);
    trunc_ln708_2_fu_1687_p4 <= mul_ln1118_69_reg_3034(20 downto 5);
    trunc_ln708_30_fu_1939_p4 <= mul_ln1118_97_reg_3174(20 downto 5);
    trunc_ln708_3_fu_1696_p4 <= mul_ln1118_70_reg_3039(20 downto 5);
    trunc_ln708_4_fu_1705_p4 <= mul_ln1118_71_reg_3044(20 downto 5);
    trunc_ln708_5_fu_1714_p4 <= mul_ln1118_72_reg_3049(20 downto 5);
    trunc_ln708_6_fu_1723_p4 <= mul_ln1118_73_reg_3054(20 downto 5);
    trunc_ln708_7_fu_1732_p4 <= mul_ln1118_74_reg_3059(20 downto 5);
    trunc_ln708_8_fu_1741_p4 <= mul_ln1118_75_reg_3064(20 downto 5);
    trunc_ln708_9_fu_1750_p4 <= mul_ln1118_76_reg_3069(20 downto 5);
    trunc_ln_fu_1669_p4 <= mul_ln1118_reg_3024(20 downto 5);
    w5_V_address0 <= zext_ln344_fu_1229_p1(9 - 1 downto 0);

    w5_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w5_V_ce0 <= ap_const_logic_1;
        else 
            w5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln249_fu_1134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_i_reg_640),64));
    zext_ln268_fu_2146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_ic_0_i_reg_1079),64));
    zext_ln344_fu_1229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_index_reg_1068),64));
end behav;
