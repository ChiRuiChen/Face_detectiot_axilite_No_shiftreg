// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sigmoid_me_ap_fixed_ap_fixed_sigmoid_config19_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_V_V_dout,
        data_V_V_empty_n,
        data_V_V_read,
        res_V_V_din,
        res_V_V_full_n,
        res_V_V_write
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] data_V_V_dout;
input   data_V_V_empty_n;
output   data_V_V_read;
output  [15:0] res_V_V_din;
input   res_V_V_full_n;
output   res_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_V_read;
reg res_V_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] sigmoid_table1_address0;
reg    sigmoid_table1_ce0;
wire   [9:0] sigmoid_table1_q0;
reg    data_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln148_fu_109_p2;
reg    res_V_V_blk_n;
wire    ap_CS_fsm_state7;
wire   [2:0] i_fu_115_p2;
reg   [2:0] i_reg_233;
reg    ap_block_state2;
reg   [15:0] tmp_V_reg_238;
reg   [9:0] tmp_reg_243;
wire   [0:0] icmp_ln851_fu_143_p2;
reg   [0:0] icmp_ln851_reg_248;
wire  signed [10:0] sext_ln835_fu_156_p1;
reg  signed [10:0] sext_ln835_reg_253;
wire    ap_CS_fsm_state3;
wire   [0:0] p_Result_s_fu_159_p2;
reg   [0:0] p_Result_s_reg_259;
wire   [10:0] ret_V_fu_165_p2;
reg   [10:0] ret_V_reg_264;
wire   [9:0] select_ln160_fu_206_p3;
reg   [9:0] select_ln160_reg_269;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [9:0] p_Val2_s_reg_279;
wire    ap_CS_fsm_state6;
reg   [2:0] i_0_reg_98;
reg    ap_block_state1;
wire   [63:0] zext_ln161_fu_214_p1;
wire   [5:0] trunc_ln851_fu_131_p1;
wire   [11:0] p_Result_2_fu_135_p3;
wire   [25:0] r_V_fu_149_p3;
wire   [10:0] select_ln851_fu_171_p3;
wire   [10:0] select_ln850_fu_176_p3;
wire   [9:0] trunc_ln158_fu_182_p1;
wire   [10:0] index_fu_186_p2;
wire   [0:0] tmp_1_fu_198_p3;
wire   [9:0] xor_ln158_fu_192_p2;
wire   [11:0] out_data_V_fu_218_p3;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
end

sigmoid_me_ap_fixed_ap_fixed_sigmoid_config19_s_sigmoid_tb4t #(
    .DataWidth( 10 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
sigmoid_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sigmoid_table1_address0),
    .ce0(sigmoid_table1_ce0),
    .q0(sigmoid_table1_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((icmp_ln148_fu_109_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln148_fu_109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_0_reg_98 <= i_reg_233;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_98 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln148_fu_109_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_233 <= i_fu_115_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln148_fu_109_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln148_fu_109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln851_reg_248 <= icmp_ln851_fu_143_p2;
        tmp_V_reg_238 <= data_V_V_dout;
        tmp_reg_243 <= {{data_V_V_dout[15:6]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_Result_s_reg_259 <= p_Result_s_fu_159_p2;
        sext_ln835_reg_253 <= sext_ln835_fu_156_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_s_reg_279 <= sigmoid_table1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln851_reg_248 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ret_V_reg_264 <= ret_V_fu_165_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        select_ln160_reg_269 <= select_ln160_fu_206_p3;
    end
end

always @ (*) begin
    if ((~((icmp_ln148_fu_109_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln148_fu_109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln148_fu_109_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln148_fu_109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln148_fu_109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        data_V_V_blk_n = data_V_V_empty_n;
    end else begin
        data_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln148_fu_109_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln148_fu_109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        data_V_V_read = 1'b1;
    end else begin
        data_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        res_V_V_blk_n = res_V_V_full_n;
    end else begin
        res_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        res_V_V_write = 1'b1;
    end else begin
        res_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sigmoid_table1_ce0 = 1'b1;
    end else begin
        sigmoid_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln148_fu_109_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln148_fu_109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((icmp_ln148_fu_109_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln148_fu_109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln148_fu_109_p2 == 1'd0) & (data_V_V_empty_n == 1'b0));
end

assign i_fu_115_p2 = (i_0_reg_98 + 3'd1);

assign icmp_ln148_fu_109_p2 = ((i_0_reg_98 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln851_fu_143_p2 = ((p_Result_2_fu_135_p3 == 12'd0) ? 1'b1 : 1'b0);

assign index_fu_186_p2 = (11'd512 + select_ln850_fu_176_p3);

assign out_data_V_fu_218_p3 = {{p_Val2_s_reg_279}, {2'd0}};

assign p_Result_2_fu_135_p3 = {{trunc_ln851_fu_131_p1}, {6'd0}};

assign p_Result_s_fu_159_p2 = (($signed(r_V_fu_149_p3) < $signed(26'd67108849)) ? 1'b1 : 1'b0);

assign r_V_fu_149_p3 = {{tmp_V_reg_238}, {10'd0}};

assign res_V_V_din = out_data_V_fu_218_p3;

assign ret_V_fu_165_p2 = ($signed(11'd1) + $signed(sext_ln835_fu_156_p1));

assign select_ln160_fu_206_p3 = ((tmp_1_fu_198_p3[0:0] === 1'b1) ? 10'd1023 : xor_ln158_fu_192_p2);

assign select_ln850_fu_176_p3 = ((p_Result_s_reg_259[0:0] === 1'b1) ? select_ln851_fu_171_p3 : sext_ln835_reg_253);

assign select_ln851_fu_171_p3 = ((icmp_ln851_reg_248[0:0] === 1'b1) ? sext_ln835_reg_253 : ret_V_reg_264);

assign sext_ln835_fu_156_p1 = $signed(tmp_reg_243);

assign sigmoid_table1_address0 = zext_ln161_fu_214_p1;

assign tmp_1_fu_198_p3 = index_fu_186_p2[32'd10];

assign trunc_ln158_fu_182_p1 = select_ln850_fu_176_p3[9:0];

assign trunc_ln851_fu_131_p1 = data_V_V_dout[5:0];

assign xor_ln158_fu_192_p2 = (trunc_ln158_fu_182_p1 ^ 10'd512);

assign zext_ln161_fu_214_p1 = select_ln160_reg_269;

endmodule //sigmoid_me_ap_fixed_ap_fixed_sigmoid_config19_s
